// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: platform/v1/PlatformService_v1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known errors that may be thrown by platform API operations.
public enum Bloombox_Schema_Services_Platform_V1_PlatformError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0

  /// Search services are not currently available.
  case searchNotAvailable // = 1

  /// The domain origin value was missing or invalid.
  case originInvalid // = 2

  /// The specified domain or origin could not be resolved.
  case originNotFound // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .searchNotAvailable
    case 2: self = .originInvalid
    case 3: self = .originNotFound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .searchNotAvailable: return 1
    case .originInvalid: return 2
    case .originNotFound: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies the status of this service in PING responses.
public enum Bloombox_Schema_Services_Platform_V1_PlatformServiceStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The state of the service is not known.
  case unknown // = 0

  /// The service is up and functioning normally.
  case up // = 1

  /// The service is down.
  case down // = 2

  /// The service is under maintenance.
  case maintenance // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .up
    case 2: self = .down
    case 3: self = .maintenance
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .up: return 1
    case .down: return 2
    case .maintenance: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies an RPC operation to retrieve status information for the Checkin API.
public struct Bloombox_Schema_Services_Platform_V1_Ping: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Ping"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a platform ping request.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_Ping.protoMessageName + ".Request"

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let _ = try decoder.nextFieldNumber() {
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies a platform ping response.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_Ping.protoMessageName + ".Response"

    /// Current service status.
    public var status: Bloombox_Schema_Services_Platform_V1_PlatformServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &self.status)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.status != .unknown {
        try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC operation to retrieve system health status for automated external systems.
public struct Bloombox_Schema_Services_Platform_V1_Healthcheck: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Healthcheck"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a healthcheck request.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_Healthcheck.protoMessageName + ".Request"

    /// Name of the probe that is measuring health. Arbitrary string to identify the source of healthcheck traffic.
    public var probe: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.probe)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.probe.isEmpty {
        try visitor.visitSingularStringField(value: self.probe, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC operation to retrieve information for a given partner domain.
public struct Bloombox_Schema_Services_Platform_V1_DomainResolve: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".DomainResolve"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to retrieve information about a partner domain.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_DomainResolve.protoMessageName + ".Request"

    /// Base64-encoded domain origin to resolve.
    public var origin: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.origin)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.origin.isEmpty {
        try visitor.visitSingularStringField(value: self.origin, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request to retrieve information about a partner domain.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_DomainResolve.protoMessageName + ".Response"

    /// Partner ID to apply for the given domain.
    public var partner: String = String()

    /// Location ID to apply for the given domain.
    public var location: String = String()

    /// API key to use with the JS SDK.
    public var apikey: String = String()

    /// OAuth2 client ID assigned to the property.
    public var clientID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.partner)
        case 2: try decoder.decodeSingularStringField(value: &self.location)
        case 3: try decoder.decodeSingularStringField(value: &self.apikey)
        case 4: try decoder.decodeSingularStringField(value: &self.clientID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.partner.isEmpty {
        try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
      }
      if !self.location.isEmpty {
        try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
      }
      if !self.apikey.isEmpty {
        try visitor.visitSingularStringField(value: self.apikey, fieldNumber: 3)
      }
      if !self.clientID.isEmpty {
        try visitor.visitSingularStringField(value: self.clientID, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies a request to retrieve the set of domains assigned for use by a partner location.
public struct Bloombox_Schema_Services_Platform_V1_DomainInfo: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".DomainInfo"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request for domain info.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_DomainInfo.protoMessageName + ".Request"

    /// Partner ID to fetch domains for.
    public var partnerID: String = String()

    /// Location ID to fetch domains for.
    public var locationID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.partnerID)
        case 2: try decoder.decodeSingularStringField(value: &self.locationID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.partnerID.isEmpty {
        try visitor.visitSingularStringField(value: self.partnerID, fieldNumber: 1)
      }
      if !self.locationID.isEmpty {
        try visitor.visitSingularStringField(value: self.locationID, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request for domain info.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Platform_V1_DomainInfo.protoMessageName + ".Response"

    /// Shop domain/home link.
    public var shop: String = String()

    /// Standalone menu link.
    public var menu: String = String()

    /// Dashboard link.
    public var dashboard: String = String()

    /// TV menu link.
    public var tv: String = String()

    /// Embedded/email link domain.
    public var link: String = String()

    /// Internal/store website for the partner location.
    public var website: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.shop)
        case 2: try decoder.decodeSingularStringField(value: &self.menu)
        case 3: try decoder.decodeSingularStringField(value: &self.dashboard)
        case 4: try decoder.decodeSingularStringField(value: &self.tv)
        case 5: try decoder.decodeSingularStringField(value: &self.link)
        case 6: try decoder.decodeSingularStringField(value: &self.website)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.shop.isEmpty {
        try visitor.visitSingularStringField(value: self.shop, fieldNumber: 1)
      }
      if !self.menu.isEmpty {
        try visitor.visitSingularStringField(value: self.menu, fieldNumber: 2)
      }
      if !self.dashboard.isEmpty {
        try visitor.visitSingularStringField(value: self.dashboard, fieldNumber: 3)
      }
      if !self.tv.isEmpty {
        try visitor.visitSingularStringField(value: self.tv, fieldNumber: 4)
      }
      if !self.link.isEmpty {
        try visitor.visitSingularStringField(value: self.link, fieldNumber: 5)
      }
      if !self.website.isEmpty {
        try visitor.visitSingularStringField(value: self.website, fieldNumber: 6)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.platform.v1"

extension Bloombox_Schema_Services_Platform_V1_PlatformError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "SEARCH_NOT_AVAILABLE"),
    2: .same(proto: "ORIGIN_INVALID"),
    3: .same(proto: "ORIGIN_NOT_FOUND"),
  ]
}

extension Bloombox_Schema_Services_Platform_V1_PlatformServiceStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "UP"),
    2: .same(proto: "DOWN"),
    3: .same(proto: "MAINTENANCE"),
  ]
}

extension Bloombox_Schema_Services_Platform_V1_Ping: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_Ping) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_Ping.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_Ping.Request) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_Ping.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_Ping.Response) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_Healthcheck: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_Healthcheck) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_Healthcheck.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "probe"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_Healthcheck.Request) -> Bool {
    if self.probe != other.probe {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_DomainResolve: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_DomainResolve) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_DomainResolve.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_DomainResolve.Request) -> Bool {
    if self.origin != other.origin {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_DomainResolve.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "apikey"),
    4: .standard(proto: "client_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_DomainResolve.Response) -> Bool {
    if self.partner != other.partner {return false}
    if self.location != other.location {return false}
    if self.apikey != other.apikey {return false}
    if self.clientID != other.clientID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_DomainInfo: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_DomainInfo) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_DomainInfo.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "partner_id"),
    2: .standard(proto: "location_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_DomainInfo.Request) -> Bool {
    if self.partnerID != other.partnerID {return false}
    if self.locationID != other.locationID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Platform_V1_DomainInfo.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "shop"),
    2: .same(proto: "menu"),
    3: .same(proto: "dashboard"),
    4: .same(proto: "tv"),
    5: .same(proto: "link"),
    6: .same(proto: "website"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Platform_V1_DomainInfo.Response) -> Bool {
    if self.shop != other.shop {return false}
    if self.menu != other.menu {return false}
    if self.dashboard != other.dashboard {return false}
    if self.tv != other.tv {return false}
    if self.link != other.link {return false}
    if self.website != other.website {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
