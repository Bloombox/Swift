// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/Schedule.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides a structure defining the concept of a variable schedule.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a schedule for something.
public struct Opencannabis_Temporal_Schedule {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specification options for the schedule.
  public var spec: OneOf_Spec? {
    get {return _storage._spec}
    set {_uniqueStorage()._spec = newValue}
  }

  /// Specifies an absolute instant for the schedule.
  public var absolute: Opencannabis_Temporal_Instant {
    get {
      if case .absolute(let v)? = _storage._spec {return v}
      return Opencannabis_Temporal_Instant()
    }
    set {_uniqueStorage()._spec = .absolute(newValue)}
  }

  /// Specifies a relative time as a schedule.
  public var time: Opencannabis_Temporal_Time {
    get {
      if case .time(let v)? = _storage._spec {return v}
      return Opencannabis_Temporal_Time()
    }
    set {_uniqueStorage()._spec = .time(newValue)}
  }

  /// Specifies an interval schedule.
  public var interval: Opencannabis_Temporal_Interval {
    get {
      if case .interval(let v)? = _storage._spec {return v}
      return .minutely
    }
    set {_uniqueStorage()._spec = .interval(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specification options for the schedule.
  public enum OneOf_Spec: Equatable {
    /// Specifies an absolute instant for the schedule.
    case absolute(Opencannabis_Temporal_Instant)
    /// Specifies a relative time as a schedule.
    case time(Opencannabis_Temporal_Time)
    /// Specifies an interval schedule.
    case interval(Opencannabis_Temporal_Interval)

    public static func ==(lhs: Opencannabis_Temporal_Schedule.OneOf_Spec, rhs: Opencannabis_Temporal_Schedule.OneOf_Spec) -> Bool {
      switch (lhs, rhs) {
      case (.absolute(let l), .absolute(let r)): return l == r
      case (.time(let l), .time(let r)): return l == r
      case (.interval(let l), .interval(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.temporal"

extension Opencannabis_Temporal_Schedule: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Schedule"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "absolute"),
    2: .same(proto: "time"),
    3: .same(proto: "interval"),
  ]

  fileprivate class _StorageClass {
    var _spec: Opencannabis_Temporal_Schedule.OneOf_Spec?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Opencannabis_Temporal_Instant?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .absolute(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .absolute(v)}
        case 2:
          var v: Opencannabis_Temporal_Time?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .time(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .time(v)}
        case 3:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: Opencannabis_Temporal_Interval?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._spec = .interval(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._spec {
      case .absolute(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .time(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .interval(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Temporal_Schedule) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._spec != other_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
