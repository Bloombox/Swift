// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: partner/PartnerLocation.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the conceptual structure of a Bloombox partner location, which is an individual scope for retail and sales
/// operations, defined along with any peer locations under a top-level Bloombox partner record.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Types of locations supported by the system.
public enum Bloombox_Partner_LocationType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Generic location type.
  case genericLocation // = 0

  /// Distribution location or containing scope.
  case distribution // = 1

  /// Licensed brick-and-mortar storefront retail.
  case retailStorefront // = 2

  /// Virtual retail location (online or phone only).
  case retailVirtual // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .genericLocation
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .genericLocation
    case 1: self = .distribution
    case 2: self = .retailStorefront
    case 3: self = .retailVirtual
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .genericLocation: return 0
    case .distribution: return 1
    case .retailStorefront: return 2
    case .retailVirtual: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Partner_LocationType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_LocationType] = [
    .genericLocation,
    .distribution,
    .retailStorefront,
    .retailVirtual,
  ]
}

#endif  // swift(>=4.2)

/// Specifies information about a brick-and-mortar location owned by a partner organization that has an active account
/// with Bloombox.
public struct Bloombox_Partner_PartnerLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Short, unique string that identifies this location, scoped to the parent organization.
  public var code: String {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  /// Partner record that owns this location.
  public var partner: Bloombox_Partner_PartnerKey {
    get {return _storage._partner ?? Bloombox_Partner_PartnerKey()}
    set {_uniqueStorage()._partner = newValue}
  }
  /// Returns true if `partner` has been explicitly set.
  public var hasPartner: Bool {return _storage._partner != nil}
  /// Clears the value of `partner`. Subsequent reads from it will return its default value.
  public mutating func clearPartner() {_uniqueStorage()._partner = nil}

  /// Type of this partner location.
  public var type: [Bloombox_Partner_LocationType] {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Name of this location, in human-readable verbose form.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Label for this location in the administrative dashboard. If this is not specified, `name` is shown.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Flags that specify conditions applied to this partner location.
  public var flags: Bloombox_Partner_PartnerFlags {
    get {return _storage._flags ?? Bloombox_Partner_PartnerFlags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  /// Contact information for this location.
  public var contact: Opencannabis_Contact_ContactInfo {
    get {return _storage._contact ?? Opencannabis_Contact_ContactInfo()}
    set {_uniqueStorage()._contact = newValue}
  }
  /// Returns true if `contact` has been explicitly set.
  public var hasContact: Bool {return _storage._contact != nil}
  /// Clears the value of `contact`. Subsequent reads from it will return its default value.
  public mutating func clearContact() {_uniqueStorage()._contact = nil}

  /// Branding specific to this location. Partner-level branding is used if this is left unspecified.
  public var branding: Opencannabis_Content_Brand {
    get {return _storage._branding ?? Opencannabis_Content_Brand()}
    set {_uniqueStorage()._branding = newValue}
  }
  /// Returns true if `branding` has been explicitly set.
  public var hasBranding: Bool {return _storage._branding != nil}
  /// Clears the value of `branding`. Subsequent reads from it will return its default value.
  public mutating func clearBranding() {_uniqueStorage()._branding = nil}

  /// Settings for this partner location.
  public var settings: Bloombox_Partner_Settings_PartnerLocationSettings {
    get {return _storage._settings ?? Bloombox_Partner_Settings_PartnerLocationSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_uniqueStorage()._settings = nil}

  /// Access policy records attached to this location.
  public var policy: [Bloombox_Security_Access_AccessPolicy] {
    get {return _storage._policy}
    set {_uniqueStorage()._policy = newValue}
  }

  /// Requests for access to a given location scope.
  public var accessRequest: [Bloombox_Security_Access_AccessRequest] {
    get {return _storage._accessRequest}
    set {_uniqueStorage()._accessRequest = newValue}
  }

  /// Describes the retail storefront operated by this partner, as applicable.
  public var storefront: Bloombox_Partner_RetailStorefront {
    get {return _storage._storefront ?? Bloombox_Partner_RetailStorefront()}
    set {_uniqueStorage()._storefront = newValue}
  }
  /// Returns true if `storefront` has been explicitly set.
  public var hasStorefront: Bool {return _storage._storefront != nil}
  /// Clears the value of `storefront`. Subsequent reads from it will return its default value.
  public mutating func clearStorefront() {_uniqueStorage()._storefront = nil}

  /// Timestamp for when this record was created.
  public var created: Opencannabis_Temporal_Instant {
    get {return _storage._created ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._created = newValue}
  }
  /// Returns true if `created` has been explicitly set.
  public var hasCreated: Bool {return _storage._created != nil}
  /// Clears the value of `created`. Subsequent reads from it will return its default value.
  public mutating func clearCreated() {_uniqueStorage()._created = nil}

  /// Timestamp for when this record was last modified.
  public var modified: Opencannabis_Temporal_Instant {
    get {return _storage._modified ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._modified = newValue}
  }
  /// Returns true if `modified` has been explicitly set.
  public var hasModified: Bool {return _storage._modified != nil}
  /// Clears the value of `modified`. Subsequent reads from it will return its default value.
  public mutating func clearModified() {_uniqueStorage()._modified = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.partner"

extension Bloombox_Partner_LocationType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC_LOCATION"),
    1: .same(proto: "DISTRIBUTION"),
    2: .same(proto: "RETAIL_STOREFRONT"),
    3: .same(proto: "RETAIL_VIRTUAL"),
  ]
}

extension Bloombox_Partner_PartnerLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PartnerLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "partner"),
    3: .same(proto: "type"),
    4: .same(proto: "name"),
    5: .same(proto: "label"),
    6: .same(proto: "flags"),
    7: .same(proto: "contact"),
    8: .same(proto: "branding"),
    9: .same(proto: "settings"),
    10: .same(proto: "policy"),
    11: .standard(proto: "access_request"),
    12: .same(proto: "storefront"),
    100: .same(proto: "created"),
    101: .same(proto: "modified"),
  ]

  fileprivate class _StorageClass {
    var _code: String = String()
    var _partner: Bloombox_Partner_PartnerKey? = nil
    var _type: [Bloombox_Partner_LocationType] = []
    var _name: String = String()
    var _label: String = String()
    var _flags: Bloombox_Partner_PartnerFlags? = nil
    var _contact: Opencannabis_Contact_ContactInfo? = nil
    var _branding: Opencannabis_Content_Brand? = nil
    var _settings: Bloombox_Partner_Settings_PartnerLocationSettings? = nil
    var _policy: [Bloombox_Security_Access_AccessPolicy] = []
    var _accessRequest: [Bloombox_Security_Access_AccessRequest] = []
    var _storefront: Bloombox_Partner_RetailStorefront? = nil
    var _created: Opencannabis_Temporal_Instant? = nil
    var _modified: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _partner = source._partner
      _type = source._type
      _name = source._name
      _label = source._label
      _flags = source._flags
      _contact = source._contact
      _branding = source._branding
      _settings = source._settings
      _policy = source._policy
      _accessRequest = source._accessRequest
      _storefront = source._storefront
      _created = source._created
      _modified = source._modified
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._code)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._partner)
        case 3: try decoder.decodeRepeatedEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._label)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._contact)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._branding)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._settings)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._policy)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._accessRequest)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._storefront)
        case 100: try decoder.decodeSingularMessageField(value: &_storage._created)
        case 101: try decoder.decodeSingularMessageField(value: &_storage._modified)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._code.isEmpty {
        try visitor.visitSingularStringField(value: _storage._code, fieldNumber: 1)
      }
      if let v = _storage._partner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._type.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._type, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 5)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._contact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._branding {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._policy.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._policy, fieldNumber: 10)
      }
      if !_storage._accessRequest.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._accessRequest, fieldNumber: 11)
      }
      if let v = _storage._storefront {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._created {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      }
      if let v = _storage._modified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_PartnerLocation, rhs: Bloombox_Partner_PartnerLocation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._partner != rhs_storage._partner {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._contact != rhs_storage._contact {return false}
        if _storage._branding != rhs_storage._branding {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._policy != rhs_storage._policy {return false}
        if _storage._accessRequest != rhs_storage._accessRequest {return false}
        if _storage._storefront != rhs_storage._storefront {return false}
        if _storage._created != rhs_storage._created {return false}
        if _storage._modified != rhs_storage._modified {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
