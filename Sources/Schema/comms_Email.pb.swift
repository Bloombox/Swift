// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comms/Email.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides models that specify individual email messages, and related items (in terms of scheduling emails to be sent
/// at a later time, and so on).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies email content for a given ad group.
public struct Bloombox_Schema_Comms_EmailContent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Email subject line.
  public var subject: String = String()

  /// Email content.
  public var content: [Opencannabis_Content_Content] = []

  /// Email attachments.
  public var attachment: [Opencannabis_Media_MediaKey] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies the structure of an individual email message.
public struct Bloombox_Schema_Comms_EmailMessage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sender for the email message.
  public var sender: Opencannabis_Contact_EmailAddress {
    get {return _storage._sender ?? Opencannabis_Contact_EmailAddress()}
    set {_uniqueStorage()._sender = newValue}
  }
  /// Returns true if `sender` has been explicitly set.
  public var hasSender: Bool {return _storage._sender != nil}
  /// Clears the value of `sender`. Subsequent reads from it will return its default value.
  public mutating func clearSender() {_uniqueStorage()._sender = nil}

  /// Sender for the email recipient.
  public var recipient: Opencannabis_Contact_EmailAddress {
    get {return _storage._recipient ?? Opencannabis_Contact_EmailAddress()}
    set {_uniqueStorage()._recipient = newValue}
  }
  /// Returns true if `recipient` has been explicitly set.
  public var hasRecipient: Bool {return _storage._recipient != nil}
  /// Clears the value of `recipient`. Subsequent reads from it will return its default value.
  public mutating func clearRecipient() {_uniqueStorage()._recipient = nil}

  /// Content for the email message.
  public var content: Bloombox_Schema_Comms_EmailContent {
    get {return _storage._content ?? Bloombox_Schema_Comms_EmailContent()}
    set {_uniqueStorage()._content = newValue}
  }
  /// Returns true if `content` has been explicitly set.
  public var hasContent: Bool {return _storage._content != nil}
  /// Clears the value of `content`. Subsequent reads from it will return its default value.
  public mutating func clearContent() {_uniqueStorage()._content = nil}

  /// Reply-to email address, if applicable.
  public var replyTo: Opencannabis_Contact_EmailAddress {
    get {return _storage._replyTo ?? Opencannabis_Contact_EmailAddress()}
    set {_uniqueStorage()._replyTo = newValue}
  }
  /// Returns true if `replyTo` has been explicitly set.
  public var hasReplyTo: Bool {return _storage._replyTo != nil}
  /// Clears the value of `replyTo`. Subsequent reads from it will return its default value.
  public mutating func clearReplyTo() {_uniqueStorage()._replyTo = nil}

  /// Email addresses to add on CC.
  public var cc: [Opencannabis_Contact_EmailAddress] {
    get {return _storage._cc}
    set {_uniqueStorage()._cc = newValue}
  }

  /// Email addresses to add on BCC.
  public var bcc: [Opencannabis_Contact_EmailAddress] {
    get {return _storage._bcc}
    set {_uniqueStorage()._bcc = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies information about the publisher of an action.
public struct Bloombox_Schema_Comms_PublisherMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the publishing organization.
  public var name: String = String()

  /// Main URL for the organization's website.
  public var url: String = String()

  /// URL for the organization's Google+.
  public var googlePlus: String = String()

  /// URL for the organization's Twitter.
  public var twitter: String = String()

  /// URL for the organization's Facebook.
  public var facebook: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies schema-based metadata appended to a message.
public struct Bloombox_Schema_Comms_EmailMetadata {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies the type of metadata block to append.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Go-to view action.
    case view // = 0

    /// Go-to track action.
    case track // = 1

    /// One-click action.
    case oneClick // = 2

    /// Attached order.
    case order // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .view
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .view
      case 1: self = .track
      case 2: self = .oneClick
      case 3: self = .order
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .view: return 0
      case .track: return 1
      case .oneClick: return 2
      case .order: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Specifies the structure of an attached go-to action.
  public struct GoToView {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name of the action.
    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    /// URL target for the action.
    public var target: String {
      get {return _storage._target}
      set {_uniqueStorage()._target = newValue}
    }

    /// Information about the action's publisher.
    public var publisher: Bloombox_Schema_Comms_PublisherMetadata {
      get {return _storage._publisher ?? Bloombox_Schema_Comms_PublisherMetadata()}
      set {_uniqueStorage()._publisher = newValue}
    }
    /// Returns true if `publisher` has been explicitly set.
    public var hasPublisher: Bool {return _storage._publisher != nil}
    /// Clears the value of `publisher`. Subsequent reads from it will return its default value.
    public mutating func clearPublisher() {_uniqueStorage()._publisher = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies the structure of an attached One-Click action.
  public struct GoToTrack {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the delivery address for an order.
    public var deliveryAddress: Opencannabis_Geo_Address {
      get {return _storage._deliveryAddress ?? Opencannabis_Geo_Address()}
      set {_uniqueStorage()._deliveryAddress = newValue}
    }
    /// Returns true if `deliveryAddress` has been explicitly set.
    public var hasDeliveryAddress: Bool {return _storage._deliveryAddress != nil}
    /// Clears the value of `deliveryAddress`. Subsequent reads from it will return its default value.
    public mutating func clearDeliveryAddress() {_uniqueStorage()._deliveryAddress = nil}

    /// Estimated departure of a delivery order, or availability of a pickup order.
    public var estimatedReady: Opencannabis_Temporal_Instant {
      get {return _storage._estimatedReady ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._estimatedReady = newValue}
    }
    /// Returns true if `estimatedReady` has been explicitly set.
    public var hasEstimatedReady: Bool {return _storage._estimatedReady != nil}
    /// Clears the value of `estimatedReady`. Subsequent reads from it will return its default value.
    public mutating func clearEstimatedReady() {_uniqueStorage()._estimatedReady = nil}

    /// Estimated arrival of a delivery order.
    public var estimatedArrival: Opencannabis_Temporal_Instant {
      get {return _storage._estimatedArrival ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._estimatedArrival = newValue}
    }
    /// Returns true if `estimatedArrival` has been explicitly set.
    public var hasEstimatedArrival: Bool {return _storage._estimatedArrival != nil}
    /// Clears the value of `estimatedArrival`. Subsequent reads from it will return its default value.
    public mutating func clearEstimatedArrival() {_uniqueStorage()._estimatedArrival = nil}

    /// Specifies info about the partner fulfilling the order.
    public var partner: Bloombox_Schema_Partner_Partner {
      get {return _storage._partner ?? Bloombox_Schema_Partner_Partner()}
      set {_uniqueStorage()._partner = newValue}
    }
    /// Returns true if `partner` has been explicitly set.
    public var hasPartner: Bool {return _storage._partner != nil}
    /// Clears the value of `partner`. Subsequent reads from it will return its default value.
    public mutating func clearPartner() {_uniqueStorage()._partner = nil}

    /// Specifies the order attached to this notification.
    public var order: Opencannabis_Commerce_Order {
      get {return _storage._order ?? Opencannabis_Commerce_Order()}
      set {_uniqueStorage()._order = newValue}
    }
    /// Returns true if `order` has been explicitly set.
    public var hasOrder: Bool {return _storage._order != nil}
    /// Clears the value of `order`. Subsequent reads from it will return its default value.
    public mutating func clearOrder() {_uniqueStorage()._order = nil}

    /// Order status/tracking URL.
    public var trackingURL: String {
      get {return _storage._trackingURL}
      set {_uniqueStorage()._trackingURL = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies the structure of an attached One-Click action.
  public struct OneClickAction {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type of one-click-action to attach.
    public var type: Bloombox_Schema_Comms_EmailMetadata.OneClickAction.ActionType = .confirm

    /// Name for the action payload.
    public var name: String = String()

    /// Action URL/target.
    public var target: String = String()

    /// Narrative description for the action.
    public var description_p: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specifies known types of one-click actions.
    public enum ActionType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Confirmation-style action.
      case confirm // = 0

      /// Save-style action.
      case save // = 1

      /// RSVP for an event.
      case rsvp // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .confirm
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .confirm
        case 1: self = .save
        case 2: self = .rsvp
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .confirm: return 0
        case .save: return 1
        case .rsvp: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  /// Specifies the structure of attached order metadata.
  public struct OrderMetadata {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies info about the partner fulfilling the order.
    public var partner: Bloombox_Schema_Partner_Partner {
      get {return _storage._partner ?? Bloombox_Schema_Partner_Partner()}
      set {_uniqueStorage()._partner = newValue}
    }
    /// Returns true if `partner` has been explicitly set.
    public var hasPartner: Bool {return _storage._partner != nil}
    /// Clears the value of `partner`. Subsequent reads from it will return its default value.
    public mutating func clearPartner() {_uniqueStorage()._partner = nil}

    /// Specifies the order attached to this notification.
    public var order: Opencannabis_Commerce_Order {
      get {return _storage._order ?? Opencannabis_Commerce_Order()}
      set {_uniqueStorage()._order = newValue}
    }
    /// Returns true if `order` has been explicitly set.
    public var hasOrder: Bool {return _storage._order != nil}
    /// Clears the value of `order`. Subsequent reads from it will return its default value.
    public mutating func clearOrder() {_uniqueStorage()._order = nil}

    /// Type of currency for this metadata.
    public var currency: String {
      get {return _storage._currency}
      set {_uniqueStorage()._currency = newValue}
    }

    /// Subtotal value for the entire order.
    public var subtotal: Double {
      get {return _storage._subtotal}
      set {_uniqueStorage()._subtotal = newValue}
    }

    /// URL to view status for an order.
    public var statusURL: String {
      get {return _storage._statusURL}
      set {_uniqueStorage()._statusURL = newValue}
    }

    /// URL to open status on mobile.
    public var mobileURL: String {
      get {return _storage._mobileURL}
      set {_uniqueStorage()._mobileURL = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Individual block of schema-based metadata.
  public struct SchemaBlock {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type of schema block we're specifying.
    public var type: Bloombox_Schema_Comms_EmailMetadata.TypeEnum {
      get {return _storage._type}
      set {_uniqueStorage()._type = newValue}
    }

    /// Specifies the block of metadata to append.
    public var block: OneOf_Block? {
      get {return _storage._block}
      set {_uniqueStorage()._block = newValue}
    }

    /// Specifies a block for a go-to view action.
    public var view: Bloombox_Schema_Comms_EmailMetadata.GoToView {
      get {
        if case .view(let v)? = _storage._block {return v}
        return Bloombox_Schema_Comms_EmailMetadata.GoToView()
      }
      set {_uniqueStorage()._block = .view(newValue)}
    }

    /// Specifies a block for a go-to track action.
    public var track: Bloombox_Schema_Comms_EmailMetadata.GoToTrack {
      get {
        if case .track(let v)? = _storage._block {return v}
        return Bloombox_Schema_Comms_EmailMetadata.GoToTrack()
      }
      set {_uniqueStorage()._block = .track(newValue)}
    }

    /// Specifies a block for a one-click action.
    public var oneClick: Bloombox_Schema_Comms_EmailMetadata.OneClickAction {
      get {
        if case .oneClick(let v)? = _storage._block {return v}
        return Bloombox_Schema_Comms_EmailMetadata.OneClickAction()
      }
      set {_uniqueStorage()._block = .oneClick(newValue)}
    }

    /// Specifies a block for order metadata.
    public var order: Bloombox_Schema_Comms_EmailMetadata.OrderMetadata {
      get {
        if case .order(let v)? = _storage._block {return v}
        return Bloombox_Schema_Comms_EmailMetadata.OrderMetadata()
      }
      set {_uniqueStorage()._block = .order(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specifies the block of metadata to append.
    public enum OneOf_Block: Equatable {
      /// Specifies a block for a go-to view action.
      case view(Bloombox_Schema_Comms_EmailMetadata.GoToView)
      /// Specifies a block for a go-to track action.
      case track(Bloombox_Schema_Comms_EmailMetadata.GoToTrack)
      /// Specifies a block for a one-click action.
      case oneClick(Bloombox_Schema_Comms_EmailMetadata.OneClickAction)
      /// Specifies a block for order metadata.
      case order(Bloombox_Schema_Comms_EmailMetadata.OrderMetadata)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata.SchemaBlock.OneOf_Block, rhs: Bloombox_Schema_Comms_EmailMetadata.SchemaBlock.OneOf_Block) -> Bool {
        switch (lhs, rhs) {
        case (.view(let l), .view(let r)): return l == r
        case (.track(let l), .track(let r)): return l == r
        case (.oneClick(let l), .oneClick(let r)): return l == r
        case (.order(let l), .order(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

#if swift(>=4.2)

extension Bloombox_Schema_Comms_EmailMetadata.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Comms_EmailMetadata.TypeEnum] = [
    .view,
    .track,
    .oneClick,
    .order,
  ]
}

#endif  // swift(>=4.2)

/// Specifies the structure of a transmission operation for an individual email message.
public struct Bloombox_Schema_Comms_EmailTransmission {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Message payload to transmit in this operation.
  public var message: Bloombox_Schema_Comms_EmailMessage {
    get {return _storage._message ?? Bloombox_Schema_Comms_EmailMessage()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  public var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  public mutating func clearMessage() {_uniqueStorage()._message = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies the structure of a batch of email transmission operations.
public struct Bloombox_Schema_Comms_EmailBatch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Transmission operations for this batch.
  public var op: [Bloombox_Schema_Comms_EmailTransmission] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an email sender record.
public struct Bloombox_Schema_Comms_EmailSender {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Roles for this contact.
  public var role: [Bloombox_Schema_Comms_EmailSender.Role] {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  /// Email address details/contact.
  public var contact: Opencannabis_Contact_EmailAddress {
    get {return _storage._contact ?? Opencannabis_Contact_EmailAddress()}
    set {_uniqueStorage()._contact = newValue}
  }
  /// Returns true if `contact` has been explicitly set.
  public var hasContact: Bool {return _storage._contact != nil}
  /// Clears the value of `contact`. Subsequent reads from it will return its default value.
  public mutating func clearContact() {_uniqueStorage()._contact = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enumerates available roles for an email contact.
  public enum Role: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Main sender identity.
    case sender // = 0

    /// Always include as CC.
    case cc // = 1

    /// Always include as BCC.
    case bcc // = 2

    /// Use as the reply-to.
    case replyTo // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .sender
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .sender
      case 1: self = .cc
      case 2: self = .bcc
      case 3: self = .replyTo
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .sender: return 0
      case .cc: return 1
      case .bcc: return 2
      case .replyTo: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Schema_Comms_EmailSender.Role: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Comms_EmailSender.Role] = [
    .sender,
    .cc,
    .bcc,
    .replyTo,
  ]
}

#endif  // swift(>=4.2)

/// Email-specific settings.
public struct Bloombox_Schema_Comms_EmailSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Origin email address to send the email from.
  public var sender: [Bloombox_Schema_Comms_EmailSender] = []

  /// Enable/disable plaintext emails.
  public var enableText: Bool = false

  /// Enable/disable HTML emails.
  public var enableHtml: Bool = false

  /// Subscription manager group number. Optional.
  public var asmGroup: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.comms"

extension Bloombox_Schema_Comms_EmailContent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailContent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "subject"),
    2: .same(proto: "content"),
    3: .same(proto: "attachment"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.subject)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.content)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.attachment)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.subject.isEmpty {
      try visitor.visitSingularStringField(value: self.subject, fieldNumber: 1)
    }
    if !self.content.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.content, fieldNumber: 2)
    }
    if !self.attachment.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attachment, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailContent, rhs: Bloombox_Schema_Comms_EmailContent) -> Bool {
    if lhs.subject != rhs.subject {return false}
    if lhs.content != rhs.content {return false}
    if lhs.attachment != rhs.attachment {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailMessage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .same(proto: "recipient"),
    3: .same(proto: "content"),
    4: .standard(proto: "reply_to"),
    5: .same(proto: "cc"),
    6: .same(proto: "bcc"),
  ]

  fileprivate class _StorageClass {
    var _sender: Opencannabis_Contact_EmailAddress? = nil
    var _recipient: Opencannabis_Contact_EmailAddress? = nil
    var _content: Bloombox_Schema_Comms_EmailContent? = nil
    var _replyTo: Opencannabis_Contact_EmailAddress? = nil
    var _cc: [Opencannabis_Contact_EmailAddress] = []
    var _bcc: [Opencannabis_Contact_EmailAddress] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sender = source._sender
      _recipient = source._recipient
      _content = source._content
      _replyTo = source._replyTo
      _cc = source._cc
      _bcc = source._bcc
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._sender)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._recipient)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._content)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._replyTo)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._cc)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._bcc)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._sender {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._recipient {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._content {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._replyTo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._cc.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._cc, fieldNumber: 5)
      }
      if !_storage._bcc.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bcc, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMessage, rhs: Bloombox_Schema_Comms_EmailMessage) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sender != rhs_storage._sender {return false}
        if _storage._recipient != rhs_storage._recipient {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._replyTo != rhs_storage._replyTo {return false}
        if _storage._cc != rhs_storage._cc {return false}
        if _storage._bcc != rhs_storage._bcc {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_PublisherMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PublisherMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "url"),
    3: .standard(proto: "google_plus"),
    4: .same(proto: "twitter"),
    5: .same(proto: "facebook"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.url)
      case 3: try decoder.decodeSingularStringField(value: &self.googlePlus)
      case 4: try decoder.decodeSingularStringField(value: &self.twitter)
      case 5: try decoder.decodeSingularStringField(value: &self.facebook)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 2)
    }
    if !self.googlePlus.isEmpty {
      try visitor.visitSingularStringField(value: self.googlePlus, fieldNumber: 3)
    }
    if !self.twitter.isEmpty {
      try visitor.visitSingularStringField(value: self.twitter, fieldNumber: 4)
    }
    if !self.facebook.isEmpty {
      try visitor.visitSingularStringField(value: self.facebook, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_PublisherMetadata, rhs: Bloombox_Schema_Comms_PublisherMetadata) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.url != rhs.url {return false}
    if lhs.googlePlus != rhs.googlePlus {return false}
    if lhs.twitter != rhs.twitter {return false}
    if lhs.facebook != rhs.facebook {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailMetadata"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata, rhs: Bloombox_Schema_Comms_EmailMetadata) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMetadata.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VIEW"),
    1: .same(proto: "TRACK"),
    2: .same(proto: "ONE_CLICK"),
    3: .same(proto: "ORDER"),
  ]
}

extension Bloombox_Schema_Comms_EmailMetadata.GoToView: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Comms_EmailMetadata.protoMessageName + ".GoToView"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    3: .same(proto: "target"),
    4: .same(proto: "publisher"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _target: String = String()
    var _publisher: Bloombox_Schema_Comms_PublisherMetadata? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _target = source._target
      _publisher = source._publisher
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._target)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._publisher)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if !_storage._target.isEmpty {
        try visitor.visitSingularStringField(value: _storage._target, fieldNumber: 3)
      }
      if let v = _storage._publisher {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata.GoToView, rhs: Bloombox_Schema_Comms_EmailMetadata.GoToView) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._target != rhs_storage._target {return false}
        if _storage._publisher != rhs_storage._publisher {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMetadata.GoToTrack: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Comms_EmailMetadata.protoMessageName + ".GoToTrack"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delivery_address"),
    2: .standard(proto: "estimated_ready"),
    3: .standard(proto: "estimated_arrival"),
    4: .same(proto: "partner"),
    5: .same(proto: "order"),
    6: .standard(proto: "tracking_url"),
  ]

  fileprivate class _StorageClass {
    var _deliveryAddress: Opencannabis_Geo_Address? = nil
    var _estimatedReady: Opencannabis_Temporal_Instant? = nil
    var _estimatedArrival: Opencannabis_Temporal_Instant? = nil
    var _partner: Bloombox_Schema_Partner_Partner? = nil
    var _order: Opencannabis_Commerce_Order? = nil
    var _trackingURL: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _deliveryAddress = source._deliveryAddress
      _estimatedReady = source._estimatedReady
      _estimatedArrival = source._estimatedArrival
      _partner = source._partner
      _order = source._order
      _trackingURL = source._trackingURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._deliveryAddress)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._estimatedReady)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._estimatedArrival)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._partner)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._order)
        case 6: try decoder.decodeSingularStringField(value: &_storage._trackingURL)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._deliveryAddress {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._estimatedReady {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._estimatedArrival {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._partner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._order {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._trackingURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._trackingURL, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata.GoToTrack, rhs: Bloombox_Schema_Comms_EmailMetadata.GoToTrack) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._deliveryAddress != rhs_storage._deliveryAddress {return false}
        if _storage._estimatedReady != rhs_storage._estimatedReady {return false}
        if _storage._estimatedArrival != rhs_storage._estimatedArrival {return false}
        if _storage._partner != rhs_storage._partner {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._trackingURL != rhs_storage._trackingURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMetadata.OneClickAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Comms_EmailMetadata.protoMessageName + ".OneClickAction"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "name"),
    3: .same(proto: "target"),
    4: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.target)
      case 4: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .confirm {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.target.isEmpty {
      try visitor.visitSingularStringField(value: self.target, fieldNumber: 3)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata.OneClickAction, rhs: Bloombox_Schema_Comms_EmailMetadata.OneClickAction) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.name != rhs.name {return false}
    if lhs.target != rhs.target {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMetadata.OneClickAction.ActionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONFIRM"),
    1: .same(proto: "SAVE"),
    2: .same(proto: "RSVP"),
  ]
}

extension Bloombox_Schema_Comms_EmailMetadata.OrderMetadata: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Comms_EmailMetadata.protoMessageName + ".OrderMetadata"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "order"),
    3: .same(proto: "currency"),
    4: .same(proto: "subtotal"),
    5: .standard(proto: "status_url"),
    6: .standard(proto: "mobile_url"),
  ]

  fileprivate class _StorageClass {
    var _partner: Bloombox_Schema_Partner_Partner? = nil
    var _order: Opencannabis_Commerce_Order? = nil
    var _currency: String = String()
    var _subtotal: Double = 0
    var _statusURL: String = String()
    var _mobileURL: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _partner = source._partner
      _order = source._order
      _currency = source._currency
      _subtotal = source._subtotal
      _statusURL = source._statusURL
      _mobileURL = source._mobileURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._partner)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._order)
        case 3: try decoder.decodeSingularStringField(value: &_storage._currency)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._subtotal)
        case 5: try decoder.decodeSingularStringField(value: &_storage._statusURL)
        case 6: try decoder.decodeSingularStringField(value: &_storage._mobileURL)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._partner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._order {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._currency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currency, fieldNumber: 3)
      }
      if _storage._subtotal != 0 {
        try visitor.visitSingularDoubleField(value: _storage._subtotal, fieldNumber: 4)
      }
      if !_storage._statusURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._statusURL, fieldNumber: 5)
      }
      if !_storage._mobileURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._mobileURL, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata.OrderMetadata, rhs: Bloombox_Schema_Comms_EmailMetadata.OrderMetadata) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._partner != rhs_storage._partner {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._currency != rhs_storage._currency {return false}
        if _storage._subtotal != rhs_storage._subtotal {return false}
        if _storage._statusURL != rhs_storage._statusURL {return false}
        if _storage._mobileURL != rhs_storage._mobileURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailMetadata.SchemaBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Comms_EmailMetadata.protoMessageName + ".SchemaBlock"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    10: .same(proto: "view"),
    15: .same(proto: "track"),
    20: .standard(proto: "one_click"),
    30: .same(proto: "order"),
  ]

  fileprivate class _StorageClass {
    var _type: Bloombox_Schema_Comms_EmailMetadata.TypeEnum = .view
    var _block: Bloombox_Schema_Comms_EmailMetadata.SchemaBlock.OneOf_Block?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _block = source._block
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 10:
          var v: Bloombox_Schema_Comms_EmailMetadata.GoToView?
          if let current = _storage._block {
            try decoder.handleConflictingOneOf()
            if case .view(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._block = .view(v)}
        case 15:
          var v: Bloombox_Schema_Comms_EmailMetadata.GoToTrack?
          if let current = _storage._block {
            try decoder.handleConflictingOneOf()
            if case .track(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._block = .track(v)}
        case 20:
          var v: Bloombox_Schema_Comms_EmailMetadata.OneClickAction?
          if let current = _storage._block {
            try decoder.handleConflictingOneOf()
            if case .oneClick(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._block = .oneClick(v)}
        case 30:
          var v: Bloombox_Schema_Comms_EmailMetadata.OrderMetadata?
          if let current = _storage._block {
            try decoder.handleConflictingOneOf()
            if case .order(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._block = .order(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .view {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      switch _storage._block {
      case .view(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .track(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .oneClick(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .order(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailMetadata.SchemaBlock, rhs: Bloombox_Schema_Comms_EmailMetadata.SchemaBlock) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._block != rhs_storage._block {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailTransmission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailTransmission"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  fileprivate class _StorageClass {
    var _message: Bloombox_Schema_Comms_EmailMessage? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _message = source._message
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._message)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._message {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailTransmission, rhs: Bloombox_Schema_Comms_EmailTransmission) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._message != rhs_storage._message {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailBatch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.op)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.op.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.op, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailBatch, rhs: Bloombox_Schema_Comms_EmailBatch) -> Bool {
    if lhs.op != rhs.op {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailSender: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailSender"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "role"),
    2: .same(proto: "contact"),
  ]

  fileprivate class _StorageClass {
    var _role: [Bloombox_Schema_Comms_EmailSender.Role] = []
    var _contact: Opencannabis_Contact_EmailAddress? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _role = source._role
      _contact = source._contact
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedEnumField(value: &_storage._role)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._contact)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._role.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._role, fieldNumber: 1)
      }
      if let v = _storage._contact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailSender, rhs: Bloombox_Schema_Comms_EmailSender) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._role != rhs_storage._role {return false}
        if _storage._contact != rhs_storage._contact {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Comms_EmailSender.Role: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENDER"),
    1: .same(proto: "CC"),
    2: .same(proto: "BCC"),
    3: .same(proto: "REPLY_TO"),
  ]
}

extension Bloombox_Schema_Comms_EmailSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EmailSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sender"),
    2: .standard(proto: "enable_text"),
    3: .standard(proto: "enable_html"),
    4: .standard(proto: "asm_group"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.sender)
      case 2: try decoder.decodeSingularBoolField(value: &self.enableText)
      case 3: try decoder.decodeSingularBoolField(value: &self.enableHtml)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.asmGroup)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sender.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sender, fieldNumber: 1)
    }
    if self.enableText != false {
      try visitor.visitSingularBoolField(value: self.enableText, fieldNumber: 2)
    }
    if self.enableHtml != false {
      try visitor.visitSingularBoolField(value: self.enableHtml, fieldNumber: 3)
    }
    if self.asmGroup != 0 {
      try visitor.visitSingularUInt32Field(value: self.asmGroup, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Comms_EmailSettings, rhs: Bloombox_Schema_Comms_EmailSettings) -> Bool {
    if lhs.sender != rhs.sender {return false}
    if lhs.enableText != rhs.enableText {return false}
    if lhs.enableHtml != rhs.enableHtml {return false}
    if lhs.asmGroup != rhs.asmGroup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
