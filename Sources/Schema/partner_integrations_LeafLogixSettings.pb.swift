// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: partner/integrations/LeafLogixSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies a partner or partner location's settings for integrating with LeafLogix.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates integration points supported between Bloombox and LeafLogix.
public enum Bloombox_Partner_Integrations_Leaflogix_LeafLogixOperation: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown/default-stop value for LeafLogix operations.
  case unknownLeaflogixOperation // = 0

  /// Downstream (pull) sync of catalog information from LeafLogix.
  case catalog // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownLeaflogixOperation
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownLeaflogixOperation
    case 1: self = .catalog
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownLeaflogixOperation: return 0
    case .catalog: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Partner_Integrations_Leaflogix_LeafLogixOperation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_Integrations_Leaflogix_LeafLogixOperation] = [
    .unknownLeaflogixOperation,
    .catalog,
  ]
}

#endif  // swift(>=4.2)

/// Specifies LeafLogix features that may be enabled or disabled.
public struct Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Enable or disable product data sync.
  public var products: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies settings related to LeafLogix integration with Bloombox.
public struct Bloombox_Partner_Integrations_Leaflogix_LeafLogixSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// API key to use when integrating with LeafLogix.
  public var apiKey: String {
    get {return _storage._apiKey}
    set {_uniqueStorage()._apiKey = newValue}
  }

  /// Flags indicating features that should be enabled or disabled.
  public var features: Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures {
    get {return _storage._features ?? Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures()}
    set {_uniqueStorage()._features = newValue}
  }
  /// Returns true if `features` has been explicitly set.
  public var hasFeatures: Bool {return _storage._features != nil}
  /// Clears the value of `features`. Subsequent reads from it will return its default value.
  public mutating func clearFeatures() {_uniqueStorage()._features = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.partner.integrations.leaflogix"

extension Bloombox_Partner_Integrations_Leaflogix_LeafLogixOperation: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_LEAFLOGIX_OPERATION"),
    1: .same(proto: "CATALOG"),
  ]
}

extension Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeafLogixIntegrationFeatures"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "products"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.products)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.products != false {
      try visitor.visitSingularBoolField(value: self.products, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures, rhs: Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures) -> Bool {
    if lhs.products != rhs.products {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_Integrations_Leaflogix_LeafLogixSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LeafLogixSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_key"),
    10: .same(proto: "features"),
  ]

  fileprivate class _StorageClass {
    var _apiKey: String = String()
    var _features: Bloombox_Partner_Integrations_Leaflogix_LeafLogixIntegrationFeatures? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiKey = source._apiKey
      _features = source._features
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._apiKey)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._features)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._apiKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiKey, fieldNumber: 1)
      }
      if let v = _storage._features {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_Integrations_Leaflogix_LeafLogixSettings, rhs: Bloombox_Partner_Integrations_Leaflogix_LeafLogixSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apiKey != rhs_storage._apiKey {return false}
        if _storage._features != rhs_storage._features {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
