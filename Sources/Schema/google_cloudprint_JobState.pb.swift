// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloudprint/JobState.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines structures that specify state for a given print job.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Contains the device-agnostic state of a job on a cloud device.
public struct Google_Cloudprint_JobState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Current job state type (required).
  public var type: Google_Cloudprint_JobState.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// If present, job state was changed due to user action.
  public var userActionCause: Google_Cloudprint_JobState.UserActionCause {
    get {return _storage._userActionCause ?? Google_Cloudprint_JobState.UserActionCause()}
    set {_uniqueStorage()._userActionCause = newValue}
  }
  /// Returns true if `userActionCause` has been explicitly set.
  public var hasUserActionCause: Bool {return _storage._userActionCause != nil}
  /// Clears the value of `userActionCause`. Subsequent reads from it will return its default value.
  public mutating func clearUserActionCause() {_uniqueStorage()._userActionCause = nil}

  /// If present, job state was changed due to device state change.
  public var deviceStateCause: Google_Cloudprint_JobState.DeviceStateCause {
    get {return _storage._deviceStateCause ?? Google_Cloudprint_JobState.DeviceStateCause()}
    set {_uniqueStorage()._deviceStateCause = newValue}
  }
  /// Returns true if `deviceStateCause` has been explicitly set.
  public var hasDeviceStateCause: Bool {return _storage._deviceStateCause != nil}
  /// Clears the value of `deviceStateCause`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceStateCause() {_uniqueStorage()._deviceStateCause = nil}

  /// If present, job state was changed due to device action.
  public var deviceActionCause: Google_Cloudprint_JobState.DeviceActionCause {
    get {return _storage._deviceActionCause ?? Google_Cloudprint_JobState.DeviceActionCause()}
    set {_uniqueStorage()._deviceActionCause = newValue}
  }
  /// Returns true if `deviceActionCause` has been explicitly set.
  public var hasDeviceActionCause: Bool {return _storage._deviceActionCause != nil}
  /// Clears the value of `deviceActionCause`. Subsequent reads from it will return its default value.
  public mutating func clearDeviceActionCause() {_uniqueStorage()._deviceActionCause = nil}

  /// If present, job state was changed due to service (Cloud Print) action.
  /// Should only be set by the Cloud Print server.
  public var serviceActionCause: Google_Cloudprint_JobState.ServiceActionCause {
    get {return _storage._serviceActionCause ?? Google_Cloudprint_JobState.ServiceActionCause()}
    set {_uniqueStorage()._serviceActionCause = newValue}
  }
  /// Returns true if `serviceActionCause` has been explicitly set.
  public var hasServiceActionCause: Bool {return _storage._serviceActionCause != nil}
  /// Clears the value of `serviceActionCause`. Subsequent reads from it will return its default value.
  public mutating func clearServiceActionCause() {_uniqueStorage()._serviceActionCause = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Supported job state types.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Job is being created and is not ready for processing yet.
    case draft // = 0

    /// Submitted and ready, but should not be processed yet.
    case held // = 1

    /// Ready for processing.
    case queued // = 2

    /// Currently being processed.
    case inProgress // = 3

    /// Was in progress, but stopped due to error or user intervention.
    case stopped // = 4

    /// Processed successfully.
    case done // = 5

    /// Aborted due to error or by user action (cancelled).
    case aborted // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .draft
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .draft
      case 1: self = .held
      case 2: self = .queued
      case 3: self = .inProgress
      case 4: self = .stopped
      case 5: self = .done
      case 6: self = .aborted
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .draft: return 0
      case .held: return 1
      case .queued: return 2
      case .inProgress: return 3
      case .stopped: return 4
      case .done: return 5
      case .aborted: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct UserActionCause {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Code for the user action which caused the current job state (required).
    public var actionCode: Google_Cloudprint_JobState.UserActionCause.ActionCode = .cancelled

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Next number = 2.
    public enum ActionCode: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// User has cancelled the job.
      case cancelled // = 0

      /// User has paused the job.
      case paused // = 1

      /// User has performed some other action.
      case other // = 100
      case UNRECOGNIZED(Int)

      public init() {
        self = .cancelled
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .cancelled
        case 1: self = .paused
        case 100: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .cancelled: return 0
        case .paused: return 1
        case .other: return 100
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public struct DeviceStateCause {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Error code for the device state which caused the current job state (required).
    public var errorCode: Google_Cloudprint_JobState.DeviceStateCause.ErrorCode = .inputTray

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Next number = 5.
    public enum ErrorCode: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Error due to input tray problem.
      case inputTray // = 0

      /// Error due to marker problem.
      case marker // = 1

      /// Error due to a problem in the media path.
      case mediaPath // = 2

      /// Error due to media size problem.
      case mediaSize // = 3

      /// Error due to media type problem.
      case mediaType // = 4

      /// Error due to some other device state.
      case other // = 100
      case UNRECOGNIZED(Int)

      public init() {
        self = .inputTray
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .inputTray
        case 1: self = .marker
        case 2: self = .mediaPath
        case 3: self = .mediaSize
        case 4: self = .mediaType
        case 100: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .inputTray: return 0
        case .marker: return 1
        case .mediaPath: return 2
        case .mediaSize: return 3
        case .mediaType: return 4
        case .other: return 100
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public struct DeviceActionCause {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Error code for the device action which caused the current job state (required).
    public var errorCode: Google_Cloudprint_JobState.DeviceActionCause.ErrorCode = .downloadFailure

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Next number = 3.
    public enum ErrorCode: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Error while downloading job.
      case downloadFailure // = 0

      /// Error due to invalid job ticket.
      case invalidTicket // = 1

      /// A generic printing error occurred.
      case printFailure // = 2

      /// Error due to some other device action.
      case other // = 100
      case UNRECOGNIZED(Int)

      public init() {
        self = .downloadFailure
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .downloadFailure
        case 1: self = .invalidTicket
        case 2: self = .printFailure
        case 100: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .downloadFailure: return 0
        case .invalidTicket: return 1
        case .printFailure: return 2
        case .other: return 100
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public struct ServiceActionCause {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Error code for the service action which caused the current job state (required).
    public var errorCode: Google_Cloudprint_JobState.ServiceActionCause.ErrorCode = .communicationWithDeviceError

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Next number = 16.
    public enum ErrorCode: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case communicationWithDeviceError // = 0
      case conversionError // = 1
      case conversionFileTooBig // = 2
      case conversionUnsupportedContentType // = 3
      case deliveryFailure // = 11
      case expiration // = 14
      case fetchDocumentForbidden // = 4
      case fetchDocumentNotFound // = 5
      case googleDriveQuota // = 15
      case inconsistentJob // = 6
      case inconsistentPrinter // = 13
      case printerDeleted // = 12
      case remoteJobNoLongerExists // = 7
      case remoteJobError // = 8
      case remoteJobTimeout // = 9
      case remoteJobAborted // = 10
      case other // = 100
      case UNRECOGNIZED(Int)

      public init() {
        self = .communicationWithDeviceError
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .communicationWithDeviceError
        case 1: self = .conversionError
        case 2: self = .conversionFileTooBig
        case 3: self = .conversionUnsupportedContentType
        case 4: self = .fetchDocumentForbidden
        case 5: self = .fetchDocumentNotFound
        case 6: self = .inconsistentJob
        case 7: self = .remoteJobNoLongerExists
        case 8: self = .remoteJobError
        case 9: self = .remoteJobTimeout
        case 10: self = .remoteJobAborted
        case 11: self = .deliveryFailure
        case 12: self = .printerDeleted
        case 13: self = .inconsistentPrinter
        case 14: self = .expiration
        case 15: self = .googleDriveQuota
        case 100: self = .other
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .communicationWithDeviceError: return 0
        case .conversionError: return 1
        case .conversionFileTooBig: return 2
        case .conversionUnsupportedContentType: return 3
        case .fetchDocumentForbidden: return 4
        case .fetchDocumentNotFound: return 5
        case .inconsistentJob: return 6
        case .remoteJobNoLongerExists: return 7
        case .remoteJobError: return 8
        case .remoteJobTimeout: return 9
        case .remoteJobAborted: return 10
        case .deliveryFailure: return 11
        case .printerDeleted: return 12
        case .inconsistentPrinter: return 13
        case .expiration: return 14
        case .googleDriveQuota: return 15
        case .other: return 100
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloudprint_JobState.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_JobState.TypeEnum] = [
    .draft,
    .held,
    .queued,
    .inProgress,
    .stopped,
    .done,
    .aborted,
  ]
}

#endif  // swift(>=4.2)

/// Represents a print job's state in a form convenient for display in a UI.
public struct Google_Cloudprint_PrintJobUiState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Job state summary (required).
  public var summary: Google_Cloudprint_PrintJobUiState.Summary = .draft

  /// Localized string describing the progress of the job, e.g. the number of attempts to deliver it or the number of
  /// pages which have been printed.
  public var progress: String = String()

  /// Localized string describing the cause of an abnormal state of the job.
  public var cause: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Summary: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case draft // = 0
    case queued // = 1
    case inProgress // = 2
    case paused // = 3
    case done // = 4
    case cancelled // = 5
    case error // = 6
    case expired // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .draft
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .draft
      case 1: self = .queued
      case 2: self = .inProgress
      case 3: self = .paused
      case 4: self = .done
      case 5: self = .cancelled
      case 6: self = .error
      case 7: self = .expired
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .draft: return 0
      case .queued: return 1
      case .inProgress: return 2
      case .paused: return 3
      case .done: return 4
      case .cancelled: return 5
      case .error: return 6
      case .expired: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Google_Cloudprint_PrintJobUiState.Summary: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_PrintJobUiState.Summary] = [
    .draft,
    .queued,
    .inProgress,
    .paused,
    .done,
    .cancelled,
    .error,
    .expired,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloudprint"

extension Google_Cloudprint_JobState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".JobState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "user_action_cause"),
    3: .standard(proto: "device_state_cause"),
    4: .standard(proto: "device_action_cause"),
    5: .standard(proto: "service_action_cause"),
  ]

  fileprivate class _StorageClass {
    var _type: Google_Cloudprint_JobState.TypeEnum = .draft
    var _userActionCause: Google_Cloudprint_JobState.UserActionCause? = nil
    var _deviceStateCause: Google_Cloudprint_JobState.DeviceStateCause? = nil
    var _deviceActionCause: Google_Cloudprint_JobState.DeviceActionCause? = nil
    var _serviceActionCause: Google_Cloudprint_JobState.ServiceActionCause? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _userActionCause = source._userActionCause
      _deviceStateCause = source._deviceStateCause
      _deviceActionCause = source._deviceActionCause
      _serviceActionCause = source._serviceActionCause
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._userActionCause)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._deviceStateCause)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._deviceActionCause)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._serviceActionCause)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .draft {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._userActionCause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._deviceStateCause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._deviceActionCause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._serviceActionCause {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_JobState, rhs: Google_Cloudprint_JobState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._userActionCause != rhs_storage._userActionCause {return false}
        if _storage._deviceStateCause != rhs_storage._deviceStateCause {return false}
        if _storage._deviceActionCause != rhs_storage._deviceActionCause {return false}
        if _storage._serviceActionCause != rhs_storage._serviceActionCause {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_JobState.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DRAFT"),
    1: .same(proto: "HELD"),
    2: .same(proto: "QUEUED"),
    3: .same(proto: "IN_PROGRESS"),
    4: .same(proto: "STOPPED"),
    5: .same(proto: "DONE"),
    6: .same(proto: "ABORTED"),
  ]
}

extension Google_Cloudprint_JobState.UserActionCause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_JobState.protoMessageName + ".UserActionCause"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "action_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.actionCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.actionCode != .cancelled {
      try visitor.visitSingularEnumField(value: self.actionCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_JobState.UserActionCause, rhs: Google_Cloudprint_JobState.UserActionCause) -> Bool {
    if lhs.actionCode != rhs.actionCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_JobState.UserActionCause.ActionCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CANCELLED"),
    1: .same(proto: "PAUSED"),
    100: .same(proto: "OTHER"),
  ]
}

extension Google_Cloudprint_JobState.DeviceStateCause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_JobState.protoMessageName + ".DeviceStateCause"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.errorCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorCode != .inputTray {
      try visitor.visitSingularEnumField(value: self.errorCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_JobState.DeviceStateCause, rhs: Google_Cloudprint_JobState.DeviceStateCause) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_JobState.DeviceStateCause.ErrorCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INPUT_TRAY"),
    1: .same(proto: "MARKER"),
    2: .same(proto: "MEDIA_PATH"),
    3: .same(proto: "MEDIA_SIZE"),
    4: .same(proto: "MEDIA_TYPE"),
    100: .same(proto: "OTHER"),
  ]
}

extension Google_Cloudprint_JobState.DeviceActionCause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_JobState.protoMessageName + ".DeviceActionCause"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.errorCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorCode != .downloadFailure {
      try visitor.visitSingularEnumField(value: self.errorCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_JobState.DeviceActionCause, rhs: Google_Cloudprint_JobState.DeviceActionCause) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_JobState.DeviceActionCause.ErrorCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DOWNLOAD_FAILURE"),
    1: .same(proto: "INVALID_TICKET"),
    2: .same(proto: "PRINT_FAILURE"),
    100: .same(proto: "OTHER"),
  ]
}

extension Google_Cloudprint_JobState.ServiceActionCause: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_JobState.protoMessageName + ".ServiceActionCause"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "error_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.errorCode)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.errorCode != .communicationWithDeviceError {
      try visitor.visitSingularEnumField(value: self.errorCode, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_JobState.ServiceActionCause, rhs: Google_Cloudprint_JobState.ServiceActionCause) -> Bool {
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_JobState.ServiceActionCause.ErrorCode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COMMUNICATION_WITH_DEVICE_ERROR"),
    1: .same(proto: "CONVERSION_ERROR"),
    2: .same(proto: "CONVERSION_FILE_TOO_BIG"),
    3: .same(proto: "CONVERSION_UNSUPPORTED_CONTENT_TYPE"),
    4: .same(proto: "FETCH_DOCUMENT_FORBIDDEN"),
    5: .same(proto: "FETCH_DOCUMENT_NOT_FOUND"),
    6: .same(proto: "INCONSISTENT_JOB"),
    7: .same(proto: "REMOTE_JOB_NO_LONGER_EXISTS"),
    8: .same(proto: "REMOTE_JOB_ERROR"),
    9: .same(proto: "REMOTE_JOB_TIMEOUT"),
    10: .same(proto: "REMOTE_JOB_ABORTED"),
    11: .same(proto: "DELIVERY_FAILURE"),
    12: .same(proto: "PRINTER_DELETED"),
    13: .same(proto: "INCONSISTENT_PRINTER"),
    14: .same(proto: "EXPIRATION"),
    15: .same(proto: "GOOGLE_DRIVE_QUOTA"),
    100: .same(proto: "OTHER"),
  ]
}

extension Google_Cloudprint_PrintJobUiState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrintJobUiState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .same(proto: "progress"),
    3: .same(proto: "cause"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.summary)
      case 2: try decoder.decodeSingularStringField(value: &self.progress)
      case 3: try decoder.decodeSingularStringField(value: &self.cause)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.summary != .draft {
      try visitor.visitSingularEnumField(value: self.summary, fieldNumber: 1)
    }
    if !self.progress.isEmpty {
      try visitor.visitSingularStringField(value: self.progress, fieldNumber: 2)
    }
    if !self.cause.isEmpty {
      try visitor.visitSingularStringField(value: self.cause, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrintJobUiState, rhs: Google_Cloudprint_PrintJobUiState) -> Bool {
    if lhs.summary != rhs.summary {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.cause != rhs.cause {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_PrintJobUiState.Summary: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DRAFT"),
    1: .same(proto: "QUEUED"),
    2: .same(proto: "IN_PROGRESS"),
    3: .same(proto: "PAUSED"),
    4: .same(proto: "DONE"),
    5: .same(proto: "CANCELLED"),
    6: .same(proto: "ERROR"),
    7: .same(proto: "EXPIRED"),
  ]
}
