// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: commerce/Item.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the notion of an 'Order Item,' which is a product requested as part of a commercial order. An order item
/// references a product on a partner's active menu, by key, along with a count representing the number of instances of
/// that product that are desired for purchase.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies weight and price of  ordered product
public enum Opencannabis_Commerce_ProductVariant: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Variance by product weight.
  case weight // = 0

  /// Variance by product color.
  case color // = 1

  /// Variance by product size.
  case size // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .weight
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .weight
    case 1: self = .color
    case 2: self = .size
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .weight: return 0
    case .color: return 1
    case .size: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies if it is a weighted product or a unit priced product and attaches that to item.
public struct Opencannabis_Commerce_VariantSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the variance type for this spec.
  public var variant: Opencannabis_Commerce_ProductVariant = .weight

  public var spec: Opencannabis_Commerce_VariantSpec.OneOf_Spec? = nil

  /// Specifies a product weight, when varying by weight.
  public var weight: Opencannabis_Structs_Pricing_PricingWeightTier {
    get {
      if case .weight(let v)? = spec {return v}
      return .noWeight
    }
    set {spec = .weight(newValue)}
  }

  /// Specifies a size option for the product.
  public var size: String {
    get {
      if case .size(let v)? = spec {return v}
      return String()
    }
    set {spec = .size(newValue)}
  }

  /// Specifies a color option for the product.
  public var color: String {
    get {
      if case .color(let v)? = spec {return v}
      return String()
    }
    set {spec = .color(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Spec: Equatable {
    /// Specifies a product weight, when varying by weight.
    case weight(Opencannabis_Structs_Pricing_PricingWeightTier)
    /// Specifies a size option for the product.
    case size(String)
    /// Specifies a color option for the product.
    case color(String)

    public static func ==(lhs: Opencannabis_Commerce_VariantSpec.OneOf_Spec, rhs: Opencannabis_Commerce_VariantSpec.OneOf_Spec) -> Bool {
      switch (lhs, rhs) {
      case (.weight(let l), .weight(let r)): return l == r
      case (.size(let l), .size(let r)): return l == r
      case (.color(let l), .color(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}
}

/// Specifies the Item via the product key as well as weight, and count of product ordered
public struct Opencannabis_Commerce_Item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key for the item, which is the type and ID, combined.
  public var key: Opencannabis_Base_ProductKey {
    get {return _storage._key ?? Opencannabis_Base_ProductKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_storage._key = nil}

  /// Variance specifications for this item.
  public var variant: [Opencannabis_Commerce_VariantSpec] {
    get {return _storage._variant}
    set {_uniqueStorage()._variant = newValue}
  }

  /// Count of this item requested.
  public var count: UInt32 {
    get {return _storage._count}
    set {_uniqueStorage()._count = newValue}
  }

  /// Detail/link URL for this item.
  public var uri: String {
    get {return _storage._uri}
    set {_uniqueStorage()._uri = newValue}
  }

  /// Image URL for this item.
  public var imageUri: String {
    get {return _storage._imageUri}
    set {_uniqueStorage()._imageUri = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.commerce"

extension Opencannabis_Commerce_ProductVariant: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WEIGHT"),
    1: .same(proto: "COLOR"),
    2: .same(proto: "SIZE"),
  ]
}

extension Opencannabis_Commerce_VariantSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VariantSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "variant"),
    2: .same(proto: "weight"),
    3: .same(proto: "size"),
    4: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.variant)
      case 2:
        if self.spec != nil {try decoder.handleConflictingOneOf()}
        var v: Opencannabis_Structs_Pricing_PricingWeightTier?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.spec = .weight(v)}
      case 3:
        if self.spec != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.spec = .size(v)}
      case 4:
        if self.spec != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.spec = .color(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.variant != .weight {
      try visitor.visitSingularEnumField(value: self.variant, fieldNumber: 1)
    }
    switch self.spec {
    case .weight(let v)?:
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    case .size(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    case .color(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Commerce_VariantSpec) -> Bool {
    if self.variant != other.variant {return false}
    if self.spec != other.spec {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Commerce_Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "variant"),
    3: .same(proto: "count"),
    4: .same(proto: "uri"),
    5: .standard(proto: "image_uri"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Base_ProductKey? = nil
    var _variant: [Opencannabis_Commerce_VariantSpec] = []
    var _count: UInt32 = 0
    var _uri: String = String()
    var _imageUri: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _variant = source._variant
      _count = source._count
      _uri = source._uri
      _imageUri = source._imageUri
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._variant)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._count)
        case 4: try decoder.decodeSingularStringField(value: &_storage._uri)
        case 5: try decoder.decodeSingularStringField(value: &_storage._imageUri)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._variant.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._variant, fieldNumber: 2)
      }
      if _storage._count != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._count, fieldNumber: 3)
      }
      if !_storage._uri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uri, fieldNumber: 4)
      }
      if !_storage._imageUri.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageUri, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Commerce_Item) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._key != other_storage._key {return false}
        if _storage._variant != other_storage._variant {return false}
        if _storage._count != other_storage._count {return false}
        if _storage._uri != other_storage._uri {return false}
        if _storage._imageUri != other_storage._imageUri {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
