// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: person/PersonName.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a human being's name, in the style of "given" name (first) and "family" name (last) being concatenated to
/// form a full person's name. Additional names, like middle names, etc, are also specified here.
public struct Opencannabis_Person_Name: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Name"

  /// Person's full name, if a fulltext value should override.
  public var fullName: String = String()

  /// Person's given, or first, name.
  public var firstName: String = String()

  /// Person's family, or last, name.
  public var lastName: String = String()

  /// Person's middle name.
  public var middleName: String = String()

  /// Prefix for a person's name.
  public var prefix: String = String()

  /// Postfix for a person's name.
  public var postfix: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.fullName)
      case 2: try decoder.decodeSingularStringField(value: &self.firstName)
      case 3: try decoder.decodeSingularStringField(value: &self.lastName)
      case 4: try decoder.decodeSingularStringField(value: &self.middleName)
      case 5: try decoder.decodeSingularStringField(value: &self.prefix)
      case 6: try decoder.decodeSingularStringField(value: &self.postfix)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.fullName.isEmpty {
      try visitor.visitSingularStringField(value: self.fullName, fieldNumber: 1)
    }
    if !self.firstName.isEmpty {
      try visitor.visitSingularStringField(value: self.firstName, fieldNumber: 2)
    }
    if !self.lastName.isEmpty {
      try visitor.visitSingularStringField(value: self.lastName, fieldNumber: 3)
    }
    if !self.middleName.isEmpty {
      try visitor.visitSingularStringField(value: self.middleName, fieldNumber: 4)
    }
    if !self.prefix.isEmpty {
      try visitor.visitSingularStringField(value: self.prefix, fieldNumber: 5)
    }
    if !self.postfix.isEmpty {
      try visitor.visitSingularStringField(value: self.postfix, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.person"

extension Opencannabis_Person_Name: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "full_name"),
    2: .standard(proto: "first_name"),
    3: .standard(proto: "last_name"),
    4: .standard(proto: "middle_name"),
    5: .same(proto: "prefix"),
    6: .same(proto: "postfix"),
  ]

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Person_Name) -> Bool {
    if self.fullName != other.fullName {return false}
    if self.firstName != other.firstName {return false}
    if self.lastName != other.lastName {return false}
    if self.middleName != other.middleName {return false}
    if self.prefix != other.prefix {return false}
    if self.postfix != other.postfix {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
