/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: telemetry/v1beta2/TelemetryService_Beta2.proto
 *
 */

/*
 * Copyright 2017, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
internal enum Services_Telemetry_V1Beta2_EventTelemetryClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// Ping (Unary)
internal class Services_Telemetry_V1Beta2_EventTelemetryPingCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.EventTelemetry/Ping")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_TelemetryPing_Request,
                       metadata: Metadata) throws -> Services_Telemetry_V1beta2_TelemetryPing_Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Services_Telemetry_V1beta2_TelemetryPing_Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_EventTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_TelemetryPing_Request,
                         metadata: Metadata,
                         completion: @escaping (Services_Telemetry_V1beta2_TelemetryPing_Response?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_EventTelemetryPingCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Services_Telemetry_V1beta2_TelemetryPing_Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Event (Unary)
internal class Services_Telemetry_V1Beta2_EventTelemetryEventCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.EventTelemetry/Event")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_Event_Request,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_EventTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_Event_Request,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_EventTelemetryEventCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Batch (Unary)
internal class Services_Telemetry_V1Beta2_EventTelemetryBatchCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.EventTelemetry/Batch")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_Event_BatchRequest,
                       metadata: Metadata) throws -> Services_Telemetry_V1beta2_TelemetryResponse {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Services_Telemetry_V1beta2_TelemetryResponse?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_EventTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_Event_BatchRequest,
                         metadata: Metadata,
                         completion: @escaping (Services_Telemetry_V1beta2_TelemetryResponse?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_EventTelemetryBatchCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Services_Telemetry_V1beta2_TelemetryResponse(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Error (Unary)
internal class Services_Telemetry_V1Beta2_EventTelemetryErrorCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.EventTelemetry/Error")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_Exception,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_EventTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_Exception,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_EventTelemetryErrorCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Services_Telemetry_V1Beta2_EventTelemetryService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func ping(_ request: Services_Telemetry_V1beta2_TelemetryPing_Request)
    throws
    -> Services_Telemetry_V1beta2_TelemetryPing_Response {
      return try Services_Telemetry_V1Beta2_EventTelemetryPingCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func ping(_ request: Services_Telemetry_V1beta2_TelemetryPing_Request,
                  completion: @escaping (Services_Telemetry_V1beta2_TelemetryPing_Response?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_EventTelemetryPingCall {
      return try Services_Telemetry_V1Beta2_EventTelemetryPingCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func event(_ request: Services_Telemetry_V1beta2_Event_Request)
    throws
    -> Google_Protobuf_Empty {
      return try Services_Telemetry_V1Beta2_EventTelemetryEventCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func event(_ request: Services_Telemetry_V1beta2_Event_Request,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_EventTelemetryEventCall {
      return try Services_Telemetry_V1Beta2_EventTelemetryEventCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func batch(_ request: Services_Telemetry_V1beta2_Event_BatchRequest)
    throws
    -> Services_Telemetry_V1beta2_TelemetryResponse {
      return try Services_Telemetry_V1Beta2_EventTelemetryBatchCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func batch(_ request: Services_Telemetry_V1beta2_Event_BatchRequest,
                  completion: @escaping (Services_Telemetry_V1beta2_TelemetryResponse?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_EventTelemetryBatchCall {
      return try Services_Telemetry_V1Beta2_EventTelemetryBatchCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func error(_ request: Services_Telemetry_V1beta2_Exception)
    throws
    -> Google_Protobuf_Empty {
      return try Services_Telemetry_V1Beta2_EventTelemetryErrorCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func error(_ request: Services_Telemetry_V1beta2_Exception,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_EventTelemetryErrorCall {
      return try Services_Telemetry_V1Beta2_EventTelemetryErrorCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}

/// Type for errors thrown from generated client code.
internal enum Services_Telemetry_V1Beta2_CommercialTelemetryClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// Impression (Unary)
internal class Services_Telemetry_V1Beta2_CommercialTelemetryImpressionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.CommercialTelemetry/Impression")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_CommercialEvent_Impression,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_CommercialTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_CommercialEvent_Impression,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_CommercialTelemetryImpressionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// View (Unary)
internal class Services_Telemetry_V1Beta2_CommercialTelemetryViewCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.CommercialTelemetry/View")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_CommercialEvent_View,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_CommercialTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_CommercialEvent_View,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_CommercialTelemetryViewCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Action (Unary)
internal class Services_Telemetry_V1Beta2_CommercialTelemetryActionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.CommercialTelemetry/Action")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_CommercialEvent_Action,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_CommercialTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_CommercialEvent_Action,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_CommercialTelemetryActionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Services_Telemetry_V1Beta2_CommercialTelemetryService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func impression(_ request: Services_Telemetry_V1beta2_CommercialEvent_Impression)
    throws
    -> Google_Protobuf_Empty {
      return try Services_Telemetry_V1Beta2_CommercialTelemetryImpressionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func impression(_ request: Services_Telemetry_V1beta2_CommercialEvent_Impression,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_CommercialTelemetryImpressionCall {
      return try Services_Telemetry_V1Beta2_CommercialTelemetryImpressionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func view(_ request: Services_Telemetry_V1beta2_CommercialEvent_View)
    throws
    -> Google_Protobuf_Empty {
      return try Services_Telemetry_V1Beta2_CommercialTelemetryViewCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func view(_ request: Services_Telemetry_V1beta2_CommercialEvent_View,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_CommercialTelemetryViewCall {
      return try Services_Telemetry_V1Beta2_CommercialTelemetryViewCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  internal func action(_ request: Services_Telemetry_V1beta2_CommercialEvent_Action)
    throws
    -> Google_Protobuf_Empty {
      return try Services_Telemetry_V1Beta2_CommercialTelemetryActionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func action(_ request: Services_Telemetry_V1beta2_CommercialEvent_Action,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_CommercialTelemetryActionCall {
      return try Services_Telemetry_V1Beta2_CommercialTelemetryActionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}

/// Type for errors thrown from generated client code.
internal enum Services_Telemetry_V1Beta2_IdentityTelemetryClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// Action (Unary)
internal class Services_Telemetry_V1Beta2_IdentityTelemetryActionCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/services.telemetry.v1beta2.IdentityTelemetry/Action")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Services_Telemetry_V1beta2_IdentityEvent_Action,
                       metadata: Metadata) throws -> Google_Protobuf_Empty {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Google_Protobuf_Empty?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Services_Telemetry_V1Beta2_IdentityTelemetryClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Services_Telemetry_V1beta2_IdentityEvent_Action,
                         metadata: Metadata,
                         completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws -> Services_Telemetry_V1Beta2_IdentityTelemetryActionCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Google_Protobuf_Empty(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  internal func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
internal class Services_Telemetry_V1Beta2_IdentityTelemetryService {
  private var channel: Channel

  /// This metadata will be sent with all requests.
  internal var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  internal var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client that makes insecure connections.
  internal init(address: String) {
    gRPC.initialize()
    channel = Channel(address:address)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections.
  internal init(address: String, certificates: String?, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  internal func action(_ request: Services_Telemetry_V1beta2_IdentityEvent_Action)
    throws
    -> Google_Protobuf_Empty {
      return try Services_Telemetry_V1Beta2_IdentityTelemetryActionCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  internal func action(_ request: Services_Telemetry_V1beta2_IdentityEvent_Action,
                  completion: @escaping (Google_Protobuf_Empty?, CallResult)->())
    throws
    -> Services_Telemetry_V1Beta2_IdentityTelemetryActionCall {
      return try Services_Telemetry_V1Beta2_IdentityTelemetryActionCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
}
