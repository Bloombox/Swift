// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/labtesting/BasicTestResults.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// -- Testing: Basic Protocol
public struct Opencannabis_Structs_Labtesting_BasicTestResults {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var available: Bool {
    get {return _storage._available}
    set {_uniqueStorage()._available = newValue}
  }

  public var media: [Opencannabis_Structs_Labtesting_TestMedia] {
    get {return _storage._media}
    set {_uniqueStorage()._media = newValue}
  }

  public var lastUpdated: Opencannabis_Temporal_Instant {
    get {return _storage._lastUpdated ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._lastUpdated = newValue}
  }
  /// Returns true if `lastUpdated` has been explicitly set.
  public var hasLastUpdated: Bool {return _storage._lastUpdated != nil}
  /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdated() {_storage._lastUpdated = nil}

  /// --- Cannabinoids + Subjective
  public var cannabinoids: Opencannabis_Structs_Labtesting_Cannabinoids {
    get {return _storage._cannabinoids ?? Opencannabis_Structs_Labtesting_Cannabinoids()}
    set {_uniqueStorage()._cannabinoids = newValue}
  }
  /// Returns true if `cannabinoids` has been explicitly set.
  public var hasCannabinoids: Bool {return _storage._cannabinoids != nil}
  /// Clears the value of `cannabinoids`. Subsequent reads from it will return its default value.
  public mutating func clearCannabinoids() {_storage._cannabinoids = nil}

  public var subjective: Opencannabis_Structs_Labtesting_Subjective {
    get {return _storage._subjective ?? Opencannabis_Structs_Labtesting_Subjective()}
    set {_uniqueStorage()._subjective = newValue}
  }
  /// Returns true if `subjective` has been explicitly set.
  public var hasSubjective: Bool {return _storage._subjective != nil}
  /// Clears the value of `subjective`. Subsequent reads from it will return its default value.
  public mutating func clearSubjective() {_storage._subjective = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.structs.labtesting"

extension Opencannabis_Structs_Labtesting_BasicTestResults: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BasicTestResults"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "available"),
    2: .same(proto: "media"),
    3: .standard(proto: "last_updated"),
    20: .same(proto: "cannabinoids"),
    30: .same(proto: "subjective"),
  ]

  fileprivate class _StorageClass {
    var _available: Bool = false
    var _media: [Opencannabis_Structs_Labtesting_TestMedia] = []
    var _lastUpdated: Opencannabis_Temporal_Instant? = nil
    var _cannabinoids: Opencannabis_Structs_Labtesting_Cannabinoids? = nil
    var _subjective: Opencannabis_Structs_Labtesting_Subjective? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _available = source._available
      _media = source._media
      _lastUpdated = source._lastUpdated
      _cannabinoids = source._cannabinoids
      _subjective = source._subjective
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._available)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._media)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._lastUpdated)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._cannabinoids)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._subjective)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._available != false {
        try visitor.visitSingularBoolField(value: _storage._available, fieldNumber: 1)
      }
      if !_storage._media.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._media, fieldNumber: 2)
      }
      if let v = _storage._lastUpdated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._cannabinoids {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._subjective {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_BasicTestResults) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._available != other_storage._available {return false}
        if _storage._media != other_storage._media {return false}
        if _storage._lastUpdated != other_storage._lastUpdated {return false}
        if _storage._cannabinoids != other_storage._cannabinoids {return false}
        if _storage._subjective != other_storage._subjective {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
