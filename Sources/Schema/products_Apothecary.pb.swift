// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/Apothecary.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides structures relating to apothacary and enumerates various apothacary flags, and types.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies an apothecary item for sale. Apothecary items are described as drugstore-style items, like capsules, oils,
/// injectors, and other edge-case applications.
public struct Opencannabis_Products_Apothecary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Product key uniquely identifying this apothecary item.
  public var key: Opencannabis_Base_ProductKey {
    get {return _storage._key ?? Opencannabis_Base_ProductKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Specific type of apothecary item being described.
  public var type: Opencannabis_Products_Apothecary.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Product content about this apothecary item.
  public var product: Opencannabis_Content_ProductContent {
    get {return _storage._product ?? Opencannabis_Content_ProductContent()}
    set {_uniqueStorage()._product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return _storage._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {_uniqueStorage()._product = nil}

  /// Materials and handling information about this apothecary item.
  public var material: Opencannabis_Content_MaterialsData {
    get {return _storage._material ?? Opencannabis_Content_MaterialsData()}
    set {_uniqueStorage()._material = newValue}
  }
  /// Returns true if `material` has been explicitly set.
  public var hasMaterial: Bool {return _storage._material != nil}
  /// Clears the value of `material`. Subsequent reads from it will return its default value.
  public mutating func clearMaterial() {_uniqueStorage()._material = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies types of apothecary items that may be expressed.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Specifies an unidentified, or unspecified, apothecary item.
    case unspecifiedApothecary // = 0

    /// Specifies a topical material, such as an ointment or oil, meant for application to the skin.
    case topical // = 1

    /// Specifies a liquid that may be added to other liquids or foods. Often used with tea.
    case tincture // = 2

    /// Specifies a capsule containing cannabinoids, similar to a dietary supplement.
    case capsule // = 3

    /// Specifies an injector or injection style system.
    case injector // = 4

    /// Specifies a spray-style tool or bottle.
    case spray // = 5

    /// Specifies a sublingual strip or dropper-style applicator.
    case sublingual // = 6

    /// Specifies an anally-administered dose or applicator.
    case suppository // = 7

    /// Specifies a patch or substance that works via a transdermal mechanism (i.e. via skin).
    case transdermal // = 8

    /// Bath bombs, soaps, and so on.
    case bathAndBody // = 9

    /// Lotions, creams, and balms.
    case lotion // = 10
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedApothecary
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedApothecary
      case 1: self = .topical
      case 2: self = .tincture
      case 3: self = .capsule
      case 4: self = .injector
      case 5: self = .spray
      case 6: self = .sublingual
      case 7: self = .suppository
      case 8: self = .transdermal
      case 9: self = .bathAndBody
      case 10: self = .lotion
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedApothecary: return 0
      case .topical: return 1
      case .tincture: return 2
      case .capsule: return 3
      case .injector: return 4
      case .spray: return 5
      case .sublingual: return 6
      case .suppository: return 7
      case .transdermal: return 8
      case .bathAndBody: return 9
      case .lotion: return 10
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Opencannabis_Products_Apothecary.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Products_Apothecary.TypeEnum] = [
    .unspecifiedApothecary,
    .topical,
    .tincture,
    .capsule,
    .injector,
    .spray,
    .sublingual,
    .suppository,
    .transdermal,
    .bathAndBody,
    .lotion,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.products"

extension Opencannabis_Products_Apothecary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Apothecary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "type"),
    3: .same(proto: "product"),
    4: .same(proto: "material"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Base_ProductKey? = nil
    var _type: Opencannabis_Products_Apothecary.TypeEnum = .unspecifiedApothecary
    var _product: Opencannabis_Content_ProductContent? = nil
    var _material: Opencannabis_Content_MaterialsData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _type = source._type
      _product = source._product
      _material = source._material
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._product)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._material)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._type != .unspecifiedApothecary {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._material {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Products_Apothecary, rhs: Opencannabis_Products_Apothecary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._product != rhs_storage._product {return false}
        if _storage._material != rhs_storage._material {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Apothecary.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_APOTHECARY"),
    1: .same(proto: "TOPICAL"),
    2: .same(proto: "TINCTURE"),
    3: .same(proto: "CAPSULE"),
    4: .same(proto: "INJECTOR"),
    5: .same(proto: "SPRAY"),
    6: .same(proto: "SUBLINGUAL"),
    7: .same(proto: "SUPPOSITORY"),
    8: .same(proto: "TRANSDERMAL"),
    9: .same(proto: "BATH_AND_BODY"),
    10: .same(proto: "LOTION"),
  ]
}
