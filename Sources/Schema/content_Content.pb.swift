// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: content/Content.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the generic concept of "content," which may be attached to nearly anything.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a freeform content payload of some kind.
public struct Opencannabis_Content_Content {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Format/underlying type of content data.
  public var type: Opencannabis_Content_Content.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Encoding of underlying content data.
  public var encoding: Opencannabis_Content_Content.Encoding {
    get {return _storage._encoding}
    set {_uniqueStorage()._encoding = newValue}
  }

  /// Language information for underlying content.
  public var language: Opencannabis_Base_Language {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  /// Compression settings for underlying content.
  public var compression: Opencannabis_Base_Compression {
    get {return _storage._compression ?? Opencannabis_Base_Compression()}
    set {_uniqueStorage()._compression = newValue}
  }
  /// Returns true if `compression` has been explicitly set.
  public var hasCompression: Bool {return _storage._compression != nil}
  /// Clears the value of `compression`. Subsequent reads from it will return its default value.
  public mutating func clearCompression() {_uniqueStorage()._compression = nil}

  /// Payload for this content data. Can either be specified as a string, or a set of raw bytes.
  public var payload: OneOf_Payload? {
    get {return _storage._payload}
    set {_uniqueStorage()._payload = newValue}
  }

  /// Raw bytes of underlying content data.
  public var content: String {
    get {
      if case .content(let v)? = _storage._payload {return v}
      return String()
    }
    set {_uniqueStorage()._payload = .content(newValue)}
  }

  /// Raw data attached to this content blob.
  public var raw: Data {
    get {
      if case .raw(let v)? = _storage._payload {return v}
      return SwiftProtobuf.Internal.emptyData
    }
    set {_uniqueStorage()._payload = .raw(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Payload for this content data. Can either be specified as a string, or a set of raw bytes.
  public enum OneOf_Payload: Equatable {
    /// Raw bytes of underlying content data.
    case content(String)
    /// Raw data attached to this content blob.
    case raw(Data)

  #if !swift(>=4.1)
    public static func ==(lhs: Opencannabis_Content_Content.OneOf_Payload, rhs: Opencannabis_Content_Content.OneOf_Payload) -> Bool {
      switch (lhs, rhs) {
      case (.content(let l), .content(let r)): return l == r
      case (.raw(let l), .raw(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Enumerates supported types/formats for content data.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Plaintext format.
    case text // = 0

    /// Markdown format.
    case markdown // = 1

    /// HTML format.
    case html // = 2

    /// Binary data of some kind (for instance, images).
    case binary // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .text
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .text
      case 1: self = .markdown
      case 2: self = .html
      case 3: self = .binary
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .text: return 0
      case .markdown: return 1
      case .html: return 2
      case .binary: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Enumerates supported encodings for content data.
  public enum Encoding: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// UTF-8 standard encoding.
    case utf8 // = 0

    /// Base-64 encoded UTF-8.
    case b64 // = 1

    /// Base-64 encoded ASCII.
    case b64Ascii // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .utf8
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .utf8
      case 1: self = .b64
      case 2: self = .b64Ascii
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .utf8: return 0
      case .b64: return 1
      case .b64Ascii: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Opencannabis_Content_Content.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Content_Content.TypeEnum] = [
    .text,
    .markdown,
    .html,
    .binary,
  ]
}

extension Opencannabis_Content_Content.Encoding: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Content_Content.Encoding] = [
    .utf8,
    .b64,
    .b64Ascii,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.content"

extension Opencannabis_Content_Content: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Content"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "encoding"),
    3: .same(proto: "language"),
    4: .same(proto: "compression"),
    10: .same(proto: "content"),
    20: .same(proto: "raw"),
  ]

  fileprivate class _StorageClass {
    var _type: Opencannabis_Content_Content.TypeEnum = .text
    var _encoding: Opencannabis_Content_Content.Encoding = .utf8
    var _language: Opencannabis_Base_Language = .unspecified
    var _compression: Opencannabis_Base_Compression? = nil
    var _payload: Opencannabis_Content_Content.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _encoding = source._encoding
      _language = source._language
      _compression = source._compression
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._encoding)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._language)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._compression)
        case 10:
          if _storage._payload != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._payload = .content(v)}
        case 20:
          if _storage._payload != nil {try decoder.handleConflictingOneOf()}
          var v: Data?
          try decoder.decodeSingularBytesField(value: &v)
          if let v = v {_storage._payload = .raw(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .text {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if _storage._encoding != .utf8 {
        try visitor.visitSingularEnumField(value: _storage._encoding, fieldNumber: 2)
      }
      if _storage._language != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._language, fieldNumber: 3)
      }
      if let v = _storage._compression {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      switch _storage._payload {
      case .content(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      case .raw(let v)?:
        try visitor.visitSingularBytesField(value: v, fieldNumber: 20)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_Content, rhs: Opencannabis_Content_Content) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._encoding != rhs_storage._encoding {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._compression != rhs_storage._compression {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Content_Content.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT"),
    1: .same(proto: "MARKDOWN"),
    2: .same(proto: "HTML"),
    3: .same(proto: "BINARY"),
  ]
}

extension Opencannabis_Content_Content.Encoding: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UTF8"),
    1: .same(proto: "B64"),
    2: .same(proto: "B64_ASCII"),
  ]
}
