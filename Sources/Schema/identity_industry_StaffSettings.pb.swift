// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/industry/StaffSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies settings personal to a user with specific regard to their industry presence or profile (i.e. their working
/// life in the cannabis market). These settings apply per-user regardless of the active or assigned partner account, or
/// the access policy settings attached to the user.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Settings for staff users, attached to a user's overall industry profile. Applies in any context where the user is
/// authorized for industry-side use of Bloombox products.
public struct Bloombox_Schema_Identity_Industry_StaffSettings: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".StaffSettings"

  /// Point-of-sale device settings. Includes the user's authorization code hash, public key hash, and other settings or
  /// security details. User preferences on the point-of-sale device are also stored here.
  public var pos: Bloombox_Schema_Identity_Industry_POSStaffSettings {
    get {return _storage._pos ?? Bloombox_Schema_Identity_Industry_POSStaffSettings()}
    set {_uniqueStorage()._pos = newValue}
  }
  /// Returns true if `pos` has been explicitly set.
  public var hasPos: Bool {return _storage._pos != nil}
  /// Clears the value of `pos`. Subsequent reads from it will return its default value.
  public mutating func clearPos() {_storage._pos = nil}

  /// Settings specific to the web dashboard when this user signs in. Personalization and preference options expressed
  /// for update by the user in the dashboard are stored here. These are distinguished from organization settings in that
  /// they are not shared between users and generally only apply cosmetically.
  public var dashboard: Bloombox_Schema_Identity_Industry_DashboardStaffSettings {
    get {return _storage._dashboard ?? Bloombox_Schema_Identity_Industry_DashboardStaffSettings()}
    set {_uniqueStorage()._dashboard = newValue}
  }
  /// Returns true if `dashboard` has been explicitly set.
  public var hasDashboard: Bool {return _storage._dashboard != nil}
  /// Clears the value of `dashboard`. Subsequent reads from it will return its default value.
  public mutating func clearDashboard() {_storage._dashboard = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pos)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._dashboard)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pos {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._dashboard {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.identity.industry"

extension Bloombox_Schema_Identity_Industry_StaffSettings: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pos"),
    2: .same(proto: "dashboard"),
  ]

  fileprivate class _StorageClass {
    var _pos: Bloombox_Schema_Identity_Industry_POSStaffSettings? = nil
    var _dashboard: Bloombox_Schema_Identity_Industry_DashboardStaffSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pos = source._pos
      _dashboard = source._dashboard
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_Industry_StaffSettings) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._pos != other_storage._pos {return false}
        if _storage._dashboard != other_storage._dashboard {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
