// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ledger/v1beta1/LedgerService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies errors that can be encountered when interacting with the Ledger API. Generic and specific errors are
/// enumerated and registered with a unique ID code here.
public enum Bloombox_Schema_Services_Ledger_V1beta1_LedgerError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error occurred.
  case noError // = 0

  /// An internal error occurred.
  case internalError // = 1

  /// Access was denied.
  case accessDenied // = 2

  /// There was a conflict with the desired operation.
  case conflict // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .internalError
    case 2: self = .accessDenied
    case 3: self = .conflict
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .internalError: return 1
    case .accessDenied: return 2
    case .conflict: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies the states a transaction may be in, before, during, and after execution. Transaction lifecycle begins with
/// the INFLIGHT status, when the transaction has just been constructed, or has not yet been submitted to the ledger.
/// Once submission has occurred, the transaction enters either the UNCOMMITTED, or REJECTED phase. Finally, once
/// consensus is achieved and the transaction commits to the ledger, the transaction enters FINALIZED phase.
public enum Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// INFLIGHT transactions are operations that have not yet been submitted to the ledger. That is, they are "off-chain"
  /// operations that have yet to be committed.
  case inflight // = 0

  /// SENT transactions are operations that have been transmitted to the ledger, but for which we have not yet received a
  /// response or signal indicating backlog queueing.
  case sent // = 1

  /// UNCOMMITTED transactions are operations that have been submitted to the ledger, but for which we do not yet have
  /// consensus. Uncommitted transactions are still working to achieve consensus.
  case uncomitted // = 2

  /// REJECTED transactions are operations that have encountered errors, were found to be invalid (due to structural or
  /// cryptographic failures), or have been found to be in conflict with other transactions at the time of their final
  /// execution by the underlying ledger.
  case rejected // = 3

  /// FINALIZED transactions are operations that have achieved quorum and consensus, and been committed to a ledger that
  /// is now considered "closed." That is to say, they are completed transactions.
  case finalized // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .inflight
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .inflight
    case 1: self = .sent
    case 2: self = .uncomitted
    case 3: self = .rejected
    case 4: self = .finalized
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .inflight: return 0
    case .sent: return 1
    case .uncomitted: return 2
    case .rejected: return 3
    case .finalized: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies an RPC request and response structure, and encapsulating operation, for an asset retrieval from a
/// distributed ledger or blockchain.
public struct Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveAsset"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to retrieve a digital asset.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.protoMessageName + ".Request"

    /// Specifies the ID/key details of the asset being requested.
    public var asset: Bloombox_Schema_Ledger_AssetKey {
      get {return _storage._asset ?? Bloombox_Schema_Ledger_AssetKey()}
      set {_uniqueStorage()._asset = newValue}
    }
    /// Returns true if `asset` has been explicitly set.
    public var hasAsset: Bool {return _storage._asset != nil}
    /// Clears the value of `asset`. Subsequent reads from it will return its default value.
    public mutating func clearAsset() {_storage._asset = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._asset)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._asset {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to retrieve a digital asset.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.protoMessageName + ".Response"

    /// Specifies the data for the underlying asset, if it could be found.
    public var asset: Bloombox_Schema_Ledger_DigitalAsset {
      get {return _storage._asset ?? Bloombox_Schema_Ledger_DigitalAsset()}
      set {_uniqueStorage()._asset = newValue}
    }
    /// Returns true if `asset` has been explicitly set.
    public var hasAsset: Bool {return _storage._asset != nil}
    /// Clears the value of `asset`. Subsequent reads from it will return its default value.
    public mutating func clearAsset() {_storage._asset = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._asset)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._asset {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a complete request/response cycle to retrieve a digital asset.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.protoMessageName + ".Operation"

    /// Request for a digital asset.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to a request for a digital asset.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC request and response structure, and encapsulating operation, for a transaction retrieval from a
/// distributed ledger or blockchain.
public struct Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".RetrieveTransaction"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to retrieve a ledger transaction.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.protoMessageName + ".Request"

    /// Specifies the key of the transaction being requested.
    public var txn: Bloombox_Schema_Ledger_TransactionKey {
      get {return _storage._txn ?? Bloombox_Schema_Ledger_TransactionKey()}
      set {_uniqueStorage()._txn = newValue}
    }
    /// Returns true if `txn` has been explicitly set.
    public var hasTxn: Bool {return _storage._txn != nil}
    /// Clears the value of `txn`. Subsequent reads from it will return its default value.
    public mutating func clearTxn() {_storage._txn = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._txn)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._txn {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to retrieve a ledger transaction.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.protoMessageName + ".Response"

    /// Data for the transaction in question.
    public var txn: Bloombox_Schema_Ledger_Transaction {
      get {return _storage._txn ?? Bloombox_Schema_Ledger_Transaction()}
      set {_uniqueStorage()._txn = newValue}
    }
    /// Returns true if `txn` has been explicitly set.
    public var hasTxn: Bool {return _storage._txn != nil}
    /// Clears the value of `txn`. Subsequent reads from it will return its default value.
    public mutating func clearTxn() {_storage._txn = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._txn)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._txn {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a complete request/response cycle to retrieve a ledger transaction.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.protoMessageName + ".Operation"

    /// Request for retrieval of a specific transaction.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to a request for a specific transaction.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC request and response structure, and encapsulating operation, for a history request given a specific
/// digital asset identifier.
public struct Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AssetHistory"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to retrieve an individual asset's transaction history.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.protoMessageName + ".Request"

    /// Asset we are requesting history for.
    public var asset: Bloombox_Schema_Ledger_AssetKey {
      get {return _storage._asset ?? Bloombox_Schema_Ledger_AssetKey()}
      set {_uniqueStorage()._asset = newValue}
    }
    /// Returns true if `asset` has been explicitly set.
    public var hasAsset: Bool {return _storage._asset != nil}
    /// Clears the value of `asset`. Subsequent reads from it will return its default value.
    public mutating func clearAsset() {_storage._asset = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._asset)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._asset {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to retrieve an individual asset's transaction history.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.protoMessageName + ".Response"

    /// Transaction keys matching the request.
    public var txn: [Bloombox_Schema_Ledger_TransactionKey] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.txn)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.txn.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.txn, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies a complete request/response cycle to retrieve an individual asset's transaction history.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.protoMessageName + ".Operation"

    /// Request for transaction history for an individual asset.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to a request for transaction history for an individual asset.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC request and response structure, and encapsulating operation, for a current holdings request, given
/// an individual actor key.
public struct Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AccountHoldings"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to retrieve an individual account's current holdings.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.protoMessageName + ".Request"

    /// Account we are requesting holdings for.
    public var account: Bloombox_Schema_Ledger_LedgerIdentity {
      get {return _storage._account ?? Bloombox_Schema_Ledger_LedgerIdentity()}
      set {_uniqueStorage()._account = newValue}
    }
    /// Returns true if `account` has been explicitly set.
    public var hasAccount: Bool {return _storage._account != nil}
    /// Clears the value of `account`. Subsequent reads from it will return its default value.
    public mutating func clearAccount() {_storage._account = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._account {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to retrieve an individual account's current holdings.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.protoMessageName + ".Response"

    /// Resulting assets, returned because they are held by the specified account.
    public var asset: [Bloombox_Schema_Ledger_AssetKey] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.asset)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.asset.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.asset, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies a complete request/response cycle to retrieve an individual account's current holdings.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.protoMessageName + ".Operation"

    /// Request for account holdings.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to a request for account holdings.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC request and response structure, and encapsulating operation, for a account history request, given an
/// individual actor key.
public struct Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AccountHistory"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to retrieve an individual account's transaction history.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.protoMessageName + ".Request"

    /// Account we are requesting history for.
    public var account: Bloombox_Schema_Ledger_LedgerIdentity {
      get {return _storage._account ?? Bloombox_Schema_Ledger_LedgerIdentity()}
      set {_uniqueStorage()._account = newValue}
    }
    /// Returns true if `account` has been explicitly set.
    public var hasAccount: Bool {return _storage._account != nil}
    /// Clears the value of `account`. Subsequent reads from it will return its default value.
    public mutating func clearAccount() {_storage._account = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._account)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._account {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to retrieve an individual account's transaction history.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.protoMessageName + ".Response"

    /// Transactions returned because they were executed by the specified account.
    public var txn: [Bloombox_Schema_Ledger_TransactionKey] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.txn)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.txn.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.txn, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies a complete request/response cycle to retrieve an individual account's transaction history.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.protoMessageName + ".Operation"

    /// Request for account history.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to a request for account history.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC structure that provides an update regarding an in-flight transaction's status.
public struct Bloombox_Schema_Services_Ledger_V1beta1_InflightTransaction: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".InflightTransaction"

  /// Specifies the status of an inflight transaction.
  public var status: Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Transaction object. Provided when the transaction has finalized.
  public var txn: Bloombox_Schema_Ledger_Transaction {
    get {return _storage._txn ?? Bloombox_Schema_Ledger_Transaction()}
    set {_uniqueStorage()._txn = newValue}
  }
  /// Returns true if `txn` has been explicitly set.
  public var hasTxn: Bool {return _storage._txn != nil}
  /// Clears the value of `txn`. Subsequent reads from it will return its default value.
  public mutating func clearTxn() {_storage._txn = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._txn)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._status != .inflight {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
      }
      if let v = _storage._txn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an RPC request and response structure, and encapsulating operation, for a CREATE-type transaction atop a
/// distributed ledger or blockchain. This facilitates the creation or issuance of assets.
public struct Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AssetCreate"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to perform a CREATE transaction.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.protoMessageName + ".Request"

    /// Specifies a payload containing a CREATE transaction.
    public var op: Bloombox_Schema_Ledger_CreateOperation {
      get {return _storage._op ?? Bloombox_Schema_Ledger_CreateOperation()}
      set {_uniqueStorage()._op = newValue}
    }
    /// Returns true if `op` has been explicitly set.
    public var hasOp: Bool {return _storage._op != nil}
    /// Clears the value of `op`. Subsequent reads from it will return its default value.
    public mutating func clearOp() {_storage._op = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._op)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._op {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to perform a CREATE transaction.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.protoMessageName + ".Response"

    /// Specifies the terminal status of the requested transaction.
    public var status: Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    /// Transaction object. Provided when the transaction has finalized.
    public var txn: Bloombox_Schema_Ledger_Transaction {
      get {return _storage._txn ?? Bloombox_Schema_Ledger_Transaction()}
      set {_uniqueStorage()._txn = newValue}
    }
    /// Returns true if `txn` has been explicitly set.
    public var hasTxn: Bool {return _storage._txn != nil}
    /// Clears the value of `txn`. Subsequent reads from it will return its default value.
    public mutating func clearTxn() {_storage._txn = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._txn)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._status != .inflight {
          try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
        }
        if let v = _storage._txn {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a complete request/response operation to perform a CREATE transaction.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.protoMessageName + ".Operation"

    /// Specifies a request to perform a CREATE operation.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Specifies a response to a request to perform a CREATE operation.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC request and response structure, and encapsulating operation, for a TRANSFER-type transaction atop a
/// distributed ledger or blockchain. This facilitates the interchange of assets.
public struct Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AssetTransfer"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to perform a TRANSFER transaction.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.protoMessageName + ".Request"

    /// Specifies a payload containing a TRANSFER transaction.
    public var op: Bloombox_Schema_Ledger_TransferOperation {
      get {return _storage._op ?? Bloombox_Schema_Ledger_TransferOperation()}
      set {_uniqueStorage()._op = newValue}
    }
    /// Returns true if `op` has been explicitly set.
    public var hasOp: Bool {return _storage._op != nil}
    /// Clears the value of `op`. Subsequent reads from it will return its default value.
    public mutating func clearOp() {_storage._op = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._op)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._op {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to perform a TRANSFER transaction.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.protoMessageName + ".Response"

    /// Specifies the terminal status of the requested transaction.
    public var status: Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    /// Transaction object. Provided when the transaction has finalized.
    public var txn: Bloombox_Schema_Ledger_Transaction {
      get {return _storage._txn ?? Bloombox_Schema_Ledger_Transaction()}
      set {_uniqueStorage()._txn = newValue}
    }
    /// Returns true if `txn` has been explicitly set.
    public var hasTxn: Bool {return _storage._txn != nil}
    /// Clears the value of `txn`. Subsequent reads from it will return its default value.
    public mutating func clearTxn() {_storage._txn = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularEnumField(value: &_storage._status)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._txn)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._status != .inflight {
          try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 1)
        }
        if let v = _storage._txn {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a complete request/response operation to perform a TRANSFER transaction.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.protoMessageName + ".Operation"

    /// Specifies a request to perform a TRANSFER operation.
    public var request: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Specifies a response to a request to perform a TRANSFER operation.
    public var response: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.ledger.v1beta1"

extension Bloombox_Schema_Services_Ledger_V1beta1_LedgerError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "INTERNAL_ERROR"),
    2: .same(proto: "ACCESS_DENIED"),
    3: .same(proto: "CONFLICT"),
  ]
}

extension Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INFLIGHT"),
    1: .same(proto: "SENT"),
    2: .same(proto: "UNCOMITTED"),
    3: .same(proto: "REJECTED"),
    4: .same(proto: "FINALIZED"),
  ]
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
  ]

  fileprivate class _StorageClass {
    var _asset: Bloombox_Schema_Ledger_AssetKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _asset = source._asset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._asset != other_storage._asset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
  ]

  fileprivate class _StorageClass {
    var _asset: Bloombox_Schema_Ledger_DigitalAsset? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _asset = source._asset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._asset != other_storage._asset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveAsset.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txn"),
  ]

  fileprivate class _StorageClass {
    var _txn: Bloombox_Schema_Ledger_TransactionKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _txn = source._txn
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._txn != other_storage._txn {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txn"),
  ]

  fileprivate class _StorageClass {
    var _txn: Bloombox_Schema_Ledger_Transaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _txn = source._txn
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._txn != other_storage._txn {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_RetrieveTransaction.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
  ]

  fileprivate class _StorageClass {
    var _asset: Bloombox_Schema_Ledger_AssetKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _asset = source._asset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._asset != other_storage._asset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txn"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Response) -> Bool {
    if self.txn != other.txn {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetHistory.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  fileprivate class _StorageClass {
    var _account: Bloombox_Schema_Ledger_LedgerIdentity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._account != other_storage._account {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "asset"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Response) -> Bool {
    if self.asset != other.asset {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHoldings.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "account"),
  ]

  fileprivate class _StorageClass {
    var _account: Bloombox_Schema_Ledger_LedgerIdentity? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _account = source._account
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._account != other_storage._account {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txn"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Response) -> Bool {
    if self.txn != other.txn {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AccountHistory.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_InflightTransaction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "txn"),
  ]

  fileprivate class _StorageClass {
    var _status: Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus = .inflight
    var _txn: Bloombox_Schema_Ledger_Transaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _txn = source._txn
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_InflightTransaction) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._status != other_storage._status {return false}
        if _storage._txn != other_storage._txn {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
  ]

  fileprivate class _StorageClass {
    var _op: Bloombox_Schema_Ledger_CreateOperation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _op = source._op
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._op != other_storage._op {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "txn"),
  ]

  fileprivate class _StorageClass {
    var _status: Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus = .inflight
    var _txn: Bloombox_Schema_Ledger_Transaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _txn = source._txn
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._status != other_storage._status {return false}
        if _storage._txn != other_storage._txn {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetCreate.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "op"),
  ]

  fileprivate class _StorageClass {
    var _op: Bloombox_Schema_Ledger_TransferOperation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _op = source._op
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._op != other_storage._op {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "txn"),
  ]

  fileprivate class _StorageClass {
    var _status: Bloombox_Schema_Services_Ledger_V1beta1_TransactionStatus = .inflight
    var _txn: Bloombox_Schema_Ledger_Transaction? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _status = source._status
      _txn = source._txn
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._status != other_storage._status {return false}
        if _storage._txn != other_storage._txn {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Request? = nil
    var _response: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Ledger_V1beta1_AssetTransfer.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
