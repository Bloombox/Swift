// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: partner/settings/PartnerLocationSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the concept of partner location-level settings or preferences.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates types of section settings that may be applied and considered.
public enum Bloombox_Schema_Partner_Settings_SectionSettingsType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Settings for a standard section, based on product types or categories.
  case standard // = 0

  /// Settings for a filtered section, based on categorical filtering across menu types or categories.
  case filtered // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .standard
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .standard
    case 1: self = .filtered
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .standard: return 0
    case .filtered: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_SectionSettingsType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_SectionSettingsType] = [
    .standard,
    .filtered,
  ]
}

#endif  // swift(>=4.2)

/// Specifies known types of filtered product sections.
public enum Bloombox_Schema_Partner_Settings_FilteredSectionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// It's a CBD-only section.
  case cbd // = 0

  /// It's a house-brand section.
  case house // = 1

  /// It's an on-sale section.
  case onsale // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .cbd
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cbd
    case 1: self = .house
    case 2: self = .onsale
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .cbd: return 0
    case .house: return 1
    case .onsale: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_FilteredSectionType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_FilteredSectionType] = [
    .cbd,
    .house,
    .onsale,
  ]
}

#endif  // swift(>=4.2)

/// Specifies the type of a custom settings specification payload.
public enum Bloombox_Schema_Partner_Settings_CustomSettingsType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Specifies custom settings for a filtered menu section.
  case filter // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .filter
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .filter
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .filter: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_CustomSettingsType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_CustomSettingsType] = [
    .filter,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates available known hours spans, to which a set of hours boundaries and shop status may apply.
public enum Bloombox_Schema_Partner_Settings_HoursSpan: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Every day of the week.
  case everyday // = 0

  /// Weekdays only.
  case weekdays // = 1

  /// Weekends only.
  case weekends // = 2

  /// Mondays only.
  case monday // = 3

  /// Tuesdays only.
  case tuesday // = 4

  /// Wednesdays only.
  case wednesday // = 5

  /// Thursdays only.
  case thursday // = 6

  /// Fridays only.
  case friday // = 7

  /// Saturdays only.
  case saturday // = 8

  /// Sundays only.
  case sunday // = 9
  case UNRECOGNIZED(Int)

  public init() {
    self = .everyday
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .everyday
    case 1: self = .weekdays
    case 2: self = .weekends
    case 3: self = .monday
    case 4: self = .tuesday
    case 5: self = .wednesday
    case 6: self = .thursday
    case 7: self = .friday
    case 8: self = .saturday
    case 9: self = .sunday
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .everyday: return 0
    case .weekdays: return 1
    case .weekends: return 2
    case .monday: return 3
    case .tuesday: return 4
    case .wednesday: return 5
    case .thursday: return 6
    case .friday: return 7
    case .saturday: return 8
    case .sunday: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_HoursSpan: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_HoursSpan] = [
    .everyday,
    .weekdays,
    .weekends,
    .monday,
    .tuesday,
    .wednesday,
    .thursday,
    .friday,
    .saturday,
    .sunday,
  ]
}

#endif  // swift(>=4.2)

/// Specifies statuses that an online shop itself may take, where it is either open/closed or only open for pickup or
/// delivery.
public enum Bloombox_Schema_Partner_Settings_ShopStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The shop is currently open for business, for both delivery and pickup.
  case `open` // = 0

  /// The shop is currently closed.
  case closed // = 1

  /// The shop is open, but for delivery only.
  case deliveryOnly // = 2

  /// The shop is open, but for pickup only.
  case pickupOnly // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .open
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .open
    case 1: self = .closed
    case 2: self = .deliveryOnly
    case 3: self = .pickupOnly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .open: return 0
    case .closed: return 1
    case .deliveryOnly: return 2
    case .pickupOnly: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_ShopStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_ShopStatus] = [
    .open,
    .closed,
    .deliveryOnly,
    .pickupOnly,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates the types of shop comms for which settings may be specified.
public enum Bloombox_Schema_Partner_Settings_ShopCommsType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Specifies communications settings for internal comms - i.e. to dispensary owners/staff/operators.
  case `internal` // = 0

  /// Specifies communications settings for external comms - i.e. to end-users/consumers.
  case external // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .internal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .internal
    case 1: self = .external
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .internal: return 0
    case .external: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_ShopCommsType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_ShopCommsType] = [
    .internal,
    .external,
  ]
}

#endif  // swift(>=4.2)

/// Specifies available shop action notification channels.
public enum Bloombox_Schema_Partner_Settings_ShopContactChannel: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Specifies notifications related to shop order submission and status changes.
  case ordering // = 0

  /// Specifies notifications related to user enrollment.
  case enrollment // = 1

  /// Specifies marketing/newsletter style communications.
  case marketing // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .ordering
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ordering
    case 1: self = .enrollment
    case 2: self = .marketing
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ordering: return 0
    case .enrollment: return 1
    case .marketing: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_ShopContactChannel: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_ShopContactChannel] = [
    .ordering,
    .enrollment,
    .marketing,
  ]
}

#endif  // swift(>=4.2)

/// Specifies the operating mode for build-a-bag/cart UI on tablet menus.
public enum Bloombox_Schema_Partner_Settings_CartMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Cart mode is off.
  case off // = 0

  /// Cart is in "build-a-bag" mode.
  case bag // = 1

  /// Full-blown cart UI and order flow.
  case cart // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .off
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .off
    case 1: self = .bag
    case 2: self = .cart
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .off: return 0
    case .bag: return 1
    case .cart: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Partner_Settings_CartMode: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Partner_Settings_CartMode] = [
    .off,
    .bag,
    .cart,
  ]
}

#endif  // swift(>=4.2)

/// Specifies API-related settings that are setup on a per-location basis.
public struct Bloombox_Schema_Partner_Settings_APISettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Google API key to display for embeddable menus.
  public var embed: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an in-house brand that should be highlighted in menu display applications.
public struct Bloombox_Schema_Partner_Settings_InHouseBrand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Authoritative label to display for this in-house brand.
  public var label: String = String()

  /// Product brand names to consider members of this in-house brand.
  public var brand: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Settings related to brand taxonomy for products.
public struct Bloombox_Schema_Partner_Settings_ProductBrandSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Settings payloads for in-house brands.
  public var inhouse: [Bloombox_Schema_Partner_Settings_InHouseBrand] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Settings on a per-location basis about what should/should not be published.
public struct Bloombox_Schema_Partner_Settings_PublishSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this location's menu is public information.
  public var menu: Bool = false

  /// Whether this location's profile is public information.
  public var profile: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specific settings specifying a filtered section type.
public struct Bloombox_Schema_Partner_Settings_CustomSectionSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specification for the type of this block of settings. Always 'filter', for now.
  public var spec: String = String()

  public var settings: Bloombox_Schema_Partner_Settings_CustomSectionSettings.OneOf_Settings? = nil

  /// Specified internal filter to employ for this section.
  public var filter: Bloombox_Schema_Partner_Settings_FilteredSectionType {
    get {
      if case .filter(let v)? = settings {return v}
      return .cbd
    }
    set {settings = .filter(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Settings: Equatable {
    /// Specified internal filter to employ for this section.
    case filter(Bloombox_Schema_Partner_Settings_FilteredSectionType)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Schema_Partner_Settings_CustomSectionSettings.OneOf_Settings, rhs: Bloombox_Schema_Partner_Settings_CustomSectionSettings.OneOf_Settings) -> Bool {
      switch (lhs, rhs) {
      case (.filter(let l), .filter(let r)): return l == r
      }
    }
  #endif
  }

  public init() {}
}

/// Payload of settings for a specified menu section.
public struct Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether to hide this section altogether.
  public var hide: Bool {
    get {return _storage._hide}
    set {_uniqueStorage()._hide = newValue}
  }

  /// Whether to display the builtin section label or not. Useful to disable this when section images contain text
  /// explaining the contents of the section.
  public var label: Bool {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Relative media link in media storage for a graphic to use as the masthead of this section. This graphic is used by
  /// the Tablet Menu as the section image.
  public var media: String {
    get {return _storage._media}
    set {_uniqueStorage()._media = newValue}
  }

  /// What to call this section in the UI. This is used as the 'label' value if it is enabled.
  public var text: String {
    get {return _storage._text}
    set {_uniqueStorage()._text = newValue}
  }

  /// Type of section we are specifying settings for.
  public var kind: OneOf_Kind? {
    get {return _storage._kind}
    set {_uniqueStorage()._kind = newValue}
  }

  /// This is a specification of a standard section type.
  public var type: Bloombox_Schema_Partner_Settings_SectionSettingsType {
    get {
      if case .type(let v)? = _storage._kind {return v}
      return .standard
    }
    set {_uniqueStorage()._kind = .type(newValue)}
  }

  /// This is a specification of a filtered section type.
  public var custom: Bloombox_Schema_Partner_Settings_CustomSectionSettings {
    get {
      if case .custom(let v)? = _storage._kind {return v}
      return Bloombox_Schema_Partner_Settings_CustomSectionSettings()
    }
    set {_uniqueStorage()._kind = .custom(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Type of section we are specifying settings for.
  public enum OneOf_Kind: Equatable {
    /// This is a specification of a standard section type.
    case type(Bloombox_Schema_Partner_Settings_SectionSettingsType)
    /// This is a specification of a filtered section type.
    case custom(Bloombox_Schema_Partner_Settings_CustomSectionSettings)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Schema_Partner_Settings_SectionSettingsPayload.OneOf_Kind, rhs: Bloombox_Schema_Partner_Settings_SectionSettingsPayload.OneOf_Kind) -> Bool {
      switch (lhs, rhs) {
      case (.type(let l), .type(let r)): return l == r
      case (.custom(let l), .custom(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Section-level settings in menu display applications.
public struct Bloombox_Schema_Partner_Settings_SectionSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Apothecary section settings.
  public var apothecary: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._apothecary ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._apothecary = newValue}
  }
  /// Returns true if `apothecary` has been explicitly set.
  public var hasApothecary: Bool {return _storage._apothecary != nil}
  /// Clears the value of `apothecary`. Subsequent reads from it will return its default value.
  public mutating func clearApothecary() {_uniqueStorage()._apothecary = nil}

  /// Cartridges section settings.
  public var cartridges: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._cartridges ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._cartridges = newValue}
  }
  /// Returns true if `cartridges` has been explicitly set.
  public var hasCartridges: Bool {return _storage._cartridges != nil}
  /// Clears the value of `cartridges`. Subsequent reads from it will return its default value.
  public mutating func clearCartridges() {_uniqueStorage()._cartridges = nil}

  /// Concentrates/extracts section settings.
  public var concentrates: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._concentrates ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._concentrates = newValue}
  }
  /// Returns true if `concentrates` has been explicitly set.
  public var hasConcentrates: Bool {return _storage._concentrates != nil}
  /// Clears the value of `concentrates`. Subsequent reads from it will return its default value.
  public mutating func clearConcentrates() {_uniqueStorage()._concentrates = nil}

  /// Edibles section settings.
  public var edibles: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._edibles ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._edibles = newValue}
  }
  /// Returns true if `edibles` has been explicitly set.
  public var hasEdibles: Bool {return _storage._edibles != nil}
  /// Clears the value of `edibles`. Subsequent reads from it will return its default value.
  public mutating func clearEdibles() {_uniqueStorage()._edibles = nil}

  /// Flowers section settings.
  public var flowers: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._flowers ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._flowers = newValue}
  }
  /// Returns true if `flowers` has been explicitly set.
  public var hasFlowers: Bool {return _storage._flowers != nil}
  /// Clears the value of `flowers`. Subsequent reads from it will return its default value.
  public mutating func clearFlowers() {_uniqueStorage()._flowers = nil}

  /// Prerolls section settings.
  public var prerolls: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._prerolls ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._prerolls = newValue}
  }
  /// Returns true if `prerolls` has been explicitly set.
  public var hasPrerolls: Bool {return _storage._prerolls != nil}
  /// Clears the value of `prerolls`. Subsequent reads from it will return its default value.
  public mutating func clearPrerolls() {_uniqueStorage()._prerolls = nil}

  /// Merchandise section settings.
  public var merchandise: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._merchandise ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._merchandise = newValue}
  }
  /// Returns true if `merchandise` has been explicitly set.
  public var hasMerchandise: Bool {return _storage._merchandise != nil}
  /// Clears the value of `merchandise`. Subsequent reads from it will return its default value.
  public mutating func clearMerchandise() {_uniqueStorage()._merchandise = nil}

  /// Plants section settings.
  public var plants: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._plants ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._plants = newValue}
  }
  /// Returns true if `plants` has been explicitly set.
  public var hasPlants: Bool {return _storage._plants != nil}
  /// Clears the value of `plants`. Subsequent reads from it will return its default value.
  public mutating func clearPlants() {_uniqueStorage()._plants = nil}

  /// CBD section settings.
  public var cbd: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._cbd ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._cbd = newValue}
  }
  /// Returns true if `cbd` has been explicitly set.
  public var hasCbd: Bool {return _storage._cbd != nil}
  /// Clears the value of `cbd`. Subsequent reads from it will return its default value.
  public mutating func clearCbd() {_uniqueStorage()._cbd = nil}

  /// In-house section settings.
  public var house: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._house ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._house = newValue}
  }
  /// Returns true if `house` has been explicitly set.
  public var hasHouse: Bool {return _storage._house != nil}
  /// Clears the value of `house`. Subsequent reads from it will return its default value.
  public mutating func clearHouse() {_uniqueStorage()._house = nil}

  /// On-sale section settings.
  public var onsale: Bloombox_Schema_Partner_Settings_SectionSettingsPayload {
    get {return _storage._onsale ?? Bloombox_Schema_Partner_Settings_SectionSettingsPayload()}
    set {_uniqueStorage()._onsale = newValue}
  }
  /// Returns true if `onsale` has been explicitly set.
  public var hasOnsale: Bool {return _storage._onsale != nil}
  /// Clears the value of `onsale`. Subsequent reads from it will return its default value.
  public mutating func clearOnsale() {_uniqueStorage()._onsale = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies banner settings for television display units.
public struct Bloombox_Schema_Partner_Settings_TVBannerSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies banner text to display on TVs.
  public var bannerText: String = String()

  /// Relative link to a media item, in media storage, to display as the background of the television banner space.
  public var image: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Section-specific settings when viewed via TV menus.
public struct Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Sort order value for this section.
  public var sort: UInt32 = 0

  /// Display title for this section.
  public var title: String = String()

  /// Absolute link to an image to use as a graphic/icon on this section's header, when displayed on a TV menu.
  public var image: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies settings specific to TV menus.
public struct Bloombox_Schema_Partner_Settings_TVMenuSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Apothecary section settings, when viewed on TV menus.
  public var apothecary: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._apothecary ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._apothecary = newValue}
  }
  /// Returns true if `apothecary` has been explicitly set.
  public var hasApothecary: Bool {return _storage._apothecary != nil}
  /// Clears the value of `apothecary`. Subsequent reads from it will return its default value.
  public mutating func clearApothecary() {_uniqueStorage()._apothecary = nil}

  /// Cartridges section settings, when viewed on TV menus.
  public var cartridges: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._cartridges ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._cartridges = newValue}
  }
  /// Returns true if `cartridges` has been explicitly set.
  public var hasCartridges: Bool {return _storage._cartridges != nil}
  /// Clears the value of `cartridges`. Subsequent reads from it will return its default value.
  public mutating func clearCartridges() {_uniqueStorage()._cartridges = nil}

  /// Concentrates/extracts section settings, when viewed on TV menus.
  public var concentrates: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._concentrates ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._concentrates = newValue}
  }
  /// Returns true if `concentrates` has been explicitly set.
  public var hasConcentrates: Bool {return _storage._concentrates != nil}
  /// Clears the value of `concentrates`. Subsequent reads from it will return its default value.
  public mutating func clearConcentrates() {_uniqueStorage()._concentrates = nil}

  /// Edibles section settings, when viewed on TV menus.
  public var edibles: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._edibles ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._edibles = newValue}
  }
  /// Returns true if `edibles` has been explicitly set.
  public var hasEdibles: Bool {return _storage._edibles != nil}
  /// Clears the value of `edibles`. Subsequent reads from it will return its default value.
  public mutating func clearEdibles() {_uniqueStorage()._edibles = nil}

  /// Flowers section settings, when viewed on TV menus.
  public var flowers: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._flowers ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._flowers = newValue}
  }
  /// Returns true if `flowers` has been explicitly set.
  public var hasFlowers: Bool {return _storage._flowers != nil}
  /// Clears the value of `flowers`. Subsequent reads from it will return its default value.
  public mutating func clearFlowers() {_uniqueStorage()._flowers = nil}

  /// Prerolls section settings, when viewed on TV menus.
  public var prerolls: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._prerolls ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._prerolls = newValue}
  }
  /// Returns true if `prerolls` has been explicitly set.
  public var hasPrerolls: Bool {return _storage._prerolls != nil}
  /// Clears the value of `prerolls`. Subsequent reads from it will return its default value.
  public mutating func clearPrerolls() {_uniqueStorage()._prerolls = nil}

  /// Merchandise section settings, when viewed on TV menus.
  public var merchandise: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._merchandise ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._merchandise = newValue}
  }
  /// Returns true if `merchandise` has been explicitly set.
  public var hasMerchandise: Bool {return _storage._merchandise != nil}
  /// Clears the value of `merchandise`. Subsequent reads from it will return its default value.
  public mutating func clearMerchandise() {_uniqueStorage()._merchandise = nil}

  /// Plants section settings, when viewed on TV menus.
  public var plants: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload {
    get {return _storage._plants ?? Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload()}
    set {_uniqueStorage()._plants = newValue}
  }
  /// Returns true if `plants` has been explicitly set.
  public var hasPlants: Bool {return _storage._plants != nil}
  /// Clears the value of `plants`. Subsequent reads from it will return its default value.
  public mutating func clearPlants() {_uniqueStorage()._plants = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies settings for television display units on a per-location basis.
public struct Bloombox_Schema_Partner_Settings_TVSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Settings for the TV's top banner.
  public var banner: Bloombox_Schema_Partner_Settings_TVBannerSettings {
    get {return _storage._banner ?? Bloombox_Schema_Partner_Settings_TVBannerSettings()}
    set {_uniqueStorage()._banner = newValue}
  }
  /// Returns true if `banner` has been explicitly set.
  public var hasBanner: Bool {return _storage._banner != nil}
  /// Clears the value of `banner`. Subsequent reads from it will return its default value.
  public mutating func clearBanner() {_uniqueStorage()._banner = nil}

  /// Menu-specific settings for TVs.
  public var settings: Bloombox_Schema_Partner_Settings_TVMenuSettings {
    get {return _storage._settings ?? Bloombox_Schema_Partner_Settings_TVMenuSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_uniqueStorage()._settings = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an hours point as part of an hours boundary.
public struct Bloombox_Schema_Partner_Settings_HoursSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hour of the day, in 24h format.
  public var hour: UInt32 = 0

  /// Minute of the hour. Optional.
  public var minute: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an hours boundary as part of an hours settings payload.
public struct Bloombox_Schema_Partner_Settings_HoursBoundary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Beginning of the hours boundary.
  public var begin: Bloombox_Schema_Partner_Settings_HoursSpec {
    get {return _storage._begin ?? Bloombox_Schema_Partner_Settings_HoursSpec()}
    set {_uniqueStorage()._begin = newValue}
  }
  /// Returns true if `begin` has been explicitly set.
  public var hasBegin: Bool {return _storage._begin != nil}
  /// Clears the value of `begin`. Subsequent reads from it will return its default value.
  public mutating func clearBegin() {_uniqueStorage()._begin = nil}

  /// End of the hours boundary.
  public var end: Bloombox_Schema_Partner_Settings_HoursSpec {
    get {return _storage._end ?? Bloombox_Schema_Partner_Settings_HoursSpec()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  public var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  public mutating func clearEnd() {_uniqueStorage()._end = nil}

  /// How this boundary applies - the span of days for this boundary.
  public var span: Bloombox_Schema_Partner_Settings_HoursSpan {
    get {return _storage._span}
    set {_uniqueStorage()._span = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies 'regular' hours, that apply when no 'special' hours apply.
public struct Bloombox_Schema_Partner_Settings_RegularHoursSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Boundary of this set of hours settings.
  public var bounds: Bloombox_Schema_Partner_Settings_HoursBoundary {
    get {return _storage._bounds ?? Bloombox_Schema_Partner_Settings_HoursBoundary()}
    set {_uniqueStorage()._bounds = newValue}
  }
  /// Returns true if `bounds` has been explicitly set.
  public var hasBounds: Bool {return _storage._bounds != nil}
  /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
  public mutating func clearBounds() {_uniqueStorage()._bounds = nil}

  /// Specifies the policy that should apply during the specified bounds, with regard to the shop's open/closed status.
  public var mode: Bloombox_Schema_Partner_Settings_ShopStatus {
    get {return _storage._mode}
    set {_uniqueStorage()._mode = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies 'special' hours, such as holidays or one-off days.
public struct Bloombox_Schema_Partner_Settings_SpecialHoursSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Boundary of this set of hours settings.
  public var bounds: Bloombox_Schema_Partner_Settings_HoursBoundary {
    get {return _storage._bounds ?? Bloombox_Schema_Partner_Settings_HoursBoundary()}
    set {_uniqueStorage()._bounds = newValue}
  }
  /// Returns true if `bounds` has been explicitly set.
  public var hasBounds: Bool {return _storage._bounds != nil}
  /// Clears the value of `bounds`. Subsequent reads from it will return its default value.
  public mutating func clearBounds() {_uniqueStorage()._bounds = nil}

  /// Specifies the policy that should apply during the specified bounds, with regard to the shop's open/closed status.
  public var mode: Bloombox_Schema_Partner_Settings_ShopStatus {
    get {return _storage._mode}
    set {_uniqueStorage()._mode = newValue}
  }

  /// Specifies the date upon which these special hours apply.
  public var date: Opencannabis_Temporal_Date {
    get {return _storage._date ?? Opencannabis_Temporal_Date()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {_uniqueStorage()._date = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies shop hours that tie together the physical and digital storefront.
public struct Bloombox_Schema_Partner_Settings_ShopHoursSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies payloads of regular hours settings for this shop location.
  public var regular: [Bloombox_Schema_Partner_Settings_RegularHoursSettings] = []

  /// Specifies paylods of special hours settings for this shop location, mapped to the day they apply.
  public var special: Dictionary<String,Bloombox_Schema_Partner_Settings_SpecialHoursSettings> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Flags that indicate the services offered through a particular shop.
public struct Bloombox_Schema_Partner_Settings_ShopServiceSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies whether this location supports delivery.
  public var delivery: Bool = false

  /// Specifies whether this location supports express ordering, where a pickup order gets to skip the line.
  public var express: Bool = false

  /// Specifies whether this location supports pickup ordering at all.
  public var pickup: Bool = false

  /// Specifies whether there is a physical storefront for this location.
  public var storefront: Bool = false

  /// Specifies whether this operator supports medical sales.
  public var medical: Bool = false

  /// Specifies whether this operator supports adult-use, or recreational, sales.
  public var adultUse: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Settings for delivery according to a specific zipcode.
public struct Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Zipcode these settings apply to. Sometimes left unspecified when this record is used as a map value.
  public var zipcode: String = String()

  /// Whether this zipcode is currently enabled for delivery.
  public var enabled: Bool = false

  /// Minimum subtotal value an order must meet, if it is bound for delivery to this zipcode, for it to be eligible for
  /// submission for fulfillment.
  public var deliveryMinimum: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Settings for delivery services.
public struct Bloombox_Schema_Partner_Settings_DeliverySettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Global delivery minimum. A delivery order must meet this subtotal minimum to be eligible for submission.
  public var globalMinimum: UInt32 = 0

  /// Specifies zipcode-level settings for delivery.
  public var zipcodes: Dictionary<String,Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies channel-specific shop contact/notification settings.
public struct Bloombox_Schema_Partner_Settings_ShopContactChannelSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this channel should be enabled for email notifications.
  public var email: Bool = false

  /// Whether this channel should be enabled for SMS notifications.
  public var sms: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Groups settings for different shop notification channels into one payload.
public struct Bloombox_Schema_Partner_Settings_ShopChannelSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies channel-specific settings for orders notifications.
  public var orders: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings {
    get {return _storage._orders ?? Bloombox_Schema_Partner_Settings_ShopContactChannelSettings()}
    set {_uniqueStorage()._orders = newValue}
  }
  /// Returns true if `orders` has been explicitly set.
  public var hasOrders: Bool {return _storage._orders != nil}
  /// Clears the value of `orders`. Subsequent reads from it will return its default value.
  public mutating func clearOrders() {_uniqueStorage()._orders = nil}

  /// Specifies channel-specific settings for enrollment notifications.
  public var enrollment: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings {
    get {return _storage._enrollment ?? Bloombox_Schema_Partner_Settings_ShopContactChannelSettings()}
    set {_uniqueStorage()._enrollment = newValue}
  }
  /// Returns true if `enrollment` has been explicitly set.
  public var hasEnrollment: Bool {return _storage._enrollment != nil}
  /// Clears the value of `enrollment`. Subsequent reads from it will return its default value.
  public mutating func clearEnrollment() {_uniqueStorage()._enrollment = nil}

  /// Specifies channel-specific settings for marketing notifications.
  public var marketing: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings {
    get {return _storage._marketing ?? Bloombox_Schema_Partner_Settings_ShopContactChannelSettings()}
    set {_uniqueStorage()._marketing = newValue}
  }
  /// Returns true if `marketing` has been explicitly set.
  public var hasMarketing: Bool {return _storage._marketing != nil}
  /// Clears the value of `marketing`. Subsequent reads from it will return its default value.
  public mutating func clearMarketing() {_uniqueStorage()._marketing = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a shop contact target who should receive shop notifications in some specified circumstances.
public struct Bloombox_Schema_Partner_Settings_ShopContactTarget {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies a human-readable label for this contact.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Include this contact in debug SMS or email traffic.
  public var debug: Bool {
    get {return _storage._debug}
    set {_uniqueStorage()._debug = newValue}
  }

  /// Specifies an email address as part of this contact.
  public var email: Opencannabis_Contact_EmailAddress {
    get {return _storage._email ?? Opencannabis_Contact_EmailAddress()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {_uniqueStorage()._email = nil}

  /// Specifies a phone number as part of this contact.
  public var phone: Opencannabis_Contact_PhoneNumber {
    get {return _storage._phone ?? Opencannabis_Contact_PhoneNumber()}
    set {_uniqueStorage()._phone = newValue}
  }
  /// Returns true if `phone` has been explicitly set.
  public var hasPhone: Bool {return _storage._phone != nil}
  /// Clears the value of `phone`. Subsequent reads from it will return its default value.
  public mutating func clearPhone() {_uniqueStorage()._phone = nil}

  /// Specifies channel-specific subscription settings.
  public var channels: Bloombox_Schema_Partner_Settings_ShopChannelSettings {
    get {return _storage._channels ?? Bloombox_Schema_Partner_Settings_ShopChannelSettings()}
    set {_uniqueStorage()._channels = newValue}
  }
  /// Returns true if `channels` has been explicitly set.
  public var hasChannels: Bool {return _storage._channels != nil}
  /// Clears the value of `channels`. Subsequent reads from it will return its default value.
  public mutating func clearChannels() {_uniqueStorage()._channels = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies sender account settings for SMS and email notification channels.
public struct Bloombox_Schema_Partner_Settings_CommsSenderSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the email address to send from for a particular type of notifications.
  public var email: Opencannabis_Contact_EmailAddress {
    get {return _storage._email ?? Opencannabis_Contact_EmailAddress()}
    set {_uniqueStorage()._email = newValue}
  }
  /// Returns true if `email` has been explicitly set.
  public var hasEmail: Bool {return _storage._email != nil}
  /// Clears the value of `email`. Subsequent reads from it will return its default value.
  public mutating func clearEmail() {_uniqueStorage()._email = nil}

  /// Specifies the phone number to send SMS messages from for a particular type of notifications.
  public var phone: Opencannabis_Contact_PhoneNumber {
    get {return _storage._phone ?? Opencannabis_Contact_PhoneNumber()}
    set {_uniqueStorage()._phone = newValue}
  }
  /// Returns true if `phone` has been explicitly set.
  public var hasPhone: Bool {return _storage._phone != nil}
  /// Clears the value of `phone`. Subsequent reads from it will return its default value.
  public mutating func clearPhone() {_uniqueStorage()._phone = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a particular type of communication settings, usually keyed by its type.
public struct Bloombox_Schema_Partner_Settings_CommsSettingsPayload {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the type communications this settings payload should apply to. Sometimes left unspecified when this
  /// message is used as a map value, since this value is used as its key.
  public var type: Bloombox_Schema_Partner_Settings_ShopCommsType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Specifies contacts attached to this type of shop communication. In an internal context, these represent the full
  /// set of contacts reached-out-to when things occur. In an external context, these are like a BCC function.
  public var contacts: [Bloombox_Schema_Partner_Settings_ShopContactTarget] {
    get {return _storage._contacts}
    set {_uniqueStorage()._contacts = newValue}
  }

  /// Specifies settings for where messages should come from when they are sent for shop communications, including email
  /// (source email address), and SMS (source phone number).
  public var sender: Bloombox_Schema_Partner_Settings_CommsSenderSettings {
    get {return _storage._sender ?? Bloombox_Schema_Partner_Settings_CommsSenderSettings()}
    set {_uniqueStorage()._sender = newValue}
  }
  /// Returns true if `sender` has been explicitly set.
  public var hasSender: Bool {return _storage._sender != nil}
  /// Clears the value of `sender`. Subsequent reads from it will return its default value.
  public mutating func clearSender() {_uniqueStorage()._sender = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies settings related to shop comms.
public struct Bloombox_Schema_Partner_Settings_ShopCommsSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Internal communications settings. This includes dispensary owners/operators/staff and other internal stakeholders.
  public var `internal`: Bloombox_Schema_Partner_Settings_CommsSettingsPayload {
    get {return _storage._internal ?? Bloombox_Schema_Partner_Settings_CommsSettingsPayload()}
    set {_uniqueStorage()._internal = newValue}
  }
  /// Returns true if ``internal`` has been explicitly set.
  public var hasInternal: Bool {return _storage._internal != nil}
  /// Clears the value of ``internal``. Subsequent reads from it will return its default value.
  public mutating func clearInternal() {_uniqueStorage()._internal = nil}

  /// External communications settings. This specifies settings that apply when communicating with end-users, consumers,
  /// customers, and so on.
  public var external: Bloombox_Schema_Partner_Settings_CommsSettingsPayload {
    get {return _storage._external ?? Bloombox_Schema_Partner_Settings_CommsSettingsPayload()}
    set {_uniqueStorage()._external = newValue}
  }
  /// Returns true if `external` has been explicitly set.
  public var hasExternal: Bool {return _storage._external != nil}
  /// Clears the value of `external`. Subsequent reads from it will return its default value.
  public mutating func clearExternal() {_uniqueStorage()._external = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Settings scope for items specifically related to online shop access.
public struct Bloombox_Schema_Partner_Settings_OnlineShopSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Web origin where the online shop for this location is hosted.
  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  /// Specifies settings related to internal or external communications.
  public var comms: Bloombox_Schema_Partner_Settings_ShopCommsSettings {
    get {return _storage._comms ?? Bloombox_Schema_Partner_Settings_ShopCommsSettings()}
    set {_uniqueStorage()._comms = newValue}
  }
  /// Returns true if `comms` has been explicitly set.
  public var hasComms: Bool {return _storage._comms != nil}
  /// Clears the value of `comms`. Subsequent reads from it will return its default value.
  public mutating func clearComms() {_uniqueStorage()._comms = nil}

  /// Domain to use for online shop operations.
  public var domain: String {
    get {return _storage._domain}
    set {_uniqueStorage()._domain = newValue}
  }

  /// Signup URL to use for online shop operations.
  public var signup: String {
    get {return _storage._signup}
    set {_uniqueStorage()._signup = newValue}
  }

  /// Login URL to use for online shop operations.
  public var login: String {
    get {return _storage._login}
    set {_uniqueStorage()._login = newValue}
  }

  /// List of accepted payment methods at this location's digital/online storefront.
  public var acceptedMethod: [Opencannabis_Commerce_PaymentMethod] {
    get {return _storage._acceptedMethod}
    set {_uniqueStorage()._acceptedMethod = newValue}
  }

  /// List of accepted credit/debit card types at this location's digital/online storefront.
  public var acceptedCard: [Opencannabis_Commerce_PaymentCardType] {
    get {return _storage._acceptedCard}
    set {_uniqueStorage()._acceptedCard = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies settings and preferences related to a location's physical storefront.
public struct Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the location name, geopoint info, address, etc for this storefront's physical location.
  public var location: Opencannabis_Geo_Location {
    get {return _storage._location ?? Opencannabis_Geo_Location()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {_uniqueStorage()._location = nil}

  /// List of accepted payment methods at this location's physical storefront.
  public var acceptedMethod: [Opencannabis_Commerce_PaymentMethod] {
    get {return _storage._acceptedMethod}
    set {_uniqueStorage()._acceptedMethod = newValue}
  }

  /// List of accepted credit/debit card types at this location's physical storefront.
  public var acceptedCard: [Opencannabis_Commerce_PaymentCardType] {
    get {return _storage._acceptedCard}
    set {_uniqueStorage()._acceptedCard = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies settings related to the actual sale of goods, either digitally or physically.
public struct Bloombox_Schema_Partner_Settings_StorefrontSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies settings related to shop delivery.
  public var delivery: Bloombox_Schema_Partner_Settings_DeliverySettings {
    get {return _storage._delivery ?? Bloombox_Schema_Partner_Settings_DeliverySettings()}
    set {_uniqueStorage()._delivery = newValue}
  }
  /// Returns true if `delivery` has been explicitly set.
  public var hasDelivery: Bool {return _storage._delivery != nil}
  /// Clears the value of `delivery`. Subsequent reads from it will return its default value.
  public mutating func clearDelivery() {_uniqueStorage()._delivery = nil}

  /// Specifies settings related to the online shop.
  public var online: Bloombox_Schema_Partner_Settings_OnlineShopSettings {
    get {return _storage._online ?? Bloombox_Schema_Partner_Settings_OnlineShopSettings()}
    set {_uniqueStorage()._online = newValue}
  }
  /// Returns true if `online` has been explicitly set.
  public var hasOnline: Bool {return _storage._online != nil}
  /// Clears the value of `online`. Subsequent reads from it will return its default value.
  public mutating func clearOnline() {_uniqueStorage()._online = nil}

  /// Specifies settings related to this location's physical storefront.
  public var physical: Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings {
    get {return _storage._physical ?? Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings()}
    set {_uniqueStorage()._physical = newValue}
  }
  /// Returns true if `physical` has been explicitly set.
  public var hasPhysical: Bool {return _storage._physical != nil}
  /// Clears the value of `physical`. Subsequent reads from it will return its default value.
  public mutating func clearPhysical() {_uniqueStorage()._physical = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies settings that apply to the web shop on a per-location basis.
public struct Bloombox_Schema_Partner_Settings_ShopSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies hours that apply to this storefront.
  public var hours: Bloombox_Schema_Partner_Settings_ShopHoursSettings {
    get {return _storage._hours ?? Bloombox_Schema_Partner_Settings_ShopHoursSettings()}
    set {_uniqueStorage()._hours = newValue}
  }
  /// Returns true if `hours` has been explicitly set.
  public var hasHours: Bool {return _storage._hours != nil}
  /// Clears the value of `hours`. Subsequent reads from it will return its default value.
  public mutating func clearHours() {_uniqueStorage()._hours = nil}

  /// Specifies the services offered by this shop, digital or physical.
  public var services: Bloombox_Schema_Partner_Settings_ShopServiceSettings {
    get {return _storage._services ?? Bloombox_Schema_Partner_Settings_ShopServiceSettings()}
    set {_uniqueStorage()._services = newValue}
  }
  /// Returns true if `services` has been explicitly set.
  public var hasServices: Bool {return _storage._services != nil}
  /// Clears the value of `services`. Subsequent reads from it will return its default value.
  public mutating func clearServices() {_uniqueStorage()._services = nil}

  /// Specifies settings that apply to digital and physical sale of goods.
  public var storefront: Bloombox_Schema_Partner_Settings_StorefrontSettings {
    get {return _storage._storefront ?? Bloombox_Schema_Partner_Settings_StorefrontSettings()}
    set {_uniqueStorage()._storefront = newValue}
  }
  /// Returns true if `storefront` has been explicitly set.
  public var hasStorefront: Bool {return _storage._storefront != nil}
  /// Clears the value of `storefront`. Subsequent reads from it will return its default value.
  public mutating func clearStorefront() {_uniqueStorage()._storefront = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Settings for the cart UI and mode switch on tablet menus.
public struct Bloombox_Schema_Partner_Settings_CartSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Operating mode for the cart.
  public var mode: Bloombox_Schema_Partner_Settings_CartMode = .off

  /// Default order type to send from the device.
  public var orderType: Opencannabis_Commerce_OrderType = .pickup

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Settings related to tablet menus.
public struct Bloombox_Schema_Partner_Settings_TabletSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Settings for the tablet menu cart/build-a-bag feature.
  public var cart: Bloombox_Schema_Partner_Settings_CartSettings {
    get {return _storage._cart ?? Bloombox_Schema_Partner_Settings_CartSettings()}
    set {_uniqueStorage()._cart = newValue}
  }
  /// Returns true if `cart` has been explicitly set.
  public var hasCart: Bool {return _storage._cart != nil}
  /// Clears the value of `cart`. Subsequent reads from it will return its default value.
  public mutating func clearCart() {_uniqueStorage()._cart = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Partner location-level account settings.
public struct Bloombox_Schema_Partner_Settings_PartnerLocationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Internal API-related settings.
  public var api: Bloombox_Schema_Partner_Settings_APISettings {
    get {return _storage._api ?? Bloombox_Schema_Partner_Settings_APISettings()}
    set {_uniqueStorage()._api = newValue}
  }
  /// Returns true if `api` has been explicitly set.
  public var hasApi: Bool {return _storage._api != nil}
  /// Clears the value of `api`. Subsequent reads from it will return its default value.
  public mutating func clearApi() {_uniqueStorage()._api = nil}

  /// Product-level branding settings.
  public var brands: Bloombox_Schema_Partner_Settings_ProductBrandSettings {
    get {return _storage._brands ?? Bloombox_Schema_Partner_Settings_ProductBrandSettings()}
    set {_uniqueStorage()._brands = newValue}
  }
  /// Returns true if `brands` has been explicitly set.
  public var hasBrands: Bool {return _storage._brands != nil}
  /// Clears the value of `brands`. Subsequent reads from it will return its default value.
  public mutating func clearBrands() {_uniqueStorage()._brands = nil}

  /// Settings related to publishing data on behalf of a partner.
  public var publish: Bloombox_Schema_Partner_Settings_PublishSettings {
    get {return _storage._publish ?? Bloombox_Schema_Partner_Settings_PublishSettings()}
    set {_uniqueStorage()._publish = newValue}
  }
  /// Returns true if `publish` has been explicitly set.
  public var hasPublish: Bool {return _storage._publish != nil}
  /// Clears the value of `publish`. Subsequent reads from it will return its default value.
  public mutating func clearPublish() {_uniqueStorage()._publish = nil}

  /// Section-level menu settings.
  public var sections: Bloombox_Schema_Partner_Settings_SectionSettings {
    get {return _storage._sections ?? Bloombox_Schema_Partner_Settings_SectionSettings()}
    set {_uniqueStorage()._sections = newValue}
  }
  /// Returns true if `sections` has been explicitly set.
  public var hasSections: Bool {return _storage._sections != nil}
  /// Clears the value of `sections`. Subsequent reads from it will return its default value.
  public mutating func clearSections() {_uniqueStorage()._sections = nil}

  /// Specifies settings that apply to the web or physical storefronts for this partner location.
  public var shop: Bloombox_Schema_Partner_Settings_ShopSettings {
    get {return _storage._shop ?? Bloombox_Schema_Partner_Settings_ShopSettings()}
    set {_uniqueStorage()._shop = newValue}
  }
  /// Returns true if `shop` has been explicitly set.
  public var hasShop: Bool {return _storage._shop != nil}
  /// Clears the value of `shop`. Subsequent reads from it will return its default value.
  public mutating func clearShop() {_uniqueStorage()._shop = nil}

  /// Specifies settings that apply to television display units, particularly TV menus.
  public var tv: Bloombox_Schema_Partner_Settings_TVSettings {
    get {return _storage._tv ?? Bloombox_Schema_Partner_Settings_TVSettings()}
    set {_uniqueStorage()._tv = newValue}
  }
  /// Returns true if `tv` has been explicitly set.
  public var hasTv: Bool {return _storage._tv != nil}
  /// Clears the value of `tv`. Subsequent reads from it will return its default value.
  public mutating func clearTv() {_uniqueStorage()._tv = nil}

  /// Tablet-related settings.
  public var tablet: Bloombox_Schema_Partner_Settings_TabletSettings {
    get {return _storage._tablet ?? Bloombox_Schema_Partner_Settings_TabletSettings()}
    set {_uniqueStorage()._tablet = newValue}
  }
  /// Returns true if `tablet` has been explicitly set.
  public var hasTablet: Bool {return _storage._tablet != nil}
  /// Clears the value of `tablet`. Subsequent reads from it will return its default value.
  public mutating func clearTablet() {_uniqueStorage()._tablet = nil}

  /// Integration settings for this location.
  public var integration: Bloombox_Schema_Partner_Integrations_LocationIntegrationSettings {
    get {return _storage._integration ?? Bloombox_Schema_Partner_Integrations_LocationIntegrationSettings()}
    set {_uniqueStorage()._integration = newValue}
  }
  /// Returns true if `integration` has been explicitly set.
  public var hasIntegration: Bool {return _storage._integration != nil}
  /// Clears the value of `integration`. Subsequent reads from it will return its default value.
  public mutating func clearIntegration() {_uniqueStorage()._integration = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.partner.settings"

extension Bloombox_Schema_Partner_Settings_SectionSettingsType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STANDARD"),
    1: .same(proto: "FILTERED"),
  ]
}

extension Bloombox_Schema_Partner_Settings_FilteredSectionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CBD"),
    1: .same(proto: "HOUSE"),
    2: .same(proto: "ONSALE"),
  ]
}

extension Bloombox_Schema_Partner_Settings_CustomSettingsType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FILTER"),
  ]
}

extension Bloombox_Schema_Partner_Settings_HoursSpan: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVERYDAY"),
    1: .same(proto: "WEEKDAYS"),
    2: .same(proto: "WEEKENDS"),
    3: .same(proto: "MONDAY"),
    4: .same(proto: "TUESDAY"),
    5: .same(proto: "WEDNESDAY"),
    6: .same(proto: "THURSDAY"),
    7: .same(proto: "FRIDAY"),
    8: .same(proto: "SATURDAY"),
    9: .same(proto: "SUNDAY"),
  ]
}

extension Bloombox_Schema_Partner_Settings_ShopStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OPEN"),
    1: .same(proto: "CLOSED"),
    2: .same(proto: "DELIVERY_ONLY"),
    3: .same(proto: "PICKUP_ONLY"),
  ]
}

extension Bloombox_Schema_Partner_Settings_ShopCommsType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTERNAL"),
    1: .same(proto: "EXTERNAL"),
  ]
}

extension Bloombox_Schema_Partner_Settings_ShopContactChannel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORDERING"),
    1: .same(proto: "ENROLLMENT"),
    2: .same(proto: "MARKETING"),
  ]
}

extension Bloombox_Schema_Partner_Settings_CartMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OFF"),
    1: .same(proto: "BAG"),
    2: .same(proto: "CART"),
  ]
}

extension Bloombox_Schema_Partner_Settings_APISettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".APISettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "embed"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.embed)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.embed.isEmpty {
      try visitor.visitSingularStringField(value: self.embed, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_APISettings, rhs: Bloombox_Schema_Partner_Settings_APISettings) -> Bool {
    if lhs.embed != rhs.embed {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_InHouseBrand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InHouseBrand"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "brand"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.label)
      case 2: try decoder.decodeRepeatedStringField(value: &self.brand)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.brand.isEmpty {
      try visitor.visitRepeatedStringField(value: self.brand, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_InHouseBrand, rhs: Bloombox_Schema_Partner_Settings_InHouseBrand) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.brand != rhs.brand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ProductBrandSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductBrandSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "inhouse"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.inhouse)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.inhouse.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inhouse, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ProductBrandSettings, rhs: Bloombox_Schema_Partner_Settings_ProductBrandSettings) -> Bool {
    if lhs.inhouse != rhs.inhouse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_PublishSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PublishSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "menu"),
    2: .same(proto: "profile"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.menu)
      case 2: try decoder.decodeSingularBoolField(value: &self.profile)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.menu != false {
      try visitor.visitSingularBoolField(value: self.menu, fieldNumber: 1)
    }
    if self.profile != false {
      try visitor.visitSingularBoolField(value: self.profile, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_PublishSettings, rhs: Bloombox_Schema_Partner_Settings_PublishSettings) -> Bool {
    if lhs.menu != rhs.menu {return false}
    if lhs.profile != rhs.profile {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_CustomSectionSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomSectionSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spec"),
    2: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.spec)
      case 2:
        if self.settings != nil {try decoder.handleConflictingOneOf()}
        var v: Bloombox_Schema_Partner_Settings_FilteredSectionType?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.settings = .filter(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spec.isEmpty {
      try visitor.visitSingularStringField(value: self.spec, fieldNumber: 1)
    }
    if case .filter(let v)? = self.settings {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_CustomSectionSettings, rhs: Bloombox_Schema_Partner_Settings_CustomSectionSettings) -> Bool {
    if lhs.spec != rhs.spec {return false}
    if lhs.settings != rhs.settings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_SectionSettingsPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionSettingsPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hide"),
    2: .same(proto: "label"),
    3: .same(proto: "media"),
    4: .same(proto: "text"),
    5: .same(proto: "type"),
    6: .same(proto: "custom"),
  ]

  fileprivate class _StorageClass {
    var _hide: Bool = false
    var _label: Bool = false
    var _media: String = String()
    var _text: String = String()
    var _kind: Bloombox_Schema_Partner_Settings_SectionSettingsPayload.OneOf_Kind?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hide = source._hide
      _label = source._label
      _media = source._media
      _text = source._text
      _kind = source._kind
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._hide)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._label)
        case 3: try decoder.decodeSingularStringField(value: &_storage._media)
        case 4: try decoder.decodeSingularStringField(value: &_storage._text)
        case 5:
          if _storage._kind != nil {try decoder.handleConflictingOneOf()}
          var v: Bloombox_Schema_Partner_Settings_SectionSettingsType?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._kind = .type(v)}
        case 6:
          var v: Bloombox_Schema_Partner_Settings_CustomSectionSettings?
          if let current = _storage._kind {
            try decoder.handleConflictingOneOf()
            if case .custom(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._kind = .custom(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._hide != false {
        try visitor.visitSingularBoolField(value: _storage._hide, fieldNumber: 1)
      }
      if _storage._label != false {
        try visitor.visitSingularBoolField(value: _storage._label, fieldNumber: 2)
      }
      if !_storage._media.isEmpty {
        try visitor.visitSingularStringField(value: _storage._media, fieldNumber: 3)
      }
      if !_storage._text.isEmpty {
        try visitor.visitSingularStringField(value: _storage._text, fieldNumber: 4)
      }
      switch _storage._kind {
      case .type(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      case .custom(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_SectionSettingsPayload, rhs: Bloombox_Schema_Partner_Settings_SectionSettingsPayload) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hide != rhs_storage._hide {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._media != rhs_storage._media {return false}
        if _storage._text != rhs_storage._text {return false}
        if _storage._kind != rhs_storage._kind {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_SectionSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "apothecary"),
    2: .same(proto: "cartridges"),
    3: .same(proto: "concentrates"),
    4: .same(proto: "edibles"),
    5: .same(proto: "flowers"),
    6: .same(proto: "prerolls"),
    7: .same(proto: "merchandise"),
    8: .same(proto: "plants"),
    20: .same(proto: "cbd"),
    21: .same(proto: "house"),
    22: .same(proto: "onsale"),
  ]

  fileprivate class _StorageClass {
    var _apothecary: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _cartridges: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _concentrates: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _edibles: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _flowers: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _prerolls: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _merchandise: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _plants: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _cbd: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _house: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil
    var _onsale: Bloombox_Schema_Partner_Settings_SectionSettingsPayload? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apothecary = source._apothecary
      _cartridges = source._cartridges
      _concentrates = source._concentrates
      _edibles = source._edibles
      _flowers = source._flowers
      _prerolls = source._prerolls
      _merchandise = source._merchandise
      _plants = source._plants
      _cbd = source._cbd
      _house = source._house
      _onsale = source._onsale
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._apothecary)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._cartridges)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._concentrates)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._edibles)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._flowers)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._prerolls)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._merchandise)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._plants)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._cbd)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._house)
        case 22: try decoder.decodeSingularMessageField(value: &_storage._onsale)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._apothecary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._cartridges {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._concentrates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._edibles {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._flowers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._prerolls {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._merchandise {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._plants {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._cbd {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if let v = _storage._house {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if let v = _storage._onsale {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_SectionSettings, rhs: Bloombox_Schema_Partner_Settings_SectionSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apothecary != rhs_storage._apothecary {return false}
        if _storage._cartridges != rhs_storage._cartridges {return false}
        if _storage._concentrates != rhs_storage._concentrates {return false}
        if _storage._edibles != rhs_storage._edibles {return false}
        if _storage._flowers != rhs_storage._flowers {return false}
        if _storage._prerolls != rhs_storage._prerolls {return false}
        if _storage._merchandise != rhs_storage._merchandise {return false}
        if _storage._plants != rhs_storage._plants {return false}
        if _storage._cbd != rhs_storage._cbd {return false}
        if _storage._house != rhs_storage._house {return false}
        if _storage._onsale != rhs_storage._onsale {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_TVBannerSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TVBannerSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "banner_text"),
    2: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.bannerText)
      case 2: try decoder.decodeSingularStringField(value: &self.image)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.bannerText.isEmpty {
      try visitor.visitSingularStringField(value: self.bannerText, fieldNumber: 1)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_TVBannerSettings, rhs: Bloombox_Schema_Partner_Settings_TVBannerSettings) -> Bool {
    if lhs.bannerText != rhs.bannerText {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TVSectionSettingsPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sort"),
    2: .same(proto: "title"),
    3: .same(proto: "image"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.sort)
      case 2: try decoder.decodeSingularStringField(value: &self.title)
      case 3: try decoder.decodeSingularStringField(value: &self.image)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.sort != 0 {
      try visitor.visitSingularUInt32Field(value: self.sort, fieldNumber: 1)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 2)
    }
    if !self.image.isEmpty {
      try visitor.visitSingularStringField(value: self.image, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload, rhs: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload) -> Bool {
    if lhs.sort != rhs.sort {return false}
    if lhs.title != rhs.title {return false}
    if lhs.image != rhs.image {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_TVMenuSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TVMenuSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "apothecary"),
    2: .same(proto: "cartridges"),
    3: .same(proto: "concentrates"),
    4: .same(proto: "edibles"),
    5: .same(proto: "flowers"),
    6: .same(proto: "prerolls"),
    7: .same(proto: "merchandise"),
    8: .same(proto: "plants"),
  ]

  fileprivate class _StorageClass {
    var _apothecary: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _cartridges: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _concentrates: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _edibles: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _flowers: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _prerolls: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _merchandise: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil
    var _plants: Bloombox_Schema_Partner_Settings_TVSectionSettingsPayload? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apothecary = source._apothecary
      _cartridges = source._cartridges
      _concentrates = source._concentrates
      _edibles = source._edibles
      _flowers = source._flowers
      _prerolls = source._prerolls
      _merchandise = source._merchandise
      _plants = source._plants
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._apothecary)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._cartridges)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._concentrates)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._edibles)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._flowers)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._prerolls)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._merchandise)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._plants)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._apothecary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._cartridges {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._concentrates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._edibles {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._flowers {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._prerolls {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._merchandise {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._plants {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_TVMenuSettings, rhs: Bloombox_Schema_Partner_Settings_TVMenuSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._apothecary != rhs_storage._apothecary {return false}
        if _storage._cartridges != rhs_storage._cartridges {return false}
        if _storage._concentrates != rhs_storage._concentrates {return false}
        if _storage._edibles != rhs_storage._edibles {return false}
        if _storage._flowers != rhs_storage._flowers {return false}
        if _storage._prerolls != rhs_storage._prerolls {return false}
        if _storage._merchandise != rhs_storage._merchandise {return false}
        if _storage._plants != rhs_storage._plants {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_TVSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TVSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "banner"),
    2: .same(proto: "settings"),
  ]

  fileprivate class _StorageClass {
    var _banner: Bloombox_Schema_Partner_Settings_TVBannerSettings? = nil
    var _settings: Bloombox_Schema_Partner_Settings_TVMenuSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _banner = source._banner
      _settings = source._settings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._banner)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._settings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._banner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_TVSettings, rhs: Bloombox_Schema_Partner_Settings_TVSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._banner != rhs_storage._banner {return false}
        if _storage._settings != rhs_storage._settings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_HoursSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HoursSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hour"),
    2: .same(proto: "minute"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.hour)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.minute)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hour != 0 {
      try visitor.visitSingularUInt32Field(value: self.hour, fieldNumber: 1)
    }
    if self.minute != 0 {
      try visitor.visitSingularUInt32Field(value: self.minute, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_HoursSpec, rhs: Bloombox_Schema_Partner_Settings_HoursSpec) -> Bool {
    if lhs.hour != rhs.hour {return false}
    if lhs.minute != rhs.minute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_HoursBoundary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HoursBoundary"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "begin"),
    2: .same(proto: "end"),
    3: .same(proto: "span"),
  ]

  fileprivate class _StorageClass {
    var _begin: Bloombox_Schema_Partner_Settings_HoursSpec? = nil
    var _end: Bloombox_Schema_Partner_Settings_HoursSpec? = nil
    var _span: Bloombox_Schema_Partner_Settings_HoursSpan = .everyday

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _begin = source._begin
      _end = source._end
      _span = source._span
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._begin)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._end)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._span)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._begin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._span != .everyday {
        try visitor.visitSingularEnumField(value: _storage._span, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_HoursBoundary, rhs: Bloombox_Schema_Partner_Settings_HoursBoundary) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._begin != rhs_storage._begin {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._span != rhs_storage._span {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_RegularHoursSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegularHoursSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "mode"),
  ]

  fileprivate class _StorageClass {
    var _bounds: Bloombox_Schema_Partner_Settings_HoursBoundary? = nil
    var _mode: Bloombox_Schema_Partner_Settings_ShopStatus = .open

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bounds = source._bounds
      _mode = source._mode
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._bounds)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._mode)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bounds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._mode != .open {
        try visitor.visitSingularEnumField(value: _storage._mode, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_RegularHoursSettings, rhs: Bloombox_Schema_Partner_Settings_RegularHoursSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bounds != rhs_storage._bounds {return false}
        if _storage._mode != rhs_storage._mode {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_SpecialHoursSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SpecialHoursSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "bounds"),
    2: .same(proto: "mode"),
    3: .same(proto: "date"),
  ]

  fileprivate class _StorageClass {
    var _bounds: Bloombox_Schema_Partner_Settings_HoursBoundary? = nil
    var _mode: Bloombox_Schema_Partner_Settings_ShopStatus = .open
    var _date: Opencannabis_Temporal_Date? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _bounds = source._bounds
      _mode = source._mode
      _date = source._date
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._bounds)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._mode)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._date)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bounds {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._mode != .open {
        try visitor.visitSingularEnumField(value: _storage._mode, fieldNumber: 2)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_SpecialHoursSettings, rhs: Bloombox_Schema_Partner_Settings_SpecialHoursSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._bounds != rhs_storage._bounds {return false}
        if _storage._mode != rhs_storage._mode {return false}
        if _storage._date != rhs_storage._date {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopHoursSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopHoursSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "regular"),
    2: .same(proto: "special"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.regular)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Partner_Settings_SpecialHoursSettings>.self, value: &self.special)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.regular.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.regular, fieldNumber: 1)
    }
    if !self.special.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Partner_Settings_SpecialHoursSettings>.self, value: self.special, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopHoursSettings, rhs: Bloombox_Schema_Partner_Settings_ShopHoursSettings) -> Bool {
    if lhs.regular != rhs.regular {return false}
    if lhs.special != rhs.special {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopServiceSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopServiceSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delivery"),
    2: .same(proto: "express"),
    3: .same(proto: "pickup"),
    4: .same(proto: "storefront"),
    5: .same(proto: "medical"),
    6: .standard(proto: "adult_use"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.delivery)
      case 2: try decoder.decodeSingularBoolField(value: &self.express)
      case 3: try decoder.decodeSingularBoolField(value: &self.pickup)
      case 4: try decoder.decodeSingularBoolField(value: &self.storefront)
      case 5: try decoder.decodeSingularBoolField(value: &self.medical)
      case 6: try decoder.decodeSingularBoolField(value: &self.adultUse)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.delivery != false {
      try visitor.visitSingularBoolField(value: self.delivery, fieldNumber: 1)
    }
    if self.express != false {
      try visitor.visitSingularBoolField(value: self.express, fieldNumber: 2)
    }
    if self.pickup != false {
      try visitor.visitSingularBoolField(value: self.pickup, fieldNumber: 3)
    }
    if self.storefront != false {
      try visitor.visitSingularBoolField(value: self.storefront, fieldNumber: 4)
    }
    if self.medical != false {
      try visitor.visitSingularBoolField(value: self.medical, fieldNumber: 5)
    }
    if self.adultUse != false {
      try visitor.visitSingularBoolField(value: self.adultUse, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopServiceSettings, rhs: Bloombox_Schema_Partner_Settings_ShopServiceSettings) -> Bool {
    if lhs.delivery != rhs.delivery {return false}
    if lhs.express != rhs.express {return false}
    if lhs.pickup != rhs.pickup {return false}
    if lhs.storefront != rhs.storefront {return false}
    if lhs.medical != rhs.medical {return false}
    if lhs.adultUse != rhs.adultUse {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeliveryZipcodeSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zipcode"),
    2: .same(proto: "enabled"),
    3: .standard(proto: "delivery_minimum"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.zipcode)
      case 2: try decoder.decodeSingularBoolField(value: &self.enabled)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.deliveryMinimum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.zipcode.isEmpty {
      try visitor.visitSingularStringField(value: self.zipcode, fieldNumber: 1)
    }
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 2)
    }
    if self.deliveryMinimum != 0 {
      try visitor.visitSingularUInt32Field(value: self.deliveryMinimum, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings, rhs: Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings) -> Bool {
    if lhs.zipcode != rhs.zipcode {return false}
    if lhs.enabled != rhs.enabled {return false}
    if lhs.deliveryMinimum != rhs.deliveryMinimum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_DeliverySettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeliverySettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "global_minimum"),
    2: .same(proto: "zipcodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.globalMinimum)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings>.self, value: &self.zipcodes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.globalMinimum != 0 {
      try visitor.visitSingularUInt32Field(value: self.globalMinimum, fieldNumber: 1)
    }
    if !self.zipcodes.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Partner_Settings_DeliveryZipcodeSettings>.self, value: self.zipcodes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_DeliverySettings, rhs: Bloombox_Schema_Partner_Settings_DeliverySettings) -> Bool {
    if lhs.globalMinimum != rhs.globalMinimum {return false}
    if lhs.zipcodes != rhs.zipcodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopContactChannelSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopContactChannelSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "sms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.email)
      case 2: try decoder.decodeSingularBoolField(value: &self.sms)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.email != false {
      try visitor.visitSingularBoolField(value: self.email, fieldNumber: 1)
    }
    if self.sms != false {
      try visitor.visitSingularBoolField(value: self.sms, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings, rhs: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings) -> Bool {
    if lhs.email != rhs.email {return false}
    if lhs.sms != rhs.sms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopChannelSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopChannelSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "orders"),
    2: .same(proto: "enrollment"),
    3: .same(proto: "marketing"),
  ]

  fileprivate class _StorageClass {
    var _orders: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings? = nil
    var _enrollment: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings? = nil
    var _marketing: Bloombox_Schema_Partner_Settings_ShopContactChannelSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orders = source._orders
      _enrollment = source._enrollment
      _marketing = source._marketing
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._orders)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._enrollment)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._marketing)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._orders {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._enrollment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._marketing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopChannelSettings, rhs: Bloombox_Schema_Partner_Settings_ShopChannelSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orders != rhs_storage._orders {return false}
        if _storage._enrollment != rhs_storage._enrollment {return false}
        if _storage._marketing != rhs_storage._marketing {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopContactTarget: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopContactTarget"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "debug"),
    3: .same(proto: "email"),
    4: .same(proto: "phone"),
    5: .same(proto: "channels"),
  ]

  fileprivate class _StorageClass {
    var _label: String = String()
    var _debug: Bool = false
    var _email: Opencannabis_Contact_EmailAddress? = nil
    var _phone: Opencannabis_Contact_PhoneNumber? = nil
    var _channels: Bloombox_Schema_Partner_Settings_ShopChannelSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _label = source._label
      _debug = source._debug
      _email = source._email
      _phone = source._phone
      _channels = source._channels
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._label)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._debug)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._email)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._phone)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._channels)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 1)
      }
      if _storage._debug != false {
        try visitor.visitSingularBoolField(value: _storage._debug, fieldNumber: 2)
      }
      if let v = _storage._email {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._phone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._channels {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopContactTarget, rhs: Bloombox_Schema_Partner_Settings_ShopContactTarget) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._label != rhs_storage._label {return false}
        if _storage._debug != rhs_storage._debug {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._phone != rhs_storage._phone {return false}
        if _storage._channels != rhs_storage._channels {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_CommsSenderSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommsSenderSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "phone"),
  ]

  fileprivate class _StorageClass {
    var _email: Opencannabis_Contact_EmailAddress? = nil
    var _phone: Opencannabis_Contact_PhoneNumber? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _email = source._email
      _phone = source._phone
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._email)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._phone)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._email {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._phone {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_CommsSenderSettings, rhs: Bloombox_Schema_Partner_Settings_CommsSenderSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._email != rhs_storage._email {return false}
        if _storage._phone != rhs_storage._phone {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_CommsSettingsPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommsSettingsPayload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "contacts"),
    3: .same(proto: "sender"),
  ]

  fileprivate class _StorageClass {
    var _type: Bloombox_Schema_Partner_Settings_ShopCommsType = .internal
    var _contacts: [Bloombox_Schema_Partner_Settings_ShopContactTarget] = []
    var _sender: Bloombox_Schema_Partner_Settings_CommsSenderSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _contacts = source._contacts
      _sender = source._sender
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._contacts)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._sender)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .internal {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if !_storage._contacts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contacts, fieldNumber: 2)
      }
      if let v = _storage._sender {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_CommsSettingsPayload, rhs: Bloombox_Schema_Partner_Settings_CommsSettingsPayload) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._contacts != rhs_storage._contacts {return false}
        if _storage._sender != rhs_storage._sender {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopCommsSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopCommsSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "internal"),
    2: .same(proto: "external"),
  ]

  fileprivate class _StorageClass {
    var _internal: Bloombox_Schema_Partner_Settings_CommsSettingsPayload? = nil
    var _external: Bloombox_Schema_Partner_Settings_CommsSettingsPayload? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _internal = source._internal
      _external = source._external
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._internal)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._external)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._internal {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._external {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopCommsSettings, rhs: Bloombox_Schema_Partner_Settings_ShopCommsSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._internal != rhs_storage._internal {return false}
        if _storage._external != rhs_storage._external {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_OnlineShopSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OnlineShopSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
    2: .same(proto: "comms"),
    3: .same(proto: "domain"),
    4: .same(proto: "signup"),
    5: .same(proto: "login"),
    6: .standard(proto: "accepted_method"),
    7: .standard(proto: "accepted_card"),
  ]

  fileprivate class _StorageClass {
    var _origin: String = String()
    var _comms: Bloombox_Schema_Partner_Settings_ShopCommsSettings? = nil
    var _domain: String = String()
    var _signup: String = String()
    var _login: String = String()
    var _acceptedMethod: [Opencannabis_Commerce_PaymentMethod] = []
    var _acceptedCard: [Opencannabis_Commerce_PaymentCardType] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _origin = source._origin
      _comms = source._comms
      _domain = source._domain
      _signup = source._signup
      _login = source._login
      _acceptedMethod = source._acceptedMethod
      _acceptedCard = source._acceptedCard
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._origin)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._comms)
        case 3: try decoder.decodeSingularStringField(value: &_storage._domain)
        case 4: try decoder.decodeSingularStringField(value: &_storage._signup)
        case 5: try decoder.decodeSingularStringField(value: &_storage._login)
        case 6: try decoder.decodeRepeatedEnumField(value: &_storage._acceptedMethod)
        case 7: try decoder.decodeRepeatedEnumField(value: &_storage._acceptedCard)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 1)
      }
      if let v = _storage._comms {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._domain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._domain, fieldNumber: 3)
      }
      if !_storage._signup.isEmpty {
        try visitor.visitSingularStringField(value: _storage._signup, fieldNumber: 4)
      }
      if !_storage._login.isEmpty {
        try visitor.visitSingularStringField(value: _storage._login, fieldNumber: 5)
      }
      if !_storage._acceptedMethod.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._acceptedMethod, fieldNumber: 6)
      }
      if !_storage._acceptedCard.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._acceptedCard, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_OnlineShopSettings, rhs: Bloombox_Schema_Partner_Settings_OnlineShopSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._comms != rhs_storage._comms {return false}
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._signup != rhs_storage._signup {return false}
        if _storage._login != rhs_storage._login {return false}
        if _storage._acceptedMethod != rhs_storage._acceptedMethod {return false}
        if _storage._acceptedCard != rhs_storage._acceptedCard {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PhysicalStorefrontSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .standard(proto: "accepted_method"),
    3: .standard(proto: "accepted_card"),
  ]

  fileprivate class _StorageClass {
    var _location: Opencannabis_Geo_Location? = nil
    var _acceptedMethod: [Opencannabis_Commerce_PaymentMethod] = []
    var _acceptedCard: [Opencannabis_Commerce_PaymentCardType] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
      _acceptedMethod = source._acceptedMethod
      _acceptedCard = source._acceptedCard
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 2: try decoder.decodeRepeatedEnumField(value: &_storage._acceptedMethod)
        case 3: try decoder.decodeRepeatedEnumField(value: &_storage._acceptedCard)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._acceptedMethod.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._acceptedMethod, fieldNumber: 2)
      }
      if !_storage._acceptedCard.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._acceptedCard, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings, rhs: Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._location != rhs_storage._location {return false}
        if _storage._acceptedMethod != rhs_storage._acceptedMethod {return false}
        if _storage._acceptedCard != rhs_storage._acceptedCard {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_StorefrontSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StorefrontSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "delivery"),
    2: .same(proto: "online"),
    3: .same(proto: "physical"),
  ]

  fileprivate class _StorageClass {
    var _delivery: Bloombox_Schema_Partner_Settings_DeliverySettings? = nil
    var _online: Bloombox_Schema_Partner_Settings_OnlineShopSettings? = nil
    var _physical: Bloombox_Schema_Partner_Settings_PhysicalStorefrontSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _delivery = source._delivery
      _online = source._online
      _physical = source._physical
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._delivery)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._online)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._physical)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._delivery {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._online {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._physical {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_StorefrontSettings, rhs: Bloombox_Schema_Partner_Settings_StorefrontSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._delivery != rhs_storage._delivery {return false}
        if _storage._online != rhs_storage._online {return false}
        if _storage._physical != rhs_storage._physical {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_ShopSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hours"),
    2: .same(proto: "services"),
    3: .same(proto: "storefront"),
  ]

  fileprivate class _StorageClass {
    var _hours: Bloombox_Schema_Partner_Settings_ShopHoursSettings? = nil
    var _services: Bloombox_Schema_Partner_Settings_ShopServiceSettings? = nil
    var _storefront: Bloombox_Schema_Partner_Settings_StorefrontSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hours = source._hours
      _services = source._services
      _storefront = source._storefront
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._hours)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._services)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._storefront)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._hours {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._services {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._storefront {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_ShopSettings, rhs: Bloombox_Schema_Partner_Settings_ShopSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hours != rhs_storage._hours {return false}
        if _storage._services != rhs_storage._services {return false}
        if _storage._storefront != rhs_storage._storefront {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_CartSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CartSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "order_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.mode)
      case 2: try decoder.decodeSingularEnumField(value: &self.orderType)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .off {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if self.orderType != .pickup {
      try visitor.visitSingularEnumField(value: self.orderType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_CartSettings, rhs: Bloombox_Schema_Partner_Settings_CartSettings) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.orderType != rhs.orderType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_TabletSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TabletSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cart"),
  ]

  fileprivate class _StorageClass {
    var _cart: Bloombox_Schema_Partner_Settings_CartSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cart = source._cart
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._cart)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._cart {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_TabletSettings, rhs: Bloombox_Schema_Partner_Settings_TabletSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cart != rhs_storage._cart {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Settings_PartnerLocationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PartnerLocationSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "api"),
    2: .same(proto: "brands"),
    3: .same(proto: "publish"),
    4: .same(proto: "sections"),
    5: .same(proto: "shop"),
    6: .same(proto: "tv"),
    7: .same(proto: "tablet"),
    20: .same(proto: "integration"),
  ]

  fileprivate class _StorageClass {
    var _api: Bloombox_Schema_Partner_Settings_APISettings? = nil
    var _brands: Bloombox_Schema_Partner_Settings_ProductBrandSettings? = nil
    var _publish: Bloombox_Schema_Partner_Settings_PublishSettings? = nil
    var _sections: Bloombox_Schema_Partner_Settings_SectionSettings? = nil
    var _shop: Bloombox_Schema_Partner_Settings_ShopSettings? = nil
    var _tv: Bloombox_Schema_Partner_Settings_TVSettings? = nil
    var _tablet: Bloombox_Schema_Partner_Settings_TabletSettings? = nil
    var _integration: Bloombox_Schema_Partner_Integrations_LocationIntegrationSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _api = source._api
      _brands = source._brands
      _publish = source._publish
      _sections = source._sections
      _shop = source._shop
      _tv = source._tv
      _tablet = source._tablet
      _integration = source._integration
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._api)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._brands)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._publish)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._sections)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._shop)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._tv)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._tablet)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._integration)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._api {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._brands {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._publish {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._sections {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._shop {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._tv {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._tablet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._integration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Partner_Settings_PartnerLocationSettings, rhs: Bloombox_Schema_Partner_Settings_PartnerLocationSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._api != rhs_storage._api {return false}
        if _storage._brands != rhs_storage._brands {return false}
        if _storage._publish != rhs_storage._publish {return false}
        if _storage._sections != rhs_storage._sections {return false}
        if _storage._shop != rhs_storage._shop {return false}
        if _storage._tv != rhs_storage._tv {return false}
        if _storage._tablet != rhs_storage._tablet {return false}
        if _storage._integration != rhs_storage._integration {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
