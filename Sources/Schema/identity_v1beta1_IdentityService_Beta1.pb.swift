// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/v1beta1/IdentityService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates error codes that may be emitted by the identity service.
public enum Bloombox_Services_Identity_V1beta1_IdentityError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error occurred.
  case noError // = 0

  /// The subject public key could not be located at the provided fingerprint or key ID.
  case keyNotFound // = 1

  /// The subject public key reference was found to be invalid.
  case keyIDInvalid // = 2

  /// The subject public key registration conflicts with a previous one.
  case keyConflict // = 3

  /// An unidentified internal error occurred.
  case internalError // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .keyNotFound
    case 2: self = .keyIDInvalid
    case 3: self = .keyConflict
    case 99: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .keyNotFound: return 1
    case .keyIDInvalid: return 2
    case .keyConflict: return 3
    case .internalError: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Identity_V1beta1_IdentityError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Identity_V1beta1_IdentityError] = [
    .noError,
    .keyNotFound,
    .keyIDInvalid,
    .keyConflict,
    .internalError,
  ]
}

#endif  // swift(>=4.2)

/// Specifies information about the owner of an arbitrary asymmetric keypair.
public struct Bloombox_Services_Identity_V1beta1_KeyOwnership {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the type of owner that owns this key.
  public var type: Bloombox_Services_Identity_V1beta1_KeyOwnership.OwnerType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Specifies detailed information about the owner of the key.
  public var subject: OneOf_Subject? {
    get {return _storage._subject}
    set {_uniqueStorage()._subject = newValue}
  }

  /// Specifies a key for an individual partner co-located device.
  public var device: Bloombox_Partner_PartnerDeviceKey {
    get {
      if case .device(let v)? = _storage._subject {return v}
      return Bloombox_Partner_PartnerDeviceKey()
    }
    set {_uniqueStorage()._subject = .device(newValue)}
  }

  /// Specifies a key for a user account.
  public var user: Bloombox_Identity_UserKey {
    get {
      if case .user(let v)? = _storage._subject {return v}
      return Bloombox_Identity_UserKey()
    }
    set {_uniqueStorage()._subject = .user(newValue)}
  }

  /// Specifies a key for a given partner organization.
  public var partner: Bloombox_Partner_PartnerKey {
    get {
      if case .partner(let v)? = _storage._subject {return v}
      return Bloombox_Partner_PartnerKey()
    }
    set {_uniqueStorage()._subject = .partner(newValue)}
  }

  /// Specifies a key for a given partner location.
  public var location: Bloombox_Partner_LocationKey {
    get {
      if case .location(let v)? = _storage._subject {return v}
      return Bloombox_Partner_LocationKey()
    }
    set {_uniqueStorage()._subject = .location(newValue)}
  }

  /// Specifies details about an operating node.
  public var node: Bloombox_Ledger_Node {
    get {
      if case .node(let v)? = _storage._subject {return v}
      return Bloombox_Ledger_Node()
    }
    set {_uniqueStorage()._subject = .node(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies detailed information about the owner of the key.
  public enum OneOf_Subject: Equatable {
    /// Specifies a key for an individual partner co-located device.
    case device(Bloombox_Partner_PartnerDeviceKey)
    /// Specifies a key for a user account.
    case user(Bloombox_Identity_UserKey)
    /// Specifies a key for a given partner organization.
    case partner(Bloombox_Partner_PartnerKey)
    /// Specifies a key for a given partner location.
    case location(Bloombox_Partner_LocationKey)
    /// Specifies details about an operating node.
    case node(Bloombox_Ledger_Node)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Services_Identity_V1beta1_KeyOwnership.OneOf_Subject, rhs: Bloombox_Services_Identity_V1beta1_KeyOwnership.OneOf_Subject) -> Bool {
      switch (lhs, rhs) {
      case (.device(let l), .device(let r)): return l == r
      case (.user(let l), .user(let r)): return l == r
      case (.partner(let l), .partner(let r)): return l == r
      case (.location(let l), .location(let r)): return l == r
      case (.node(let l), .node(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Enumerates known key owner types.
  public enum OwnerType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Specifies asymmetric keypairs that identify devices.
    case device // = 0

    /// Specifies asymmetric keypairs that identify compute nodes.
    case node // = 1

    /// Specifies asymmetric keypairs that identify services.
    case service // = 2

    /// Specifies asymmetric keypairs that identify actual persons.
    case user // = 3

    /// Specifies asymmetric keypairs that identify partner organizations.
    case partner // = 4

    /// Specifies asymmetric keypairs that identify partner locations.
    case location // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .device
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .device
      case 1: self = .node
      case 2: self = .service
      case 3: self = .user
      case 4: self = .partner
      case 5: self = .location
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .device: return 0
      case .node: return 1
      case .service: return 2
      case .user: return 3
      case .partner: return 4
      case .location: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Services_Identity_V1beta1_KeyOwnership.OwnerType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Identity_V1beta1_KeyOwnership.OwnerType] = [
    .device,
    .node,
    .service,
    .user,
    .partner,
    .location,
  ]
}

#endif  // swift(>=4.2)

/// Specifies an RPC operation wherein a public key is resolved against a cryptographic fingerprint, or key ID.
public struct Bloombox_Services_Identity_V1beta1_ResolveKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies properties to request information about a public key.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies a key ID to resolve.
    public var keyID: String = String()

    /// Fingerprint to compare with the encoded key. Optional.
    public var fingerprint: Bloombox_Services_Identity_V1beta1_ResolveKey.Request.OneOf_Fingerprint? = nil

    /// MD5 algorithm.
    public var md5: String {
      get {
        if case .md5(let v)? = fingerprint {return v}
        return String()
      }
      set {fingerprint = .md5(newValue)}
    }

    /// SHA1 algorithm.
    public var sha1: String {
      get {
        if case .sha1(let v)? = fingerprint {return v}
        return String()
      }
      set {fingerprint = .sha1(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Fingerprint to compare with the encoded key. Optional.
    public enum OneOf_Fingerprint: Equatable {
      /// MD5 algorithm.
      case md5(String)
      /// SHA1 algorithm.
      case sha1(String)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Identity_V1beta1_ResolveKey.Request.OneOf_Fingerprint, rhs: Bloombox_Services_Identity_V1beta1_ResolveKey.Request.OneOf_Fingerprint) -> Bool {
        switch (lhs, rhs) {
        case (.md5(let l), .md5(let r)): return l == r
        case (.sha1(let l), .sha1(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  /// Response to a request for information about a public key, addressed by its key ID or cryptographic fingerprint.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies information about the public key in question, if it could be located at the provided fingerprint.
    public var publicKey: Opencannabis_Crypto_KeyMaterial {
      get {return _storage._publicKey ?? Opencannabis_Crypto_KeyMaterial()}
      set {_uniqueStorage()._publicKey = newValue}
    }
    /// Returns true if `publicKey` has been explicitly set.
    public var hasPublicKey: Bool {return _storage._publicKey != nil}
    /// Clears the value of `publicKey`. Subsequent reads from it will return its default value.
    public mutating func clearPublicKey() {_uniqueStorage()._publicKey = nil}

    /// Specifies ownership information about the subject public key, if it could be found.
    public var ownership: Bloombox_Services_Identity_V1beta1_KeyOwnership {
      get {return _storage._ownership ?? Bloombox_Services_Identity_V1beta1_KeyOwnership()}
      set {_uniqueStorage()._ownership = newValue}
    }
    /// Returns true if `ownership` has been explicitly set.
    public var hasOwnership: Bool {return _storage._ownership != nil}
    /// Clears the value of `ownership`. Subsequent reads from it will return its default value.
    public mutating func clearOwnership() {_uniqueStorage()._ownership = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.services.identity.v1beta1"

extension Bloombox_Services_Identity_V1beta1_IdentityError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "KEY_NOT_FOUND"),
    2: .same(proto: "KEY_ID_INVALID"),
    3: .same(proto: "KEY_CONFLICT"),
    99: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Bloombox_Services_Identity_V1beta1_KeyOwnership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeyOwnership"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    10: .same(proto: "device"),
    11: .same(proto: "user"),
    12: .same(proto: "partner"),
    13: .same(proto: "location"),
    14: .same(proto: "node"),
  ]

  fileprivate class _StorageClass {
    var _type: Bloombox_Services_Identity_V1beta1_KeyOwnership.OwnerType = .device
    var _subject: Bloombox_Services_Identity_V1beta1_KeyOwnership.OneOf_Subject?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _subject = source._subject
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 10:
          var v: Bloombox_Partner_PartnerDeviceKey?
          if let current = _storage._subject {
            try decoder.handleConflictingOneOf()
            if case .device(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._subject = .device(v)}
        case 11:
          var v: Bloombox_Identity_UserKey?
          if let current = _storage._subject {
            try decoder.handleConflictingOneOf()
            if case .user(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._subject = .user(v)}
        case 12:
          var v: Bloombox_Partner_PartnerKey?
          if let current = _storage._subject {
            try decoder.handleConflictingOneOf()
            if case .partner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._subject = .partner(v)}
        case 13:
          var v: Bloombox_Partner_LocationKey?
          if let current = _storage._subject {
            try decoder.handleConflictingOneOf()
            if case .location(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._subject = .location(v)}
        case 14:
          var v: Bloombox_Ledger_Node?
          if let current = _storage._subject {
            try decoder.handleConflictingOneOf()
            if case .node(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._subject = .node(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .device {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      switch _storage._subject {
      case .device(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .user(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .partner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .location(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .node(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Identity_V1beta1_KeyOwnership, rhs: Bloombox_Services_Identity_V1beta1_KeyOwnership) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._subject != rhs_storage._subject {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Identity_V1beta1_KeyOwnership.OwnerType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEVICE"),
    1: .same(proto: "NODE"),
    2: .same(proto: "SERVICE"),
    3: .same(proto: "USER"),
    4: .same(proto: "PARTNER"),
    5: .same(proto: "LOCATION"),
  ]
}

extension Bloombox_Services_Identity_V1beta1_ResolveKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ResolveKey"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Identity_V1beta1_ResolveKey, rhs: Bloombox_Services_Identity_V1beta1_ResolveKey) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Identity_V1beta1_ResolveKey.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Identity_V1beta1_ResolveKey.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "key_id"),
    10: .same(proto: "md5"),
    11: .same(proto: "sha1"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.keyID)
      case 10:
        if self.fingerprint != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.fingerprint = .md5(v)}
      case 11:
        if self.fingerprint != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.fingerprint = .sha1(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keyID.isEmpty {
      try visitor.visitSingularStringField(value: self.keyID, fieldNumber: 1)
    }
    switch self.fingerprint {
    case .md5(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    case .sha1(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 11)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Identity_V1beta1_ResolveKey.Request, rhs: Bloombox_Services_Identity_V1beta1_ResolveKey.Request) -> Bool {
    if lhs.keyID != rhs.keyID {return false}
    if lhs.fingerprint != rhs.fingerprint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Identity_V1beta1_ResolveKey.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Identity_V1beta1_ResolveKey.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "public_key"),
    2: .same(proto: "ownership"),
  ]

  fileprivate class _StorageClass {
    var _publicKey: Opencannabis_Crypto_KeyMaterial? = nil
    var _ownership: Bloombox_Services_Identity_V1beta1_KeyOwnership? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _publicKey = source._publicKey
      _ownership = source._ownership
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._publicKey)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._ownership)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._publicKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._ownership {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Identity_V1beta1_ResolveKey.Response, rhs: Bloombox_Services_Identity_V1beta1_ResolveKey.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._publicKey != rhs_storage._publicKey {return false}
        if _storage._ownership != rhs_storage._ownership {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
