// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: devices/CloudPrinter.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides a concrete model for a printer device, made available to the cloud (generally via Google Cloud Print).

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates available cloud printer roles.
public enum Bloombox_Devices_CloudPrinterRole: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Generic cloud printer.
  case generic // = 0

  /// Back-office printer, specifically for printing orders.
  case backofficeOrder // = 1

  /// Customer-facing printer.
  case kiosk // = 2

  /// Point-of-sale-attached printer.
  case pos // = 3

  /// Lobby desk printer for check-in tickets.
  case lobbyDesk // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .generic
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .generic
    case 1: self = .backofficeOrder
    case 2: self = .kiosk
    case 3: self = .pos
    case 4: self = .lobbyDesk
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .generic: return 0
    case .backofficeOrder: return 1
    case .kiosk: return 2
    case .pos: return 3
    case .lobbyDesk: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Devices_CloudPrinterRole: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Devices_CloudPrinterRole] = [
    .generic,
    .backofficeOrder,
    .kiosk,
    .pos,
    .lobbyDesk,
  ]
}

#endif  // swift(>=4.2)

/// Settings in Bloombox for a given cloud-connected or managed printer device.
public struct Bloombox_Devices_CloudPrinterSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this device is enabled or not.
  public var enabled: Bool = false

  /// Whether to allow orders to print to this device.
  public var allowDigital: Bool = false

  /// Whether to allow on-site tickets to print to this device.
  public var allowOnsite: Bool = false

  /// Whether to allow check-in tickets to print to this device.
  public var allowCheckin: Bool = false

  /// Role assigned to this printer.
  public var role: Bloombox_Devices_CloudPrinterRole = .generic

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an individual printer made available via Google Cloud Print. This roughly follows the model from Cloud
/// Print. This object adapts the Cloud Print API definitions into a persistable object.
public struct Bloombox_Devices_CloudPrinter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key uniquely identifying this printer.
  public var key: Bloombox_Devices_CloudPrinter.Key {
    get {return _storage._key ?? Bloombox_Devices_CloudPrinter.Key()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Human-friendly label for this printer.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Location key owning this managed printer.
  public var owner: Bloombox_Partner_LocationKey {
    get {return _storage._owner ?? Bloombox_Partner_LocationKey()}
    set {_uniqueStorage()._owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return _storage._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {_uniqueStorage()._owner = nil}

  /// Printer details fetched from Google Cloud Print.
  public var printer: Google_Cloudprint_CloudPrinter {
    get {return _storage._printer ?? Google_Cloudprint_CloudPrinter()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  /// Last-fetched-state for this Google Cloud Print device.
  public var state: Google_Cloudprint_PrinterDescriptionSection {
    get {return _storage._state ?? Google_Cloudprint_PrinterDescriptionSection()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  /// Timestamp indicating when this printer was last used.
  public var lastUsed: Opencannabis_Temporal_Instant {
    get {return _storage._lastUsed ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._lastUsed = newValue}
  }
  /// Returns true if `lastUsed` has been explicitly set.
  public var hasLastUsed: Bool {return _storage._lastUsed != nil}
  /// Clears the value of `lastUsed`. Subsequent reads from it will return its default value.
  public mutating func clearLastUsed() {_uniqueStorage()._lastUsed = nil}

  /// Timestamp indicating when this printer record was last modified.
  public var modified: Opencannabis_Temporal_Instant {
    get {return _storage._modified ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._modified = newValue}
  }
  /// Returns true if `modified` has been explicitly set.
  public var hasModified: Bool {return _storage._modified != nil}
  /// Clears the value of `modified`. Subsequent reads from it will return its default value.
  public mutating func clearModified() {_uniqueStorage()._modified = nil}

  /// Timestamp record indicating when this record was created.
  public var created: Opencannabis_Temporal_Instant {
    get {return _storage._created ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._created = newValue}
  }
  /// Returns true if `created` has been explicitly set.
  public var hasCreated: Bool {return _storage._created != nil}
  /// Clears the value of `created`. Subsequent reads from it will return its default value.
  public mutating func clearCreated() {_uniqueStorage()._created = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Structure that defines a key uniquely identifying a printer managed by Google Cloud Print.
  public struct Key {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Unique ID for this printer device.
    public var printerID: String = String()

    /// Unique UUID provisioned for this printer device.
    public var uuid: String = String()

    /// Proxy ID through which communication with this printer occurs.
    public var proxy: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.devices"

extension Bloombox_Devices_CloudPrinterRole: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC"),
    1: .same(proto: "BACKOFFICE_ORDER"),
    2: .same(proto: "KIOSK"),
    3: .same(proto: "POS"),
    4: .same(proto: "LOBBY_DESK"),
  ]
}

extension Bloombox_Devices_CloudPrinterSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudPrinterSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .standard(proto: "allow_digital"),
    3: .standard(proto: "allow_onsite"),
    4: .standard(proto: "allow_checkin"),
    5: .same(proto: "role"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enabled)
      case 2: try decoder.decodeSingularBoolField(value: &self.allowDigital)
      case 3: try decoder.decodeSingularBoolField(value: &self.allowOnsite)
      case 4: try decoder.decodeSingularBoolField(value: &self.allowCheckin)
      case 5: try decoder.decodeSingularEnumField(value: &self.role)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if self.allowDigital != false {
      try visitor.visitSingularBoolField(value: self.allowDigital, fieldNumber: 2)
    }
    if self.allowOnsite != false {
      try visitor.visitSingularBoolField(value: self.allowOnsite, fieldNumber: 3)
    }
    if self.allowCheckin != false {
      try visitor.visitSingularBoolField(value: self.allowCheckin, fieldNumber: 4)
    }
    if self.role != .generic {
      try visitor.visitSingularEnumField(value: self.role, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Devices_CloudPrinterSettings, rhs: Bloombox_Devices_CloudPrinterSettings) -> Bool {
    if lhs.enabled != rhs.enabled {return false}
    if lhs.allowDigital != rhs.allowDigital {return false}
    if lhs.allowOnsite != rhs.allowOnsite {return false}
    if lhs.allowCheckin != rhs.allowCheckin {return false}
    if lhs.role != rhs.role {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Devices_CloudPrinter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudPrinter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "label"),
    3: .same(proto: "owner"),
    4: .same(proto: "printer"),
    5: .same(proto: "state"),
    97: .standard(proto: "last_used"),
    98: .same(proto: "modified"),
    99: .same(proto: "created"),
  ]

  fileprivate class _StorageClass {
    var _key: Bloombox_Devices_CloudPrinter.Key? = nil
    var _label: String = String()
    var _owner: Bloombox_Partner_LocationKey? = nil
    var _printer: Google_Cloudprint_CloudPrinter? = nil
    var _state: Google_Cloudprint_PrinterDescriptionSection? = nil
    var _lastUsed: Opencannabis_Temporal_Instant? = nil
    var _modified: Opencannabis_Temporal_Instant? = nil
    var _created: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _label = source._label
      _owner = source._owner
      _printer = source._printer
      _state = source._state
      _lastUsed = source._lastUsed
      _modified = source._modified
      _created = source._created
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularStringField(value: &_storage._label)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._owner)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._printer)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 97: try decoder.decodeSingularMessageField(value: &_storage._lastUsed)
        case 98: try decoder.decodeSingularMessageField(value: &_storage._modified)
        case 99: try decoder.decodeSingularMessageField(value: &_storage._created)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 2)
      }
      if let v = _storage._owner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._lastUsed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 97)
      }
      if let v = _storage._modified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 98)
      }
      if let v = _storage._created {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Devices_CloudPrinter, rhs: Bloombox_Devices_CloudPrinter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._printer != rhs_storage._printer {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._lastUsed != rhs_storage._lastUsed {return false}
        if _storage._modified != rhs_storage._modified {return false}
        if _storage._created != rhs_storage._created {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Devices_CloudPrinter.Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Devices_CloudPrinter.protoMessageName + ".Key"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "printer_id"),
    2: .same(proto: "uuid"),
    3: .same(proto: "proxy"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.printerID)
      case 2: try decoder.decodeSingularStringField(value: &self.uuid)
      case 3: try decoder.decodeSingularStringField(value: &self.proxy)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.printerID.isEmpty {
      try visitor.visitSingularStringField(value: self.printerID, fieldNumber: 1)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 2)
    }
    if !self.proxy.isEmpty {
      try visitor.visitSingularStringField(value: self.proxy, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Devices_CloudPrinter.Key, rhs: Bloombox_Devices_CloudPrinter.Key) -> Bool {
    if lhs.printerID != rhs.printerID {return false}
    if lhs.uuid != rhs.uuid {return false}
    if lhs.proxy != rhs.proxy {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
