// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/Edible.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides structures relating to edibles and enumerates various edible flags, and types.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies an ingredient included in an edible.
public struct Opencannabis_Products_EdibleIngredient {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Human-friendly label for the ingredient.
  public var label: String = String()

  /// Human-friendly label describing the amount for this ingredient.
  public var amount: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an edible product that may be consumed as a food or beverage, that contains cannabis or cannabinoids in
/// some quantity.
public struct Opencannabis_Products_Edible {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Product key that uniquely identifies this edible item.
  public var key: Opencannabis_Base_ProductKey {
    get {return _storage._key ?? Opencannabis_Base_ProductKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Specifies the subcategory of this edible product, if known and applicable.
  public var type: Opencannabis_Products_Edible.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Specifies flags attached to this edible product.
  public var flags: [Opencannabis_Products_Edible.Flag] {
    get {return _storage._flags}
    set {_uniqueStorage()._flags = newValue}
  }

  /// Product content related to/about this edible item.
  public var product: Opencannabis_Content_ProductContent {
    get {return _storage._product ?? Opencannabis_Content_ProductContent()}
    set {_uniqueStorage()._product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return _storage._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {_uniqueStorage()._product = nil}

  /// Materials and handling information about this cartridge product.
  public var material: Opencannabis_Content_MaterialsData {
    get {return _storage._material ?? Opencannabis_Content_MaterialsData()}
    set {_uniqueStorage()._material = newValue}
  }
  /// Returns true if `material` has been explicitly set.
  public var hasMaterial: Bool {return _storage._material != nil}
  /// Clears the value of `material`. Subsequent reads from it will return its default value.
  public mutating func clearMaterial() {_uniqueStorage()._material = nil}

  /// Specifies the ingredients for a product, when/if it is composed of ingredients (i.e. edibles).
  public var ingredients: [Opencannabis_Products_EdibleIngredient] {
    get {return _storage._ingredients}
    set {_uniqueStorage()._ingredients = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies types of edible products that are known and considered sub-categories of the full 'edibles' menu section.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unknown, unrecognized, or otherwise unspecified edible type.
    case unspecifiedEdible // = 0

    /// Specifies chocolate products, including truffles, chocolate bars, and so on.
    case chocolate // = 1

    /// Specifies a baked good, such as a cookie, doughnut, brownie, pie, and so on.
    case bakedGood // = 2

    /// Specifies generic candy items not otherwise specified.
    case candy // = 3

    /// Beverage/drink products.
    case beverage // = 4

    /// Lozenge (hardened candy) products.
    case lozenge // = 5

    /// Sub-lingual, i.e. under-the-tongue, products.
    case sublingual // = 6

    /// Soft candies made of congealed sugar product.
    case gummy // = 7

    /// Medicated butter products.
    case butter // = 8

    /// Cooking oil and other edible oils.
    case oils // = 9

    /// Cereals and related breakfast products.
    case cereal // = 10

    /// Capsules, which may also be listed in the "Apothecary" section.
    case capsule // = 11
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedEdible
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedEdible
      case 1: self = .chocolate
      case 2: self = .bakedGood
      case 3: self = .candy
      case 4: self = .beverage
      case 5: self = .lozenge
      case 6: self = .sublingual
      case 7: self = .gummy
      case 8: self = .butter
      case 9: self = .oils
      case 10: self = .cereal
      case 11: self = .capsule
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedEdible: return 0
      case .chocolate: return 1
      case .bakedGood: return 2
      case .candy: return 3
      case .beverage: return 4
      case .lozenge: return 5
      case .sublingual: return 6
      case .gummy: return 7
      case .butter: return 8
      case .oils: return 9
      case .cereal: return 10
      case .capsule: return 11
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Flags that may be applied specifically to an edible product.
  public enum Flag: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Special default flag indicating no flags.
    case noEdibleFlag // = 0

    /// Flag indicating this edible product is vegan.
    case vegan // = 1

    /// Flag indicating this edible product is gluten free.
    case glutenFree // = 2

    /// Flag indicating this edible product is sugar free.
    case sugarFree // = 3

    /// Flag indicating this edible product is compliant with fair trade practices.
    case fairTrade // = 4

    /// Flag indicating this edible product is considered organic.
    case organic // = 5

    /// Flag indicating this edible product was grown or cultivated or prepared locally.
    case local // = 6
    case UNRECOGNIZED(Int)

    public init() {
      self = .noEdibleFlag
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noEdibleFlag
      case 1: self = .vegan
      case 2: self = .glutenFree
      case 3: self = .sugarFree
      case 4: self = .fairTrade
      case 5: self = .organic
      case 6: self = .local
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .noEdibleFlag: return 0
      case .vegan: return 1
      case .glutenFree: return 2
      case .sugarFree: return 3
      case .fairTrade: return 4
      case .organic: return 5
      case .local: return 6
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Opencannabis_Products_Edible.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Products_Edible.TypeEnum] = [
    .unspecifiedEdible,
    .chocolate,
    .bakedGood,
    .candy,
    .beverage,
    .lozenge,
    .sublingual,
    .gummy,
    .butter,
    .oils,
    .cereal,
    .capsule,
  ]
}

extension Opencannabis_Products_Edible.Flag: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Products_Edible.Flag] = [
    .noEdibleFlag,
    .vegan,
    .glutenFree,
    .sugarFree,
    .fairTrade,
    .organic,
    .local,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.products"

extension Opencannabis_Products_EdibleIngredient: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EdibleIngredient"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "label"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.label)
      case 2: try decoder.decodeSingularStringField(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.label.isEmpty {
      try visitor.visitSingularStringField(value: self.label, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitSingularStringField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Products_EdibleIngredient, rhs: Opencannabis_Products_EdibleIngredient) -> Bool {
    if lhs.label != rhs.label {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Edible: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Edible"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "type"),
    3: .same(proto: "flags"),
    4: .same(proto: "product"),
    5: .same(proto: "material"),
    6: .same(proto: "ingredients"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Base_ProductKey? = nil
    var _type: Opencannabis_Products_Edible.TypeEnum = .unspecifiedEdible
    var _flags: [Opencannabis_Products_Edible.Flag] = []
    var _product: Opencannabis_Content_ProductContent? = nil
    var _material: Opencannabis_Content_MaterialsData? = nil
    var _ingredients: [Opencannabis_Products_EdibleIngredient] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _type = source._type
      _flags = source._flags
      _product = source._product
      _material = source._material
      _ingredients = source._ingredients
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeRepeatedEnumField(value: &_storage._flags)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._product)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._material)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._ingredients)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._type != .unspecifiedEdible {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._flags.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._flags, fieldNumber: 3)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._material {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._ingredients.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ingredients, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Products_Edible, rhs: Opencannabis_Products_Edible) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._product != rhs_storage._product {return false}
        if _storage._material != rhs_storage._material {return false}
        if _storage._ingredients != rhs_storage._ingredients {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Edible.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_EDIBLE"),
    1: .same(proto: "CHOCOLATE"),
    2: .same(proto: "BAKED_GOOD"),
    3: .same(proto: "CANDY"),
    4: .same(proto: "BEVERAGE"),
    5: .same(proto: "LOZENGE"),
    6: .same(proto: "SUBLINGUAL"),
    7: .same(proto: "GUMMY"),
    8: .same(proto: "BUTTER"),
    9: .same(proto: "OILS"),
    10: .same(proto: "CEREAL"),
    11: .same(proto: "CAPSULE"),
  ]
}

extension Opencannabis_Products_Edible.Flag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_EDIBLE_FLAG"),
    1: .same(proto: "VEGAN"),
    2: .same(proto: "GLUTEN_FREE"),
    3: .same(proto: "SUGAR_FREE"),
    4: .same(proto: "FAIR_TRADE"),
    5: .same(proto: "ORGANIC"),
    6: .same(proto: "LOCAL"),
  ]
}
