// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: comms/CommsTask.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides structures for asynchronous communication operations.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Send a batch of either SMS or email messages.
public struct Bloombox_Comms_SendOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique ID for this operation.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Channel for which this send operation is operating.
  public var channel: Bloombox_Comms_Channel {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  /// Status for this operation.
  public var status: Bloombox_Comms_SendOperation.Status {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Dry-run debug flag.
  public var dryRun: Bool {
    get {return _storage._dryRun}
    set {_uniqueStorage()._dryRun = newValue}
  }

  /// Operation batch field.
  public var operation: OneOf_Operation? {
    get {return _storage._operation}
    set {_uniqueStorage()._operation = newValue}
  }

  /// Batch of SMS send operations.
  public var sms: Bloombox_Comms_SMSTransmission {
    get {
      if case .sms(let v)? = _storage._operation {return v}
      return Bloombox_Comms_SMSTransmission()
    }
    set {_uniqueStorage()._operation = .sms(newValue)}
  }

  /// Batch of email send operations.
  public var email: Bloombox_Comms_EmailTransmission {
    get {
      if case .email(let v)? = _storage._operation {return v}
      return Bloombox_Comms_EmailTransmission()
    }
    set {_uniqueStorage()._operation = .email(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Operation batch field.
  public enum OneOf_Operation: Equatable {
    /// Batch of SMS send operations.
    case sms(Bloombox_Comms_SMSTransmission)
    /// Batch of email send operations.
    case email(Bloombox_Comms_EmailTransmission)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Comms_SendOperation.OneOf_Operation, rhs: Bloombox_Comms_SendOperation.OneOf_Operation) -> Bool {
      switch (lhs, rhs) {
      case (.sms(let l), .sms(let r)): return l == r
      case (.email(let l), .email(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Statuses that a send operation may assume.
  public enum Status: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// This operation is unfiled, or waiting.
    case pending // = 0

    /// The operation is executing now.
    case sending // = 1

    /// An error occurred that prevented this operation from starting/continuing.
    case error // = 2

    /// The operation is complete.
    case done // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .pending
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .pending
      case 1: self = .sending
      case 2: self = .error
      case 3: self = .done
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .pending: return 0
      case .sending: return 1
      case .error: return 2
      case .done: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Comms_SendOperation.Status: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Comms_SendOperation.Status] = [
    .pending,
    .sending,
    .error,
    .done,
  ]
}

#endif  // swift(>=4.2)

/// Specifies an operation to merge campaign targeting parameters and trigger execution.
public struct Bloombox_Comms_TriggerOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique ID for this campaign execution.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Specifies the partner under which we are performing this operation.
  public var partner: String {
    get {return _storage._partner}
    set {_uniqueStorage()._partner = newValue}
  }

  /// Specifies the location under which we are performing this operation.
  public var location: String {
    get {return _storage._location}
    set {_uniqueStorage()._location = newValue}
  }

  /// Specifies the ID for the campaign that we wish to send.
  public var campaign: String {
    get {return _storage._campaign}
    set {_uniqueStorage()._campaign = newValue}
  }

  /// Timestamp for when this trigger was submitted.
  public var submitted: Opencannabis_Temporal_Instant {
    get {return _storage._submitted ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._submitted = newValue}
  }
  /// Returns true if `submitted` has been explicitly set.
  public var hasSubmitted: Bool {return _storage._submitted != nil}
  /// Clears the value of `submitted`. Subsequent reads from it will return its default value.
  public mutating func clearSubmitted() {_uniqueStorage()._submitted = nil}

  /// Timestamp for the minimum limit for beginning campaign execution.
  public var notBefore: Opencannabis_Temporal_Instant {
    get {return _storage._notBefore ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._notBefore = newValue}
  }
  /// Returns true if `notBefore` has been explicitly set.
  public var hasNotBefore: Bool {return _storage._notBefore != nil}
  /// Clears the value of `notBefore`. Subsequent reads from it will return its default value.
  public mutating func clearNotBefore() {_uniqueStorage()._notBefore = nil}

  /// Communication channels to execute for the subject campaign.
  public var channel: [Bloombox_Comms_Channel] {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  /// Attached/constituent send operations.
  public var op: [Bloombox_Comms_SendOperation] {
    get {return _storage._op}
    set {_uniqueStorage()._op = newValue}
  }

  /// Set to `true` to perform all processing, but send nothing.
  public var dryRun: Bool {
    get {return _storage._dryRun}
    set {_uniqueStorage()._dryRun = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a marketing engine operation, in which a campaign and a set of ad groups are matched to a user's profile,
/// and enqueued for transmission if targeting parameters don't exclude their profile.
public struct Bloombox_Comms_AdEngineOperation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID for the execution run that created this operation.
  public var execution: String {
    get {return _storage._execution}
    set {_uniqueStorage()._execution = newValue}
  }

  /// Campaign that we are executing this operation against, with adgroups included.
  public var campaign: Bloombox_Marketing_Campaign {
    get {return _storage._campaign ?? Bloombox_Marketing_Campaign()}
    set {_uniqueStorage()._campaign = newValue}
  }
  /// Returns true if `campaign` has been explicitly set.
  public var hasCampaign: Bool {return _storage._campaign != nil}
  /// Clears the value of `campaign`. Subsequent reads from it will return its default value.
  public mutating func clearCampaign() {_uniqueStorage()._campaign = nil}

  /// Communication channels to execute for the subject campaign.
  public var channel: [Bloombox_Comms_Channel] {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  /// Membership record for this user at the partner location in question.
  public var membership: Bloombox_Identity_ConsumerMembership {
    get {return _storage._membership ?? Bloombox_Identity_ConsumerMembership()}
    set {_uniqueStorage()._membership = newValue}
  }
  /// Returns true if `membership` has been explicitly set.
  public var hasMembership: Bool {return _storage._membership != nil}
  /// Clears the value of `membership`. Subsequent reads from it will return its default value.
  public mutating func clearMembership() {_uniqueStorage()._membership = nil}

  /// Key for the user's account.
  public var user: Bloombox_Identity_UserKey {
    get {return _storage._user ?? Bloombox_Identity_UserKey()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  /// Timestamp for the minimum limit for beginning campaign execution.
  public var notBefore: Opencannabis_Temporal_Instant {
    get {return _storage._notBefore ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._notBefore = newValue}
  }
  /// Returns true if `notBefore` has been explicitly set.
  public var hasNotBefore: Bool {return _storage._notBefore != nil}
  /// Clears the value of `notBefore`. Subsequent reads from it will return its default value.
  public mutating func clearNotBefore() {_uniqueStorage()._notBefore = nil}

  /// Dry-run debug flag.
  public var dryRun: Bool {
    get {return _storage._dryRun}
    set {_uniqueStorage()._dryRun = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.comms"

extension Bloombox_Comms_SendOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SendOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "channel"),
    3: .same(proto: "status"),
    4: .standard(proto: "dry_run"),
    10: .same(proto: "sms"),
    11: .same(proto: "email"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _channel: Bloombox_Comms_Channel = .unspecified
    var _status: Bloombox_Comms_SendOperation.Status = .pending
    var _dryRun: Bool = false
    var _operation: Bloombox_Comms_SendOperation.OneOf_Operation?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _channel = source._channel
      _status = source._status
      _dryRun = source._dryRun
      _operation = source._operation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._channel)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._dryRun)
        case 10:
          var v: Bloombox_Comms_SMSTransmission?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .sms(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .sms(v)}
        case 11:
          var v: Bloombox_Comms_EmailTransmission?
          if let current = _storage._operation {
            try decoder.handleConflictingOneOf()
            if case .email(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._operation = .email(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if _storage._channel != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._channel, fieldNumber: 2)
      }
      if _storage._status != .pending {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      if _storage._dryRun != false {
        try visitor.visitSingularBoolField(value: _storage._dryRun, fieldNumber: 4)
      }
      switch _storage._operation {
      case .sms(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .email(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Comms_SendOperation, rhs: Bloombox_Comms_SendOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._dryRun != rhs_storage._dryRun {return false}
        if _storage._operation != rhs_storage._operation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Comms_SendOperation.Status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PENDING"),
    1: .same(proto: "SENDING"),
    2: .same(proto: "ERROR"),
    3: .same(proto: "DONE"),
  ]
}

extension Bloombox_Comms_TriggerOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "partner"),
    3: .same(proto: "location"),
    4: .same(proto: "campaign"),
    5: .same(proto: "submitted"),
    6: .standard(proto: "not_before"),
    7: .same(proto: "channel"),
    8: .same(proto: "op"),
    9: .standard(proto: "dry_run"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _partner: String = String()
    var _location: String = String()
    var _campaign: String = String()
    var _submitted: Opencannabis_Temporal_Instant? = nil
    var _notBefore: Opencannabis_Temporal_Instant? = nil
    var _channel: [Bloombox_Comms_Channel] = []
    var _op: [Bloombox_Comms_SendOperation] = []
    var _dryRun: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _partner = source._partner
      _location = source._location
      _campaign = source._campaign
      _submitted = source._submitted
      _notBefore = source._notBefore
      _channel = source._channel
      _op = source._op
      _dryRun = source._dryRun
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularStringField(value: &_storage._partner)
        case 3: try decoder.decodeSingularStringField(value: &_storage._location)
        case 4: try decoder.decodeSingularStringField(value: &_storage._campaign)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._submitted)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._notBefore)
        case 7: try decoder.decodeRepeatedEnumField(value: &_storage._channel)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._op)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._dryRun)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if !_storage._partner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._partner, fieldNumber: 2)
      }
      if !_storage._location.isEmpty {
        try visitor.visitSingularStringField(value: _storage._location, fieldNumber: 3)
      }
      if !_storage._campaign.isEmpty {
        try visitor.visitSingularStringField(value: _storage._campaign, fieldNumber: 4)
      }
      if let v = _storage._submitted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._notBefore {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._channel, fieldNumber: 7)
      }
      if !_storage._op.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._op, fieldNumber: 8)
      }
      if _storage._dryRun != false {
        try visitor.visitSingularBoolField(value: _storage._dryRun, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Comms_TriggerOperation, rhs: Bloombox_Comms_TriggerOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._partner != rhs_storage._partner {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._campaign != rhs_storage._campaign {return false}
        if _storage._submitted != rhs_storage._submitted {return false}
        if _storage._notBefore != rhs_storage._notBefore {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._op != rhs_storage._op {return false}
        if _storage._dryRun != rhs_storage._dryRun {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Comms_AdEngineOperation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AdEngineOperation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "execution"),
    2: .same(proto: "campaign"),
    7: .same(proto: "channel"),
    8: .same(proto: "membership"),
    9: .same(proto: "user"),
    10: .standard(proto: "not_before"),
    11: .standard(proto: "dry_run"),
  ]

  fileprivate class _StorageClass {
    var _execution: String = String()
    var _campaign: Bloombox_Marketing_Campaign? = nil
    var _channel: [Bloombox_Comms_Channel] = []
    var _membership: Bloombox_Identity_ConsumerMembership? = nil
    var _user: Bloombox_Identity_UserKey? = nil
    var _notBefore: Opencannabis_Temporal_Instant? = nil
    var _dryRun: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _execution = source._execution
      _campaign = source._campaign
      _channel = source._channel
      _membership = source._membership
      _user = source._user
      _notBefore = source._notBefore
      _dryRun = source._dryRun
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._execution)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._campaign)
        case 7: try decoder.decodeRepeatedEnumField(value: &_storage._channel)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._membership)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._notBefore)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._dryRun)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._execution.isEmpty {
        try visitor.visitSingularStringField(value: _storage._execution, fieldNumber: 1)
      }
      if let v = _storage._campaign {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._channel, fieldNumber: 7)
      }
      if let v = _storage._membership {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._notBefore {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._dryRun != false {
        try visitor.visitSingularBoolField(value: _storage._dryRun, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Comms_AdEngineOperation, rhs: Bloombox_Comms_AdEngineOperation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._execution != rhs_storage._execution {return false}
        if _storage._campaign != rhs_storage._campaign {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._membership != rhs_storage._membership {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._notBefore != rhs_storage._notBefore {return false}
        if _storage._dryRun != rhs_storage._dryRun {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
