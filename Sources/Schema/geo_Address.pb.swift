// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: geo/Address.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Geo_Address: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Address"

  public var firstLine: String = String()

  public var secondLine: String = String()

  public var city: String = String()

  public var state: String = String()

  public var zipcode: String = String()

  public var country: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.firstLine)
      case 2: try decoder.decodeSingularStringField(value: &self.secondLine)
      case 3: try decoder.decodeSingularStringField(value: &self.city)
      case 4: try decoder.decodeSingularStringField(value: &self.state)
      case 5: try decoder.decodeSingularStringField(value: &self.zipcode)
      case 6: try decoder.decodeSingularStringField(value: &self.country)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.firstLine.isEmpty {
      try visitor.visitSingularStringField(value: self.firstLine, fieldNumber: 1)
    }
    if !self.secondLine.isEmpty {
      try visitor.visitSingularStringField(value: self.secondLine, fieldNumber: 2)
    }
    if !self.city.isEmpty {
      try visitor.visitSingularStringField(value: self.city, fieldNumber: 3)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 4)
    }
    if !self.zipcode.isEmpty {
      try visitor.visitSingularStringField(value: self.zipcode, fieldNumber: 5)
    }
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "geo"

extension Geo_Address: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "first_line"),
    2: .standard(proto: "second_line"),
    3: .same(proto: "city"),
    4: .same(proto: "state"),
    5: .same(proto: "zipcode"),
    6: .same(proto: "country"),
  ]

  public func _protobuf_generated_isEqualTo(other: Geo_Address) -> Bool {
    if self.firstLine != other.firstLine {return false}
    if self.secondLine != other.secondLine {return false}
    if self.city != other.city {return false}
    if self.state != other.state {return false}
    if self.zipcode != other.zipcode {return false}
    if self.country != other.country {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
