// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics/context/OS.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides a structure for for describing the OS of a system, including version and type. Enumerates various OS types.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a device context where code is running natively. This is most applicable to native mobile applications and
/// server applications.
public enum Bloombox_Analytics_Context_OSType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Specifies that the OS is unknown or not applicable in this circumstance.
  case osUnknown // = 0

  /// Specifies that the OS is iOS on an iPhone, iPad or iPod.
  case iOs // = 100

  /// Specifies that the OS is macOS on an Apple Mac desktop or laptop.
  case macOs // = 101

  /// Specifies that the OS is tvOS on an Apple TV device.
  case tvOs // = 102

  /// Specifies that the OS is watchOS running on an Apple Watch.
  case watchOs // = 103

  /// Specifies that the OS is Android on a phone or tablet or other device.
  case android // = 200

  /// Specifies that the OS is Android Wear on some embedded wearable device, like a watch or Google Glass.
  case androidWear // = 201

  /// Specifies that the OS is Windows on a desktop, laptop, or some other device.
  case windows // = 4

  /// Specifies that the OS is Windows, running on a mobile device of some kind.
  case windowsPhone // = 5

  /// Specifies that the OS is some form of Linux.
  case linux // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .osUnknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .osUnknown
    case 4: self = .windows
    case 5: self = .windowsPhone
    case 6: self = .linux
    case 100: self = .iOs
    case 101: self = .macOs
    case 102: self = .tvOs
    case 103: self = .watchOs
    case 200: self = .android
    case 201: self = .androidWear
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .osUnknown: return 0
    case .windows: return 4
    case .windowsPhone: return 5
    case .linux: return 6
    case .iOs: return 100
    case .macOs: return 101
    case .tvOs: return 102
    case .watchOs: return 103
    case .android: return 200
    case .androidWear: return 201
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Analytics_Context_OSType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Analytics_Context_OSType] = [
    .osUnknown,
    .iOs,
    .macOs,
    .tvOs,
    .watchOs,
    .android,
    .androidWear,
    .windows,
    .windowsPhone,
    .linux,
  ]
}

#endif  // swift(>=4.2)

/// Structure describing a device's operating system, including type and version.
public struct Bloombox_Analytics_Context_DeviceOS {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of Operating System being expressed or specified.
  public var type: Bloombox_Analytics_Context_OSType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Version of the OS running on the device.
  public var version: Opencannabis_Structs_VersionSpec {
    get {return _storage._version ?? Opencannabis_Structs_VersionSpec()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  public var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  public mutating func clearVersion() {_uniqueStorage()._version = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.analytics.context"

extension Bloombox_Analytics_Context_OSType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OS_UNKNOWN"),
    4: .same(proto: "WINDOWS"),
    5: .same(proto: "WINDOWS_PHONE"),
    6: .same(proto: "LINUX"),
    100: .same(proto: "iOS"),
    101: .same(proto: "macOS"),
    102: .same(proto: "tvOS"),
    103: .same(proto: "watchOS"),
    200: .same(proto: "ANDROID"),
    201: .same(proto: "ANDROID_WEAR"),
  ]
}

extension Bloombox_Analytics_Context_DeviceOS: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceOS"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _type: Bloombox_Analytics_Context_OSType = .osUnknown
    var _version: Opencannabis_Structs_VersionSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._version)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .osUnknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._version {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Analytics_Context_DeviceOS, rhs: Bloombox_Analytics_Context_DeviceOS) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._version != rhs_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
