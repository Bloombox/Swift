// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: auth/v1beta1/AuthService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known errors that may be thrown by auth operations.
public enum Bloombox_Schema_Services_Auth_V1beta1_AuthError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Enumerates statuses for a user's authorization after an authentication or authorization routine has been performed.
public enum Bloombox_Schema_Services_Auth_V1beta1_AuthStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The user's auth status is currently unknown.
  case unknown // = 0

  /// Access is/was granted to the user.
  case accessGranted // = 1

  /// Access is/was denied to the user.
  case accessDenied // = 2

  /// Access was denied: the user's account is suspended.
  case accountSuspended // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .accessGranted
    case 2: self = .accessDenied
    case 3: self = .accountSuspended
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .accessGranted: return 1
    case .accessDenied: return 2
    case .accountSuspended: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies an RPC operation to retrieve status information for the Auth API.
public struct Bloombox_Schema_Services_Auth_V1beta1_Ping: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Ping"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies an auth ping request.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Auth_V1beta1_Ping.protoMessageName + ".Request"

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let _ = try decoder.nextFieldNumber() {
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies an auth ping response.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Auth_V1beta1_Ping.protoMessageName + ".Response"

    /// Current service status.
    public var status: Bloombox_Schema_Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &self.status)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.status != .unknown {
        try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies an auth ping operation, consisting of one request and one response.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Auth_V1beta1_Ping.protoMessageName + ".Operation"

    /// Request to ping.
    public var request: Bloombox_Schema_Services_Auth_V1beta1_Ping.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Auth_V1beta1_Ping.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to ping.
    public var response: Bloombox_Schema_Services_Auth_V1beta1_Ping.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Auth_V1beta1_Ping.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies a message payload wherein a user is asserting their identity via an email-based username and a regular
/// string password, encoded and potentially encrypted by the frontend agent.
public struct Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".EmailPasswordAssertion"

  /// Email address the user is logging in with.
  public var email: String = String()

  /// User's specified account password. Expressed as a hex-encoded hashed MD5, or at least Base64-encoded when sent in
  /// cleartext, and always over a secure connection.
  public var password: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.email)
      case 2: try decoder.decodeSingularStringField(value: &self.password)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies a message payload containing a Firebase ID token provided during an auth flow on the frontend.
public struct Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FirebaseTokenAssertion"

  /// Firebase identity token.
  public var token: String = String()

  /// User's ID.
  public var uid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.token)
      case 2: try decoder.decodeSingularStringField(value: &self.uid)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.token.isEmpty {
      try visitor.visitSingularStringField(value: self.token, fieldNumber: 1)
    }
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies a generic assertion for account access privileges.
public struct Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AccountAssertion"

  /// Assertion provided by the user, based on their chosen login method.
  public var assertion: OneOf_Assertion? {
    get {return _storage._assertion}
    set {_uniqueStorage()._assertion = newValue}
  }

  /// Email/Password-based account login.
  public var emailPassword: Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion {
    get {
      if case .emailPassword(let v)? = _storage._assertion {return v}
      return Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion()
    }
    set {_uniqueStorage()._assertion = .emailPassword(newValue)}
  }

  /// Firebase account login.
  public var firebase: Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion {
    get {
      if case .firebase(let v)? = _storage._assertion {return v}
      return Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion()
    }
    set {_uniqueStorage()._assertion = .firebase(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Assertion provided by the user, based on their chosen login method.
  public enum OneOf_Assertion: Equatable {
    /// Email/Password-based account login.
    case emailPassword(Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion)
    /// Firebase account login.
    case firebase(Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion)

    public static func ==(lhs: Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion.OneOf_Assertion, rhs: Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion.OneOf_Assertion) -> Bool {
      switch (lhs, rhs) {
      case (.emailPassword(let l), .emailPassword(let r)): return l == r
      case (.firebase(let l), .firebase(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion?
          if let current = _storage._assertion {
            try decoder.handleConflictingOneOf()
            if case .emailPassword(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._assertion = .emailPassword(v)}
        case 2:
          var v: Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion?
          if let current = _storage._assertion {
            try decoder.handleConflictingOneOf()
            if case .firebase(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._assertion = .firebase(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._assertion {
      case .emailPassword(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .firebase(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an RPC operation wherein a user has requested an assertion of their identity be validated by the server.
public struct Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AuthenticateUser"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to authenticate a user.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.protoMessageName + ".Request"

    /// Provider the user would like to login with.
    public var provider: Bloombox_Schema_Identity_IdentityProvider {
      get {return _storage._provider}
      set {_uniqueStorage()._provider = newValue}
    }

    /// Login credentials provided by the user or Firebase.
    public var assertion: Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion {
      get {return _storage._assertion ?? Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion()}
      set {_uniqueStorage()._assertion = newValue}
    }
    /// Returns true if `assertion` has been explicitly set.
    public var hasAssertion: Bool {return _storage._assertion != nil}
    /// Clears the value of `assertion`. Subsequent reads from it will return its default value.
    public mutating func clearAssertion() {_storage._assertion = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularEnumField(value: &_storage._provider)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._assertion)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._provider != .email {
          try visitor.visitSingularEnumField(value: _storage._provider, fieldNumber: 1)
        }
        if let v = _storage._assertion {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to authenticate a user.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.protoMessageName + ".Response"

    /// Resulting status from the user's authentication request.
    public var status: Bloombox_Schema_Services_Auth_V1beta1_AuthStatus = .unknown

    /// Indicates the user's identity ID.
    public var uid: String = String()

    /// Indicates the user's account key.
    public var key: String = String()

    /// Authorized token resulting from the authentication operation.
    public var token: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &self.status)
        case 2: try decoder.decodeSingularStringField(value: &self.uid)
        case 3: try decoder.decodeSingularStringField(value: &self.key)
        case 4: try decoder.decodeSingularStringField(value: &self.token)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.status != .unknown {
        try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
      }
      if !self.uid.isEmpty {
        try visitor.visitSingularStringField(value: self.uid, fieldNumber: 2)
      }
      if !self.key.isEmpty {
        try visitor.visitSingularStringField(value: self.key, fieldNumber: 3)
      }
      if !self.token.isEmpty {
        try visitor.visitSingularStringField(value: self.token, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Operation to authenticate a user, composed of one request and one response.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.protoMessageName + ".Operation"

    /// Request to authenticate a user.
    public var request: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to a request to authenticate a user.
    public var response: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.auth.v1beta1"

extension Bloombox_Schema_Services_Auth_V1beta1_AuthError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
  ]
}

extension Bloombox_Schema_Services_Auth_V1beta1_AuthStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ACCESS_GRANTED"),
    2: .same(proto: "ACCESS_DENIED"),
    3: .same(proto: "ACCOUNT_SUSPENDED"),
  ]
}

extension Bloombox_Schema_Services_Auth_V1beta1_Ping: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_Ping) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_Ping.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_Ping.Request) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_Ping.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_Ping.Response) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_Ping.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Auth_V1beta1_Ping.Request? = nil
    var _response: Bloombox_Schema_Services_Auth_V1beta1_Ping.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_Ping.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "password"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_EmailPasswordAssertion) -> Bool {
    if self.email != other.email {return false}
    if self.password != other.password {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "token"),
    2: .same(proto: "uid"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_FirebaseTokenAssertion) -> Bool {
    if self.token != other.token {return false}
    if self.uid != other.uid {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "email_password"),
    2: .same(proto: "firebase"),
  ]

  fileprivate class _StorageClass {
    var _assertion: Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion.OneOf_Assertion?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _assertion = source._assertion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._assertion != other_storage._assertion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
    2: .same(proto: "assertion"),
  ]

  fileprivate class _StorageClass {
    var _provider: Bloombox_Schema_Identity_IdentityProvider = .email
    var _assertion: Bloombox_Schema_Services_Auth_V1beta1_AccountAssertion? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _provider = source._provider
      _assertion = source._assertion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._provider != other_storage._provider {return false}
        if _storage._assertion != other_storage._assertion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "uid"),
    3: .same(proto: "key"),
    4: .same(proto: "token"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Response) -> Bool {
    if self.status != other.status {return false}
    if self.uid != other.uid {return false}
    if self.key != other.key {return false}
    if self.token != other.token {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Request? = nil
    var _response: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Auth_V1beta1_AuthenticateUser.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
