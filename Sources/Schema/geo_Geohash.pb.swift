// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: geo/Geohash.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines objects in the OpenCannabis Geo module, that provide support for Geo-hashes.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a point or area on earth, in such a manner that a hash algorithm is applied, where digits can be removed to
/// "zoom-out" from the location.
public struct Opencannabis_Geo_Geohash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies geohash components.
  public var component: [String] {
    get {return _storage._component}
    set {_uniqueStorage()._component = newValue}
  }

  /// Elevation of this point, if any.
  public var elevation: Opencannabis_Geo_Distance {
    get {return _storage._elevation ?? Opencannabis_Geo_Distance()}
    set {_uniqueStorage()._elevation = newValue}
  }
  /// Returns true if `elevation` has been explicitly set.
  public var hasElevation: Bool {return _storage._elevation != nil}
  /// Clears the value of `elevation`. Subsequent reads from it will return its default value.
  public mutating func clearElevation() {_uniqueStorage()._elevation = nil}

  /// Accuracy rating attached to this point, if any.
  public var accuracy: Opencannabis_Geo_Distance {
    get {return _storage._accuracy ?? Opencannabis_Geo_Distance()}
    set {_uniqueStorage()._accuracy = newValue}
  }
  /// Returns true if `accuracy` has been explicitly set.
  public var hasAccuracy: Bool {return _storage._accuracy != nil}
  /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
  public mutating func clearAccuracy() {_uniqueStorage()._accuracy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.geo"

extension Opencannabis_Geo_Geohash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Geohash"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "component"),
    2: .same(proto: "elevation"),
    3: .same(proto: "accuracy"),
  ]

  fileprivate class _StorageClass {
    var _component: [String] = []
    var _elevation: Opencannabis_Geo_Distance? = nil
    var _accuracy: Opencannabis_Geo_Distance? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _component = source._component
      _elevation = source._elevation
      _accuracy = source._accuracy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedStringField(value: &_storage._component)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._elevation)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._accuracy)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._component.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._component, fieldNumber: 1)
      }
      if let v = _storage._elevation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._accuracy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Geo_Geohash, rhs: Opencannabis_Geo_Geohash) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._component != rhs_storage._component {return false}
        if _storage._elevation != rhs_storage._elevation {return false}
        if _storage._accuracy != rhs_storage._accuracy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
