// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/labtesting/TestResults.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// -- Testing: Cannabinoids
public enum Opencannabis_Structs_Labtesting_Cannabinoid: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case thc // = 0
  case thcA // = 1
  case thcV // = 2
  case cbd // = 10
  case cbdA // = 11
  case cbdV // = 12
  case cbdVa // = 13
  case cbc // = 20
  case cbg // = 30
  case cbgA // = 31
  case cbn // = 40
  case cbv // = 50
  case cbvA // = 51
  case UNRECOGNIZED(Int)

  public init() {
    self = .thc
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .thc
    case 1: self = .thcA
    case 2: self = .thcV
    case 10: self = .cbd
    case 11: self = .cbdA
    case 12: self = .cbdV
    case 13: self = .cbdVa
    case 20: self = .cbc
    case 30: self = .cbg
    case 31: self = .cbgA
    case 40: self = .cbn
    case 50: self = .cbv
    case 51: self = .cbvA
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .thc: return 0
    case .thcA: return 1
    case .thcV: return 2
    case .cbd: return 10
    case .cbdA: return 11
    case .cbdV: return 12
    case .cbdVa: return 13
    case .cbc: return 20
    case .cbg: return 30
    case .cbgA: return 31
    case .cbn: return 40
    case .cbv: return 50
    case .cbvA: return 51
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Opencannabis_Structs_Labtesting_CannabinoidRatio: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case noCannabinoidPreference // = 0
  case thcOnly // = 1
  case thcOverCbd // = 2
  case equal // = 3
  case cbdOverThc // = 4
  case cbdOnly // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .noCannabinoidPreference
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noCannabinoidPreference
    case 1: self = .thcOnly
    case 2: self = .thcOverCbd
    case 3: self = .equal
    case 4: self = .cbdOverThc
    case 5: self = .cbdOnly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noCannabinoidPreference: return 0
    case .thcOnly: return 1
    case .thcOverCbd: return 2
    case .equal: return 3
    case .cbdOverThc: return 4
    case .cbdOnly: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// -- Testing: Subjective
public enum Opencannabis_Structs_Labtesting_Feeling: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case noFeelingPreference // = 0
  case grounding // = 1
  case sleep // = 2
  case calming // = 3
  case stimulating // = 4
  case funny // = 5
  case focus // = 6
  case passion // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .noFeelingPreference
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noFeelingPreference
    case 1: self = .grounding
    case 2: self = .sleep
    case 3: self = .calming
    case 4: self = .stimulating
    case 5: self = .funny
    case 6: self = .focus
    case 7: self = .passion
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noFeelingPreference: return 0
    case .grounding: return 1
    case .sleep: return 2
    case .calming: return 3
    case .stimulating: return 4
    case .funny: return 5
    case .focus: return 6
    case .passion: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Opencannabis_Structs_Labtesting_TasteNote: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case noTastePreference // = 0
  case sweet // = 1
  case sour // = 2
  case spice // = 3
  case smooth // = 4
  case citrus // = 5
  case pine // = 6
  case fruit // = 7
  case tropics // = 8
  case floral // = 9
  case herb // = 10
  case earth // = 11
  case UNRECOGNIZED(Int)

  public init() {
    self = .noTastePreference
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noTastePreference
    case 1: self = .sweet
    case 2: self = .sour
    case 3: self = .spice
    case 4: self = .smooth
    case 5: self = .citrus
    case 6: self = .pine
    case 7: self = .fruit
    case 8: self = .tropics
    case 9: self = .floral
    case 10: self = .herb
    case 11: self = .earth
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noTastePreference: return 0
    case .sweet: return 1
    case .sour: return 2
    case .spice: return 3
    case .smooth: return 4
    case .citrus: return 5
    case .pine: return 6
    case .fruit: return 7
    case .tropics: return 8
    case .floral: return 9
    case .herb: return 10
    case .earth: return 11
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum Opencannabis_Structs_Labtesting_PotencyEstimate: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case light // = 0
  case medium // = 1
  case heavy // = 2
  case `super` // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .light
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .light
    case 1: self = .medium
    case 2: self = .heavy
    case 3: self = .super
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .light: return 0
    case .medium: return 1
    case .heavy: return 2
    case .super: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// -- Testing: Terpenes
public enum Opencannabis_Structs_Labtesting_Terpene: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case camphene // = 0
  case carene // = 1
  case betaCaryophyllene // = 2
  case caryophylleneOxide // = 3
  case eucalyptol // = 4
  case fenchol // = 5
  case alphaHumulene // = 6
  case limonene // = 7
  case linalool // = 8
  case myrcene // = 9
  case alphaOcimene // = 10
  case betaOcimene // = 11
  case alphaPhellandrene // = 12
  case alphaPinene // = 13
  case betaPinene // = 14
  case alphaTerpineol // = 15
  case alphaTerpinine // = 16
  case gammaTerpinine // = 17
  case terpinolene // = 18
  case UNRECOGNIZED(Int)

  public init() {
    self = .camphene
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .camphene
    case 1: self = .carene
    case 2: self = .betaCaryophyllene
    case 3: self = .caryophylleneOxide
    case 4: self = .eucalyptol
    case 5: self = .fenchol
    case 6: self = .alphaHumulene
    case 7: self = .limonene
    case 8: self = .linalool
    case 9: self = .myrcene
    case 10: self = .alphaOcimene
    case 11: self = .betaOcimene
    case 12: self = .alphaPhellandrene
    case 13: self = .alphaPinene
    case 14: self = .betaPinene
    case 15: self = .alphaTerpineol
    case 16: self = .alphaTerpinine
    case 17: self = .gammaTerpinine
    case 18: self = .terpinolene
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .camphene: return 0
    case .carene: return 1
    case .betaCaryophyllene: return 2
    case .caryophylleneOxide: return 3
    case .eucalyptol: return 4
    case .fenchol: return 5
    case .alphaHumulene: return 6
    case .limonene: return 7
    case .linalool: return 8
    case .myrcene: return 9
    case .alphaOcimene: return 10
    case .betaOcimene: return 11
    case .alphaPhellandrene: return 12
    case .alphaPinene: return 13
    case .betaPinene: return 14
    case .alphaTerpineol: return 15
    case .alphaTerpinine: return 16
    case .gammaTerpinine: return 17
    case .terpinolene: return 18
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// -- Testing: Full Protocol
public struct Opencannabis_Structs_Labtesting_TestResults: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TestResults"

  public var available: Bool {
    get {return _storage._available}
    set {_uniqueStorage()._available = newValue}
  }

  public var media: [Opencannabis_Structs_Labtesting_TestMedia] {
    get {return _storage._media}
    set {_uniqueStorage()._media = newValue}
  }

  public var lastUpdated: Opencannabis_Temporal_Instant {
    get {return _storage._lastUpdated ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._lastUpdated = newValue}
  }
  /// Returns true if `lastUpdated` has been explicitly set.
  public var hasLastUpdated: Bool {return _storage._lastUpdated != nil}
  /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
  public mutating func clearLastUpdated() {_storage._lastUpdated = nil}

  /// --- Testing Extensions
  public var cannabinoids: Opencannabis_Structs_Labtesting_Cannabinoids {
    get {return _storage._cannabinoids ?? Opencannabis_Structs_Labtesting_Cannabinoids()}
    set {_uniqueStorage()._cannabinoids = newValue}
  }
  /// Returns true if `cannabinoids` has been explicitly set.
  public var hasCannabinoids: Bool {return _storage._cannabinoids != nil}
  /// Clears the value of `cannabinoids`. Subsequent reads from it will return its default value.
  public mutating func clearCannabinoids() {_storage._cannabinoids = nil}

  public var terpenes: Opencannabis_Structs_Labtesting_Terpenes {
    get {return _storage._terpenes ?? Opencannabis_Structs_Labtesting_Terpenes()}
    set {_uniqueStorage()._terpenes = newValue}
  }
  /// Returns true if `terpenes` has been explicitly set.
  public var hasTerpenes: Bool {return _storage._terpenes != nil}
  /// Clears the value of `terpenes`. Subsequent reads from it will return its default value.
  public mutating func clearTerpenes() {_storage._terpenes = nil}

  public var pesticides: Opencannabis_Structs_Labtesting_Pesticides {
    get {return _storage._pesticides ?? Opencannabis_Structs_Labtesting_Pesticides()}
    set {_uniqueStorage()._pesticides = newValue}
  }
  /// Returns true if `pesticides` has been explicitly set.
  public var hasPesticides: Bool {return _storage._pesticides != nil}
  /// Clears the value of `pesticides`. Subsequent reads from it will return its default value.
  public mutating func clearPesticides() {_storage._pesticides = nil}

  public var moisture: Opencannabis_Structs_Labtesting_Moisture {
    get {return _storage._moisture ?? Opencannabis_Structs_Labtesting_Moisture()}
    set {_uniqueStorage()._moisture = newValue}
  }
  /// Returns true if `moisture` has been explicitly set.
  public var hasMoisture: Bool {return _storage._moisture != nil}
  /// Clears the value of `moisture`. Subsequent reads from it will return its default value.
  public mutating func clearMoisture() {_storage._moisture = nil}

  public var aroma: [Opencannabis_Structs_Labtesting_TasteNote] {
    get {return _storage._aroma}
    set {_uniqueStorage()._aroma = newValue}
  }

  public var subjective: Opencannabis_Structs_Labtesting_Subjective {
    get {return _storage._subjective ?? Opencannabis_Structs_Labtesting_Subjective()}
    set {_uniqueStorage()._subjective = newValue}
  }
  /// Returns true if `subjective` has been explicitly set.
  public var hasSubjective: Bool {return _storage._subjective != nil}
  /// Clears the value of `subjective`. Subsequent reads from it will return its default value.
  public mutating func clearSubjective() {_storage._subjective = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._available)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._media)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._lastUpdated)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._cannabinoids)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._terpenes)
        case 32: try decoder.decodeSingularMessageField(value: &_storage._pesticides)
        case 33: try decoder.decodeSingularMessageField(value: &_storage._moisture)
        case 34: try decoder.decodeRepeatedEnumField(value: &_storage._aroma)
        case 35: try decoder.decodeSingularMessageField(value: &_storage._subjective)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._available != false {
        try visitor.visitSingularBoolField(value: _storage._available, fieldNumber: 1)
      }
      if !_storage._media.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._media, fieldNumber: 2)
      }
      if let v = _storage._lastUpdated {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._cannabinoids {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._terpenes {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if let v = _storage._pesticides {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      }
      if let v = _storage._moisture {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      }
      if !_storage._aroma.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._aroma, fieldNumber: 34)
      }
      if let v = _storage._subjective {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Opencannabis_Structs_Labtesting_Cannabinoids: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Cannabinoids"

  public var thc: Opencannabis_Structs_Labtesting_TestValue {
    get {return _storage._thc ?? Opencannabis_Structs_Labtesting_TestValue()}
    set {_uniqueStorage()._thc = newValue}
  }
  /// Returns true if `thc` has been explicitly set.
  public var hasThc: Bool {return _storage._thc != nil}
  /// Clears the value of `thc`. Subsequent reads from it will return its default value.
  public mutating func clearThc() {_storage._thc = nil}

  public var cbd: Opencannabis_Structs_Labtesting_TestValue {
    get {return _storage._cbd ?? Opencannabis_Structs_Labtesting_TestValue()}
    set {_uniqueStorage()._cbd = newValue}
  }
  /// Returns true if `cbd` has been explicitly set.
  public var hasCbd: Bool {return _storage._cbd != nil}
  /// Clears the value of `cbd`. Subsequent reads from it will return its default value.
  public mutating func clearCbd() {_storage._cbd = nil}

  public var results: [Opencannabis_Structs_Labtesting_Cannabinoids.Result] {
    get {return _storage._results}
    set {_uniqueStorage()._results = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Result: SwiftProtobuf.Message {
    public static let protoMessageName: String = Opencannabis_Structs_Labtesting_Cannabinoids.protoMessageName + ".Result"

    public var cannabinoid: Opencannabis_Structs_Labtesting_Cannabinoid {
      get {return _storage._cannabinoid}
      set {_uniqueStorage()._cannabinoid = newValue}
    }

    public var ratio: Opencannabis_Structs_Labtesting_CannabinoidRatio {
      get {return _storage._ratio}
      set {_uniqueStorage()._ratio = newValue}
    }

    public var measurement: Opencannabis_Structs_Labtesting_TestValue {
      get {return _storage._measurement ?? Opencannabis_Structs_Labtesting_TestValue()}
      set {_uniqueStorage()._measurement = newValue}
    }
    /// Returns true if `measurement` has been explicitly set.
    public var hasMeasurement: Bool {return _storage._measurement != nil}
    /// Clears the value of `measurement`. Subsequent reads from it will return its default value.
    public mutating func clearMeasurement() {_storage._measurement = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularEnumField(value: &_storage._cannabinoid)
          case 2: try decoder.decodeSingularEnumField(value: &_storage._ratio)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._measurement)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._cannabinoid != .thc {
          try visitor.visitSingularEnumField(value: _storage._cannabinoid, fieldNumber: 1)
        }
        if _storage._ratio != .noCannabinoidPreference {
          try visitor.visitSingularEnumField(value: _storage._ratio, fieldNumber: 2)
        }
        if let v = _storage._measurement {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._thc)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._cbd)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._results)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._thc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._cbd {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._results.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._results, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Opencannabis_Structs_Labtesting_Subjective: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Subjective"

  public var description_p: Opencannabis_Content_Content {
    get {return _storage._description_p ?? Opencannabis_Content_Content()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  public var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  public mutating func clearDescription_p() {_storage._description_p = nil}

  public var taste: Opencannabis_Content_Content {
    get {return _storage._taste ?? Opencannabis_Content_Content()}
    set {_uniqueStorage()._taste = newValue}
  }
  /// Returns true if `taste` has been explicitly set.
  public var hasTaste: Bool {return _storage._taste != nil}
  /// Clears the value of `taste`. Subsequent reads from it will return its default value.
  public mutating func clearTaste() {_storage._taste = nil}

  public var potency: Opencannabis_Structs_Labtesting_PotencyEstimate {
    get {return _storage._potency}
    set {_uniqueStorage()._potency = newValue}
  }

  public var feelingTags: [Opencannabis_Structs_Labtesting_Feeling] {
    get {return _storage._feelingTags}
    set {_uniqueStorage()._feelingTags = newValue}
  }

  public var tastingNotes: [Opencannabis_Structs_Labtesting_TasteNote] {
    get {return _storage._tastingNotes}
    set {_uniqueStorage()._tastingNotes = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._taste)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._potency)
        case 4: try decoder.decodeRepeatedEnumField(value: &_storage._feelingTags)
        case 5: try decoder.decodeRepeatedEnumField(value: &_storage._tastingNotes)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._taste {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._potency != .light {
        try visitor.visitSingularEnumField(value: _storage._potency, fieldNumber: 3)
      }
      if !_storage._feelingTags.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._feelingTags, fieldNumber: 4)
      }
      if !_storage._tastingNotes.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._tastingNotes, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Opencannabis_Structs_Labtesting_Terpenes: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Terpenes"

  public var available: Bool = false

  public var terpenes: [Opencannabis_Structs_Labtesting_Terpenes.Result] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Result: SwiftProtobuf.Message {
    public static let protoMessageName: String = Opencannabis_Structs_Labtesting_Terpenes.protoMessageName + ".Result"

    public var terpene: Opencannabis_Structs_Labtesting_Terpene {
      get {return _storage._terpene}
      set {_uniqueStorage()._terpene = newValue}
    }

    public var measurement: Opencannabis_Structs_Labtesting_TestValue {
      get {return _storage._measurement ?? Opencannabis_Structs_Labtesting_TestValue()}
      set {_uniqueStorage()._measurement = newValue}
    }
    /// Returns true if `measurement` has been explicitly set.
    public var hasMeasurement: Bool {return _storage._measurement != nil}
    /// Clears the value of `measurement`. Subsequent reads from it will return its default value.
    public mutating func clearMeasurement() {_storage._measurement = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularEnumField(value: &_storage._terpene)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._measurement)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if _storage._terpene != .camphene {
          try visitor.visitSingularEnumField(value: _storage._terpene, fieldNumber: 1)
        }
        if let v = _storage._measurement {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.available)
      case 10: try decoder.decodeRepeatedMessageField(value: &self.terpenes)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.available != false {
      try visitor.visitSingularBoolField(value: self.available, fieldNumber: 1)
    }
    if !self.terpenes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.terpenes, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// -- Testing: Pesticides
public struct Opencannabis_Structs_Labtesting_Pesticides: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Pesticides"

  public var pesticideFree: Bool = false

  public var measurements: Dictionary<String,Opencannabis_Structs_Labtesting_TestValue> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.pesticideFree)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Opencannabis_Structs_Labtesting_TestValue>.self, value: &self.measurements)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.pesticideFree != false {
      try visitor.visitSingularBoolField(value: self.pesticideFree, fieldNumber: 1)
    }
    if !self.measurements.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Opencannabis_Structs_Labtesting_TestValue>.self, value: self.measurements, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// -- Testing: Moisture
public struct Opencannabis_Structs_Labtesting_Moisture: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Moisture"

  public var measurement: Opencannabis_Structs_Labtesting_TestValue {
    get {return _storage._measurement ?? Opencannabis_Structs_Labtesting_TestValue()}
    set {_uniqueStorage()._measurement = newValue}
  }
  /// Returns true if `measurement` has been explicitly set.
  public var hasMeasurement: Bool {return _storage._measurement != nil}
  /// Clears the value of `measurement`. Subsequent reads from it will return its default value.
  public mutating func clearMeasurement() {_storage._measurement = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._measurement)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._measurement {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.structs.labtesting"

extension Opencannabis_Structs_Labtesting_Cannabinoid: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "THC"),
    1: .same(proto: "THC_A"),
    2: .same(proto: "THC_V"),
    10: .same(proto: "CBD"),
    11: .same(proto: "CBD_A"),
    12: .same(proto: "CBD_V"),
    13: .same(proto: "CBD_VA"),
    20: .same(proto: "CBC"),
    30: .same(proto: "CBG"),
    31: .same(proto: "CBG_A"),
    40: .same(proto: "CBN"),
    50: .same(proto: "CBV"),
    51: .same(proto: "CBV_A"),
  ]
}

extension Opencannabis_Structs_Labtesting_CannabinoidRatio: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_CANNABINOID_PREFERENCE"),
    1: .same(proto: "THC_ONLY"),
    2: .same(proto: "THC_OVER_CBD"),
    3: .same(proto: "EQUAL"),
    4: .same(proto: "CBD_OVER_THC"),
    5: .same(proto: "CBD_ONLY"),
  ]
}

extension Opencannabis_Structs_Labtesting_Feeling: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_FEELING_PREFERENCE"),
    1: .same(proto: "GROUNDING"),
    2: .same(proto: "SLEEP"),
    3: .same(proto: "CALMING"),
    4: .same(proto: "STIMULATING"),
    5: .same(proto: "FUNNY"),
    6: .same(proto: "FOCUS"),
    7: .same(proto: "PASSION"),
  ]
}

extension Opencannabis_Structs_Labtesting_TasteNote: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_TASTE_PREFERENCE"),
    1: .same(proto: "SWEET"),
    2: .same(proto: "SOUR"),
    3: .same(proto: "SPICE"),
    4: .same(proto: "SMOOTH"),
    5: .same(proto: "CITRUS"),
    6: .same(proto: "PINE"),
    7: .same(proto: "FRUIT"),
    8: .same(proto: "TROPICS"),
    9: .same(proto: "FLORAL"),
    10: .same(proto: "HERB"),
    11: .same(proto: "EARTH"),
  ]
}

extension Opencannabis_Structs_Labtesting_PotencyEstimate: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LIGHT"),
    1: .same(proto: "MEDIUM"),
    2: .same(proto: "HEAVY"),
    3: .same(proto: "SUPER"),
  ]
}

extension Opencannabis_Structs_Labtesting_Terpene: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CAMPHENE"),
    1: .same(proto: "CARENE"),
    2: .same(proto: "BETA_CARYOPHYLLENE"),
    3: .same(proto: "CARYOPHYLLENE_OXIDE"),
    4: .same(proto: "EUCALYPTOL"),
    5: .same(proto: "FENCHOL"),
    6: .same(proto: "ALPHA_HUMULENE"),
    7: .same(proto: "LIMONENE"),
    8: .same(proto: "LINALOOL"),
    9: .same(proto: "MYRCENE"),
    10: .same(proto: "ALPHA_OCIMENE"),
    11: .same(proto: "BETA_OCIMENE"),
    12: .same(proto: "ALPHA_PHELLANDRENE"),
    13: .same(proto: "ALPHA_PINENE"),
    14: .same(proto: "BETA_PINENE"),
    15: .same(proto: "ALPHA_TERPINEOL"),
    16: .same(proto: "ALPHA_TERPININE"),
    17: .same(proto: "GAMMA_TERPININE"),
    18: .same(proto: "TERPINOLENE"),
  ]
}

extension Opencannabis_Structs_Labtesting_TestResults: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "available"),
    2: .same(proto: "media"),
    3: .standard(proto: "last_updated"),
    30: .same(proto: "cannabinoids"),
    31: .same(proto: "terpenes"),
    32: .same(proto: "pesticides"),
    33: .same(proto: "moisture"),
    34: .same(proto: "aroma"),
    35: .same(proto: "subjective"),
  ]

  fileprivate class _StorageClass {
    var _available: Bool = false
    var _media: [Opencannabis_Structs_Labtesting_TestMedia] = []
    var _lastUpdated: Opencannabis_Temporal_Instant? = nil
    var _cannabinoids: Opencannabis_Structs_Labtesting_Cannabinoids? = nil
    var _terpenes: Opencannabis_Structs_Labtesting_Terpenes? = nil
    var _pesticides: Opencannabis_Structs_Labtesting_Pesticides? = nil
    var _moisture: Opencannabis_Structs_Labtesting_Moisture? = nil
    var _aroma: [Opencannabis_Structs_Labtesting_TasteNote] = []
    var _subjective: Opencannabis_Structs_Labtesting_Subjective? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _available = source._available
      _media = source._media
      _lastUpdated = source._lastUpdated
      _cannabinoids = source._cannabinoids
      _terpenes = source._terpenes
      _pesticides = source._pesticides
      _moisture = source._moisture
      _aroma = source._aroma
      _subjective = source._subjective
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_TestResults) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._available != other_storage._available {return false}
        if _storage._media != other_storage._media {return false}
        if _storage._lastUpdated != other_storage._lastUpdated {return false}
        if _storage._cannabinoids != other_storage._cannabinoids {return false}
        if _storage._terpenes != other_storage._terpenes {return false}
        if _storage._pesticides != other_storage._pesticides {return false}
        if _storage._moisture != other_storage._moisture {return false}
        if _storage._aroma != other_storage._aroma {return false}
        if _storage._subjective != other_storage._subjective {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Cannabinoids: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "thc"),
    2: .same(proto: "cbd"),
    3: .same(proto: "results"),
  ]

  fileprivate class _StorageClass {
    var _thc: Opencannabis_Structs_Labtesting_TestValue? = nil
    var _cbd: Opencannabis_Structs_Labtesting_TestValue? = nil
    var _results: [Opencannabis_Structs_Labtesting_Cannabinoids.Result] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _thc = source._thc
      _cbd = source._cbd
      _results = source._results
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Cannabinoids) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._thc != other_storage._thc {return false}
        if _storage._cbd != other_storage._cbd {return false}
        if _storage._results != other_storage._results {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Cannabinoids.Result: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cannabinoid"),
    2: .same(proto: "ratio"),
    3: .same(proto: "measurement"),
  ]

  fileprivate class _StorageClass {
    var _cannabinoid: Opencannabis_Structs_Labtesting_Cannabinoid = .thc
    var _ratio: Opencannabis_Structs_Labtesting_CannabinoidRatio = .noCannabinoidPreference
    var _measurement: Opencannabis_Structs_Labtesting_TestValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cannabinoid = source._cannabinoid
      _ratio = source._ratio
      _measurement = source._measurement
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Cannabinoids.Result) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._cannabinoid != other_storage._cannabinoid {return false}
        if _storage._ratio != other_storage._ratio {return false}
        if _storage._measurement != other_storage._measurement {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Subjective: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "taste"),
    3: .same(proto: "potency"),
    4: .standard(proto: "feeling_tags"),
    5: .standard(proto: "tasting_notes"),
  ]

  fileprivate class _StorageClass {
    var _description_p: Opencannabis_Content_Content? = nil
    var _taste: Opencannabis_Content_Content? = nil
    var _potency: Opencannabis_Structs_Labtesting_PotencyEstimate = .light
    var _feelingTags: [Opencannabis_Structs_Labtesting_Feeling] = []
    var _tastingNotes: [Opencannabis_Structs_Labtesting_TasteNote] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _taste = source._taste
      _potency = source._potency
      _feelingTags = source._feelingTags
      _tastingNotes = source._tastingNotes
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Subjective) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._taste != other_storage._taste {return false}
        if _storage._potency != other_storage._potency {return false}
        if _storage._feelingTags != other_storage._feelingTags {return false}
        if _storage._tastingNotes != other_storage._tastingNotes {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Terpenes: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "available"),
    10: .same(proto: "terpenes"),
  ]

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Terpenes) -> Bool {
    if self.available != other.available {return false}
    if self.terpenes != other.terpenes {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Terpenes.Result: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "terpene"),
    2: .same(proto: "measurement"),
  ]

  fileprivate class _StorageClass {
    var _terpene: Opencannabis_Structs_Labtesting_Terpene = .camphene
    var _measurement: Opencannabis_Structs_Labtesting_TestValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _terpene = source._terpene
      _measurement = source._measurement
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Terpenes.Result) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._terpene != other_storage._terpene {return false}
        if _storage._measurement != other_storage._measurement {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Pesticides: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pesticide_free"),
    2: .same(proto: "measurements"),
  ]

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Pesticides) -> Bool {
    if self.pesticideFree != other.pesticideFree {return false}
    if self.measurements != other.measurements {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Structs_Labtesting_Moisture: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "measurement"),
  ]

  fileprivate class _StorageClass {
    var _measurement: Opencannabis_Structs_Labtesting_TestValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _measurement = source._measurement
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Structs_Labtesting_Moisture) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._measurement != other_storage._measurement {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
