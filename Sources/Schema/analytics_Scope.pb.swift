// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics/Scope.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies scope options applied to an event, including its "partner scope," (or the partner/location/device under
/// which the event was logged), and its "commercial scope," (indicating the section/item/order involved in an event
/// transaction), among others.
public struct Bloombox_Analytics_Scope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Partner scope. Specifies, each-if-applicable and only in the following order-of-scope, the partner code, location
  /// code, and partner co-located device UUID that reported an event.
  public var partner: String = String()

  /// Commercial scope. Specifies, each-if-applicable and only in the following order-of-scope, menu section name and
  /// product key.
  public var commercial: String = String()

  /// Order scope. Specifies, only if there is an active order, the order ID that was active when the event was sent.
  public var order: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.analytics"

extension Bloombox_Analytics_Scope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Scope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "commercial"),
    3: .same(proto: "order"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.commercial)
      case 3: try decoder.decodeSingularStringField(value: &self.order)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.commercial.isEmpty {
      try visitor.visitSingularStringField(value: self.commercial, fieldNumber: 2)
    }
    if !self.order.isEmpty {
      try visitor.visitSingularStringField(value: self.order, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Analytics_Scope, rhs: Bloombox_Analytics_Scope) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.commercial != rhs.commercial {return false}
    if lhs.order != rhs.order {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
