// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: pos/v1beta1/POSService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines the Point of Sale API, which provides supporting functionality to hardware POS devices that are co-located at
/// partner locations.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates error states that may be served from the POS service.
public enum Bloombox_Schema_Services_Pos_V1beta1_POSError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// An unknown internal error occurred.
  case noError // = 0

  /// The partner code was missing or found to be invalid.
  case invalidPartner // = 1

  /// The location code was missing or found to be invalid.
  case invalidLocation // = 2

  /// The device key was missing or found to be invalid.
  case invalidDevice // = 3

  /// The specified ID token was invalid or missing.
  case invalidIDToken // = 4

  /// The device's signature was invalid or missing.
  case invalidDeviceSignature // = 5

  /// Invalid purchase payload.
  case invalidTicket // = 6

  /// Invalid purchase key.
  case invalidTicketKey // = 7

  /// Purchase signature could not be validated.
  case invalidTicketSignature // = 8

  /// An invalid timestamp was provided.
  case invalidTimestamp // = 9

  /// Unable to locate the specified device.
  case deviceNotFound // = 10

  /// Unable to locate the specified session.
  case sessionNotFound // = 11

  /// Specifies an illegal session state.
  case sessionConflict // = 12

  /// The given purchase was structurally invalid.
  case illegalTicketStructure // = 20

  /// The specified ticket version is out of date or invalid.
  case illegalTicketVersion // = 21

  /// The provided timestamp occurs before the last known event.
  case illegalTimestamp // = 22

  /// Purchase could not be found.
  case ticketNotFound // = 30

  /// There was a conflict preventing the ticket operation.
  case ticketConflict // = 31

  /// The ticket in question is currently claimed and cannot be claimed again until closed.
  case ticketClaimed // = 32

  /// Generic invalid request.
  case invalidRequest // = 96

  /// Access was denied due to authorization failure.
  case authorizationDenied // = 97

  /// Access cannot be granted due to a conflict.
  case accessConflict // = 98

  /// An internal error occurred.
  case internalError // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .invalidPartner
    case 2: self = .invalidLocation
    case 3: self = .invalidDevice
    case 4: self = .invalidIDToken
    case 5: self = .invalidDeviceSignature
    case 6: self = .invalidTicket
    case 7: self = .invalidTicketKey
    case 8: self = .invalidTicketSignature
    case 9: self = .invalidTimestamp
    case 10: self = .deviceNotFound
    case 11: self = .sessionNotFound
    case 12: self = .sessionConflict
    case 20: self = .illegalTicketStructure
    case 21: self = .illegalTicketVersion
    case 22: self = .illegalTimestamp
    case 30: self = .ticketNotFound
    case 31: self = .ticketConflict
    case 32: self = .ticketClaimed
    case 96: self = .invalidRequest
    case 97: self = .authorizationDenied
    case 98: self = .accessConflict
    case 99: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .invalidPartner: return 1
    case .invalidLocation: return 2
    case .invalidDevice: return 3
    case .invalidIDToken: return 4
    case .invalidDeviceSignature: return 5
    case .invalidTicket: return 6
    case .invalidTicketKey: return 7
    case .invalidTicketSignature: return 8
    case .invalidTimestamp: return 9
    case .deviceNotFound: return 10
    case .sessionNotFound: return 11
    case .sessionConflict: return 12
    case .illegalTicketStructure: return 20
    case .illegalTicketVersion: return 21
    case .illegalTimestamp: return 22
    case .ticketNotFound: return 30
    case .ticketConflict: return 31
    case .ticketClaimed: return 32
    case .invalidRequest: return 96
    case .authorizationDenied: return 97
    case .accessConflict: return 98
    case .internalError: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Services_Pos_V1beta1_POSError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Services_Pos_V1beta1_POSError] = [
    .noError,
    .invalidPartner,
    .invalidLocation,
    .invalidDevice,
    .invalidIDToken,
    .invalidDeviceSignature,
    .invalidTicket,
    .invalidTicketKey,
    .invalidTicketSignature,
    .invalidTimestamp,
    .deviceNotFound,
    .sessionNotFound,
    .sessionConflict,
    .illegalTicketStructure,
    .illegalTicketVersion,
    .illegalTimestamp,
    .ticketNotFound,
    .ticketConflict,
    .ticketClaimed,
    .invalidRequest,
    .authorizationDenied,
    .accessConflict,
    .internalError,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates types of events for a live inventory connection.
public enum Bloombox_Schema_Services_Pos_V1beta1_InventoryStreamEvent: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Ping (when sent from the client) and pong (when replied from the server).
  case pingPong // = 0

  /// Indicate that the client's dataset is up to date.
  case noChange // = 1

  /// Indicate that an update to stock status has occurred.
  case update // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .pingPong
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pingPong
    case 1: self = .noChange
    case 2: self = .update
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pingPong: return 0
    case .noChange: return 1
    case .update: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryStreamEvent: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Services_Pos_V1beta1_InventoryStreamEvent] = [
    .pingPong,
    .noChange,
    .update,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates types of authorization tokens supported or used by a point-of-sale session.
public enum Bloombox_Schema_Services_Pos_V1beta1_SessionTokenGrant: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Specialized authorization ticket that grants access to the Point of Sale API.
  case api // = 0

  /// Authorization ticket to read/write to/from the point-of-sale operations stream.
  case stream // = 1

  /// Authorization ticket to connect to in-house messaging services.
  case messaging // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .api
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .api
    case 1: self = .stream
    case 2: self = .messaging
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .api: return 0
    case .stream: return 1
    case .messaging: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Services_Pos_V1beta1_SessionTokenGrant: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Services_Pos_V1beta1_SessionTokenGrant] = [
    .api,
    .stream,
    .messaging,
  ]
}

#endif  // swift(>=4.2)

/// Specifies authorization tokens for a given device/user pair.
public struct Bloombox_Schema_Services_Pos_V1beta1_RegisterSessionToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of grant that this token provides the bearer.
  public var grant: Bloombox_Schema_Services_Pos_V1beta1_SessionTokenGrant {
    get {return _storage._grant}
    set {_uniqueStorage()._grant = newValue}
  }

  /// Resulting authorization token, entitling the bearer to access the specified grant.
  public var token: Bloombox_Schema_Security_AuthToken {
    get {return _storage._token ?? Bloombox_Schema_Security_AuthToken()}
    set {_uniqueStorage()._token = newValue}
  }
  /// Returns true if `token` has been explicitly set.
  public var hasToken: Bool {return _storage._token != nil}
  /// Clears the value of `token`. Subsequent reads from it will return its default value.
  public mutating func clearToken() {_uniqueStorage()._token = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies details for authenticating with messaging services.
public struct Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the one-time-use nonce for messaging authentication.
  public var nonce: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies the notion of a point-of-sale session, bound to a user and particular POS device.
public struct Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Session ID. Unique string to provide during POS operations, to reference this session.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Specifies the staff user logged in via this operation.
  public var user: Bloombox_Schema_Identity_StaffUser {
    get {return _storage._user ?? Bloombox_Schema_Identity_StaffUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  /// Specifies the current/active status of a particular point of sale session.
  public var status: Opencannabis_Commerce_SessionStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Rendered access rights for this partner location.
  public var rights: Bloombox_Schema_Identity_IndustryProfile {
    get {return _storage._rights ?? Bloombox_Schema_Identity_IndustryProfile()}
    set {_uniqueStorage()._rights = newValue}
  }
  /// Returns true if `rights` has been explicitly set.
  public var hasRights: Bool {return _storage._rights != nil}
  /// Clears the value of `rights`. Subsequent reads from it will return its default value.
  public mutating func clearRights() {_uniqueStorage()._rights = nil}

  /// Authorization grants/tokens issued in response to this authentication transaction.
  public var authorization: [Bloombox_Schema_Services_Pos_V1beta1_RegisterSessionToken] {
    get {return _storage._authorization}
    set {_uniqueStorage()._authorization = newValue}
  }

  /// Messaging session configuration, if applicable.
  public var messaging: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.MessagingSession {
    get {return _storage._messaging ?? Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.MessagingSession()}
    set {_uniqueStorage()._messaging = newValue}
  }
  /// Returns true if `messaging` has been explicitly set.
  public var hasMessaging: Bool {return _storage._messaging != nil}
  /// Clears the value of `messaging`. Subsequent reads from it will return its default value.
  public mutating func clearMessaging() {_uniqueStorage()._messaging = nil}

  /// When we expect the POS to check-in next.
  public var checkIn: Opencannabis_Temporal_Instant {
    get {return _storage._checkIn ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._checkIn = newValue}
  }
  /// Returns true if `checkIn` has been explicitly set.
  public var hasCheckIn: Bool {return _storage._checkIn != nil}
  /// Clears the value of `checkIn`. Subsequent reads from it will return its default value.
  public mutating func clearCheckIn() {_uniqueStorage()._checkIn = nil}

  /// When the session hard-expires.
  public var expires: Opencannabis_Temporal_Instant {
    get {return _storage._expires ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  public var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  public mutating func clearExpires() {_uniqueStorage()._expires = nil}

  /// When the point-of-sale session was established.
  public var established: Opencannabis_Temporal_Instant {
    get {return _storage._established ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._established = newValue}
  }
  /// Returns true if `established` has been explicitly set.
  public var hasEstablished: Bool {return _storage._established != nil}
  /// Clears the value of `established`. Subsequent reads from it will return its default value.
  public mutating func clearEstablished() {_uniqueStorage()._established = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Properties related to a messaging session, if one was established.
  public struct MessagingSession {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Identity of the authenticated and authorized user.
    public var identity: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an RPC transaction to authenticate a staff member user on a point-of-sale device.
public struct Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to authenticate a staff member via ID token.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner where the device is located.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Authentication nonce, for access to messaging services.
    public var messaging: Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth {
      get {return _storage._messaging ?? Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth()}
      set {_uniqueStorage()._messaging = newValue}
    }
    /// Returns true if `messaging` has been explicitly set.
    public var hasMessaging: Bool {return _storage._messaging != nil}
    /// Clears the value of `messaging`. Subsequent reads from it will return its default value.
    public mutating func clearMessaging() {_uniqueStorage()._messaging = nil}

    /// Information about point-of-sale hardware installed or supported on this device.
    public var hardware: Opencannabis_Commerce_POSHardware {
      get {return _storage._hardware ?? Opencannabis_Commerce_POSHardware()}
      set {_uniqueStorage()._hardware = newValue}
    }
    /// Returns true if `hardware` has been explicitly set.
    public var hasHardware: Bool {return _storage._hardware != nil}
    /// Clears the value of `hardware`. Subsequent reads from it will return its default value.
    public mutating func clearHardware() {_uniqueStorage()._hardware = nil}

    /// Information about the POS app in use.
    public var app: Bloombox_Schema_Analytics_Context_DeviceApplication {
      get {return _storage._app ?? Bloombox_Schema_Analytics_Context_DeviceApplication()}
      set {_uniqueStorage()._app = newValue}
    }
    /// Returns true if `app` has been explicitly set.
    public var hasApp: Bool {return _storage._app != nil}
    /// Clears the value of `app`. Subsequent reads from it will return its default value.
    public mutating func clearApp() {_uniqueStorage()._app = nil}

    /// Specifies an existing session ID, implying a desire to resume the session referenced.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    public var auth: OneOf_Auth? {
      get {return _storage._auth}
      set {_uniqueStorage()._auth = newValue}
    }

    /// Resolved identity provided by the user, including their provider and identity ID.
    public var token: Bloombox_Schema_Security_IdentityToken {
      get {
        if case .token(let v)? = _storage._auth {return v}
        return Bloombox_Schema_Security_IdentityToken()
      }
      set {_uniqueStorage()._auth = .token(newValue)}
    }

    /// Cryptographic hash representing the user's response to an identity challenge.
    public var challenge: Opencannabis_Crypto_Primitives_Integrity_Hash {
      get {
        if case .challenge(let v)? = _storage._auth {return v}
        return Opencannabis_Crypto_Primitives_Integrity_Hash()
      }
      set {_uniqueStorage()._auth = .challenge(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Auth: Equatable {
      /// Resolved identity provided by the user, including their provider and identity ID.
      case token(Bloombox_Schema_Security_IdentityToken)
      /// Cryptographic hash representing the user's response to an identity challenge.
      case challenge(Opencannabis_Crypto_Primitives_Integrity_Hash)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request.OneOf_Auth, rhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request.OneOf_Auth) -> Bool {
        switch (lhs, rhs) {
        case (.token(let l), .token(let r)): return l == r
        case (.challenge(let l), .challenge(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to authenticate a staff member via ID token.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Session allocated to coordinate this user's point-of-sale transactions.
    public var session: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession {
      get {return _storage._session ?? Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession()}
      set {_uniqueStorage()._session = newValue}
    }
    /// Returns true if `session` has been explicitly set.
    public var hasSession: Bool {return _storage._session != nil}
    /// Clears the value of `session`. Subsequent reads from it will return its default value.
    public mutating func clearSession() {_uniqueStorage()._session = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a single authorization operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Authorization request.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Authorization response.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to open a formal point-of-sale session.
public struct Bloombox_Schema_Services_Pos_V1beta1_OpenSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to open an authorized, formal POS session.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner where the device is located.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// ID of the session that the callee wishes to open.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Authorization token corresponding to the user's security/authorization state.
    public var token: String {
      get {return _storage._token}
      set {_uniqueStorage()._token = newValue}
    }

    /// Specifies the operation being taken to open the session. Either we are establishing a fresh session for this
    /// device, in which case the POS open state must be defined, or we are resuming a previous or suspended session, in
    /// which case the resumption flag must be present.
    public var claim: OneOf_Claim? {
      get {return _storage._claim}
      set {_uniqueStorage()._claim = newValue}
    }

    /// Specifies the opening state of the cash register, including the beginning float for the session.
    public var `open`: Opencannabis_Commerce_PointOfSaleState.SessionOpen {
      get {
        if case .open(let v)? = _storage._claim {return v}
        return Opencannabis_Commerce_PointOfSaleState.SessionOpen()
      }
      set {_uniqueStorage()._claim = .open(newValue)}
    }

    /// Flag to indicate this session-open call is reclaiming or resuming a previously opened and established session.
    public var resume: Bool {
      get {
        if case .resume(let v)? = _storage._claim {return v}
        return false
      }
      set {_uniqueStorage()._claim = .resume(newValue)}
    }

    /// Hex-encoded signature of the SHA512-digest of the binary-encoded session claim, if establishing.
    public var signature: Opencannabis_Crypto_Signature {
      get {return _storage._signature ?? Opencannabis_Crypto_Signature()}
      set {_uniqueStorage()._signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    public var hasSignature: Bool {return _storage._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    public mutating func clearSignature() {_uniqueStorage()._signature = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specifies the operation being taken to open the session. Either we are establishing a fresh session for this
    /// device, in which case the POS open state must be defined, or we are resuming a previous or suspended session, in
    /// which case the resumption flag must be present.
    public enum OneOf_Claim: Equatable {
      /// Specifies the opening state of the cash register, including the beginning float for the session.
      case `open`(Opencannabis_Commerce_PointOfSaleState.SessionOpen)
      /// Flag to indicate this session-open call is reclaiming or resuming a previously opened and established session.
      case resume(Bool)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request.OneOf_Claim, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request.OneOf_Claim) -> Bool {
        switch (lhs, rhs) {
        case (.open(let l), .open(let r)): return l == r
        case (.resume(let l), .resume(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to open a POS operation.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Updated session, after it has presumably been opened (i.e. not encountered a fatal error).
    public var session: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession {
      get {return _storage._session ?? Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession()}
      set {_uniqueStorage()._session = newValue}
    }
    /// Returns true if `session` has been explicitly set.
    public var hasSession: Bool {return _storage._session != nil}
    /// Clears the value of `session`. Subsequent reads from it will return its default value.
    public mutating func clearSession() {_uniqueStorage()._session = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies one entire open-session operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to open a POS session.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to open a POS session.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to close a formal point-of-sale session.
public struct Bloombox_Schema_Services_Pos_V1beta1_CloseSession {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to conduct a close of a POS session.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner where the device is located.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// ID of the session that the callee wishes to close.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Specifies the closing state of the cash register, including the final cash total for the session.
    public var close: Opencannabis_Commerce_PointOfSaleState.SessionClose {
      get {return _storage._close ?? Opencannabis_Commerce_PointOfSaleState.SessionClose()}
      set {_uniqueStorage()._close = newValue}
    }
    /// Returns true if `close` has been explicitly set.
    public var hasClose: Bool {return _storage._close != nil}
    /// Clears the value of `close`. Subsequent reads from it will return its default value.
    public mutating func clearClose() {_uniqueStorage()._close = nil}

    /// Describes all transactions that occurred during the subject point of sale session.
    public var transaction: [Opencannabis_Commerce_PurchaseKey] {
      get {return _storage._transaction}
      set {_uniqueStorage()._transaction = newValue}
    }

    /// Hex-encoded signature of the SHA512-digest of the binary-encoded session close claim, and transactions.
    public var signature: Opencannabis_Crypto_Signature {
      get {return _storage._signature ?? Opencannabis_Crypto_Signature()}
      set {_uniqueStorage()._signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    public var hasSignature: Bool {return _storage._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    public mutating func clearSignature() {_uniqueStorage()._signature = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to close a POS session.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the timestamp at which the session was closed.
    public var closed: Opencannabis_Temporal_Instant {
      get {return _storage._closed ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._closed = newValue}
    }
    /// Returns true if `closed` has been explicitly set.
    public var hasClosed: Bool {return _storage._closed != nil}
    /// Clears the value of `closed`. Subsequent reads from it will return its default value.
    public mutating func clearClosed() {_uniqueStorage()._closed = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire close-session RPC operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the close-session request.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Specifies the close-session response.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to open a new or existing ticket.
public struct Bloombox_Schema_Services_Pos_V1beta1_OpenTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to open a new purchase ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the ticket ID to open.
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Specifies the device for which a ticket is being requested.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Active and valid point-of-sale session.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Flag to indicate that the ticket is fresh and we're notifying the server.
    public var fresh: Bool {
      get {return _storage._fresh}
      set {_uniqueStorage()._fresh = newValue}
    }

    /// Hex-encoded signature of the SHA512-digest of the binary-encoded purchase key.
    public var signature: Opencannabis_Crypto_Signature {
      get {return _storage._signature ?? Opencannabis_Crypto_Signature()}
      set {_uniqueStorage()._signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    public var hasSignature: Bool {return _storage._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    public mutating func clearSignature() {_uniqueStorage()._signature = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies the resulting claim ID from an open-ticket lease operation.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the ticket ID that was opened.
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Specifies an opaque string representing this ticket claim.
    public var claim: String {
      get {return _storage._claim}
      set {_uniqueStorage()._claim = newValue}
    }

    /// Specifies the new status of the ticket.
    public var status: Opencannabis_Commerce_PurchaseStatus {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    /// Timestamp indicating when this lease was granted.
    public var granted: Opencannabis_Temporal_Instant {
      get {return _storage._granted ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._granted = newValue}
    }
    /// Returns true if `granted` has been explicitly set.
    public var hasGranted: Bool {return _storage._granted != nil}
    /// Clears the value of `granted`. Subsequent reads from it will return its default value.
    public mutating func clearGranted() {_uniqueStorage()._granted = nil}

    /// Timestamp indicating when this lease expires.
    public var expires: Opencannabis_Temporal_Instant {
      get {return _storage._expires ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._expires = newValue}
    }
    /// Returns true if `expires` has been explicitly set.
    public var hasExpires: Bool {return _storage._expires != nil}
    /// Clears the value of `expires`. Subsequent reads from it will return its default value.
    public mutating func clearExpires() {_uniqueStorage()._expires = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire open-ticket operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to open a ticket.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to open a ticket.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to save a ticket after modifications were made.
public struct Bloombox_Schema_Services_Pos_V1beta1_SaveTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to save a purchase ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Specifies the purchase to save.
    public var ticket: Opencannabis_Commerce_PurchaseTicket {
      get {return _storage._ticket ?? Opencannabis_Commerce_PurchaseTicket()}
      set {_uniqueStorage()._ticket = newValue}
    }
    /// Returns true if `ticket` has been explicitly set.
    public var hasTicket: Bool {return _storage._ticket != nil}
    /// Clears the value of `ticket`. Subsequent reads from it will return its default value.
    public mutating func clearTicket() {_uniqueStorage()._ticket = nil}

    /// Active and valid point-of-sale session.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Cryptographic signature from the facilitating partner device.
    public var signature: Opencannabis_Commerce_PurchaseSignature {
      get {return _storage._signature ?? Opencannabis_Commerce_PurchaseSignature()}
      set {_uniqueStorage()._signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    public var hasSignature: Bool {return _storage._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    public mutating func clearSignature() {_uniqueStorage()._signature = nil}

    /// Timestamp identifying when, precisely, this ticket was frozen for persistence.
    public var timestamp: Opencannabis_Temporal_Instant {
      get {return _storage._timestamp ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    public var hasTimestamp: Bool {return _storage._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

    /// Specifies whether this save operation was auto-initiated or user-initiated.
    public var auto: Bool {
      get {return _storage._auto}
      set {_uniqueStorage()._auto = newValue}
    }

    /// Close the ticket, i.e., do not allow it to be modified any further without opening.
    public var close: Bool {
      get {return _storage._close}
      set {_uniqueStorage()._close = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to save a purchase ticket.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the version number saved as part of this operation.
    public var version: UInt32 {
      get {return _storage._version}
      set {_uniqueStorage()._version = newValue}
    }

    /// Specifies the new status of the ticket, if applicable.
    public var status: Opencannabis_Commerce_PurchaseStatus {
      get {return _storage._status}
      set {_uniqueStorage()._status = newValue}
    }

    /// Timestamp indicating when this ticket's lease was granted.
    public var granted: Opencannabis_Temporal_Instant {
      get {return _storage._granted ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._granted = newValue}
    }
    /// Returns true if `granted` has been explicitly set.
    public var hasGranted: Bool {return _storage._granted != nil}
    /// Clears the value of `granted`. Subsequent reads from it will return its default value.
    public mutating func clearGranted() {_uniqueStorage()._granted = nil}

    /// Timestamp indicating when this ticket's lease expires.
    public var expires: Opencannabis_Temporal_Instant {
      get {return _storage._expires ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._expires = newValue}
    }
    /// Returns true if `expires` has been explicitly set.
    public var hasExpires: Bool {return _storage._expires != nil}
    /// Clears the value of `expires`. Subsequent reads from it will return its default value.
    public mutating func clearExpires() {_uniqueStorage()._expires = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire ticket-save operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to save a ticket.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to save a ticket.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to load a ticket by its ID or key.
public struct Bloombox_Schema_Services_Pos_V1beta1_LoadTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to load an existing purchase ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Specifies the purchase key to load.
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Active and valid point-of-sale session.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies the resulting purchase ticket, if it could be located.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the resulting purchase ticket, if it could be located.
    public var ticket: Opencannabis_Commerce_PurchaseTicket {
      get {return _storage._ticket ?? Opencannabis_Commerce_PurchaseTicket()}
      set {_uniqueStorage()._ticket = newValue}
    }
    /// Returns true if `ticket` has been explicitly set.
    public var hasTicket: Bool {return _storage._ticket != nil}
    /// Clears the value of `ticket`. Subsequent reads from it will return its default value.
    public mutating func clearTicket() {_uniqueStorage()._ticket = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire load-ticket operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for service status.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request for service status.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to claim an existing, open ticket. "Claim"-ing a ticket involves changing the facilitator
/// identity, such that a new budtender/staff members owns the ticket.
public struct Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to claim an existing, open ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner, where the ticket should be claimed.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Specifies the purchase ticket to claim, by key.
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Active and valid point-of-sale session to claim the ticket with.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to claim an existing, open ticket.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the resulting purchase ticket, if it could successfully be claimed.
    public var ticket: Opencannabis_Commerce_PurchaseTicket {
      get {return _storage._ticket ?? Opencannabis_Commerce_PurchaseTicket()}
      set {_uniqueStorage()._ticket = newValue}
    }
    /// Returns true if `ticket` has been explicitly set.
    public var hasTicket: Bool {return _storage._ticket != nil}
    /// Clears the value of `ticket`. Subsequent reads from it will return its default value.
    public mutating func clearTicket() {_uniqueStorage()._ticket = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Represents an entire RPC operation to claim ownership of a ticket.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to claim ownership of a ticket.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to claim ownership of a ticket.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to clone an existing ticket. The source ticket may be in any state. The purchase ticket
/// items are pre-filled, and any other computed properties are provided (i.e. bill of sale), but the facilitator and
/// customer may be replaced.
public struct Bloombox_Schema_Services_Pos_V1beta1_CloneTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to clone an existing purchase ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the ticket ID to clone into a new ticket (i.e. the "source" ticket).
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Specifies the device for which a ticket is being cloned.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Active and valid point-of-sale session to clone the ticket with.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to clone an existing purchase ticket.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the resulting newly-cloned purchase ticket, if it could successfully be cloned.
    public var ticket: Opencannabis_Commerce_PurchaseTicket {
      get {return _storage._ticket ?? Opencannabis_Commerce_PurchaseTicket()}
      set {_uniqueStorage()._ticket = newValue}
    }
    /// Returns true if `ticket` has been explicitly set.
    public var hasTicket: Bool {return _storage._ticket != nil}
    /// Clears the value of `ticket`. Subsequent reads from it will return its default value.
    public mutating func clearTicket() {_uniqueStorage()._ticket = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Represents an entire RPC operation to clone an existing purchase ticket.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to clone a purchase ticket.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response provided to this request to clone a purchase ticket.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to void an existing, open ticket.
public struct Bloombox_Schema_Services_Pos_V1beta1_VoidTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to void a purchase ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Specifies the purchase key to void.
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Active and valid point-of-sale session.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Hex-encoded signature of the SHA512-digest of the binary-encoded purchase key.
    public var signature: Opencannabis_Crypto_Signature {
      get {return _storage._signature ?? Opencannabis_Crypto_Signature()}
      set {_uniqueStorage()._signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    public var hasSignature: Bool {return _storage._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    public mutating func clearSignature() {_uniqueStorage()._signature = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to void a purchase ticket.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the version of the ticket that was voided.
    public var version: UInt32 {
      get {return _storage._version}
      set {_uniqueStorage()._version = newValue}
    }

    /// Specifies the timestamp at which the ticket was voided.
    public var timestamp: Opencannabis_Temporal_Instant {
      get {return _storage._timestamp ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    public var hasTimestamp: Bool {return _storage._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire ticket-void operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to void a ticket.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to void a ticket.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to finalize an existing, open ticket.
public struct Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to finalize a purchase ticket.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Device key, including the location and partner.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Specifies the purchase key to finalize.
    public var purchase: Opencannabis_Commerce_PurchaseKey {
      get {return _storage._purchase ?? Opencannabis_Commerce_PurchaseKey()}
      set {_uniqueStorage()._purchase = newValue}
    }
    /// Returns true if `purchase` has been explicitly set.
    public var hasPurchase: Bool {return _storage._purchase != nil}
    /// Clears the value of `purchase`. Subsequent reads from it will return its default value.
    public mutating func clearPurchase() {_uniqueStorage()._purchase = nil}

    /// Active and valid point-of-sale session.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Hex-encoded signature of the SHA512-digest of the binary-encoded purchase key.
    public var signature: Opencannabis_Crypto_Signature {
      get {return _storage._signature ?? Opencannabis_Crypto_Signature()}
      set {_uniqueStorage()._signature = newValue}
    }
    /// Returns true if `signature` has been explicitly set.
    public var hasSignature: Bool {return _storage._signature != nil}
    /// Clears the value of `signature`. Subsequent reads from it will return its default value.
    public mutating func clearSignature() {_uniqueStorage()._signature = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to finalize a purchase ticket.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the version of the ticket that was finalized.
    public var version: UInt32 {
      get {return _storage._version}
      set {_uniqueStorage()._version = newValue}
    }

    /// Specifies the timestamp at which the ticket was finalized.
    public var timestamp: Opencannabis_Temporal_Instant {
      get {return _storage._timestamp ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    public var hasTimestamp: Bool {return _storage._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    public mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire ticket-finalize operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to finalize a ticket.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to finalize a ticket.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to search member accounts by ID, contact info, or name.
public struct Bloombox_Schema_Services_Pos_V1beta1_MemberSearch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Criteria to qualify a search for a member account.
  public struct MemberPredicate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Search by email address.
    public var email: String = String()

    /// Search by telephone number.
    public var phone: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Criteria to qualify a search via a digital pass.
  public struct DigitalPass {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the scanned/received information from the pass.
    public var pass: Bloombox_Schema_Identity_Pass_DigitalPassKey {
      get {return _storage._pass ?? Bloombox_Schema_Identity_Pass_DigitalPassKey()}
      set {_uniqueStorage()._pass = newValue}
    }
    /// Returns true if `pass` has been explicitly set.
    public var hasPass: Bool {return _storage._pass != nil}
    /// Clears the value of `pass`. Subsequent reads from it will return its default value.
    public mutating func clearPass() {_uniqueStorage()._pass = nil}

    /// Cryptographic signature hash from the physical device that scanned the pass.
    public var challenge: Opencannabis_Crypto_Primitives_Integrity_Hash {
      get {return _storage._challenge ?? Opencannabis_Crypto_Primitives_Integrity_Hash()}
      set {_uniqueStorage()._challenge = newValue}
    }
    /// Returns true if `challenge` has been explicitly set.
    public var hasChallenge: Bool {return _storage._challenge != nil}
    /// Clears the value of `challenge`. Subsequent reads from it will return its default value.
    public mutating func clearChallenge() {_uniqueStorage()._challenge = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Request to search for a member account.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Cursor, specifying a previous operation to continue paging.
    public var cursor: String {
      get {return _storage._cursor}
      set {_uniqueStorage()._cursor = newValue}
    }

    /// Result count limit for this operation.
    public var limit: UInt32 {
      get {return _storage._limit}
      set {_uniqueStorage()._limit = newValue}
    }

    /// Bluetooth signals witnessed by the device forming this query, if applicable.
    public var signal: [String] {
      get {return _storage._signal}
      set {_uniqueStorage()._signal = newValue}
    }

    /// Specification of how we want to locate a member.
    public var spec: OneOf_Spec? {
      get {return _storage._spec}
      set {_uniqueStorage()._spec = newValue}
    }

    /// Search criteria.
    public var search: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate {
      get {
        if case .search(let v)? = _storage._spec {return v}
        return Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate()
      }
      set {_uniqueStorage()._spec = .search(newValue)}
    }

    /// Identification presented by the user.
    public var identification: Bloombox_Schema_Identity_IDReference {
      get {
        if case .identification(let v)? = _storage._spec {return v}
        return Bloombox_Schema_Identity_IDReference()
      }
      set {_uniqueStorage()._spec = .identification(newValue)}
    }

    /// Flag to indicate lobby-checked-in users are desired.
    public var lobby: Bool {
      get {
        if case .lobby(let v)? = _storage._spec {return v}
        return false
      }
      set {_uniqueStorage()._spec = .lobby(newValue)}
    }

    /// Flag to indicate currently-shopping users with an open ticket.
    public var shopping: Bool {
      get {
        if case .shopping(let v)? = _storage._spec {return v}
        return false
      }
      set {_uniqueStorage()._spec = .shopping(newValue)}
    }

    /// Specifies a members-resolve request being requested based on a digital wallet pass.
    public var wallet: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass {
      get {
        if case .wallet(let v)? = _storage._spec {return v}
        return Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass()
      }
      set {_uniqueStorage()._spec = .wallet(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Specification of how we want to locate a member.
    public enum OneOf_Spec: Equatable {
      /// Search criteria.
      case search(Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate)
      /// Identification presented by the user.
      case identification(Bloombox_Schema_Identity_IDReference)
      /// Flag to indicate lobby-checked-in users are desired.
      case lobby(Bool)
      /// Flag to indicate currently-shopping users with an open ticket.
      case shopping(Bool)
      /// Specifies a members-resolve request being requested based on a digital wallet pass.
      case wallet(Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request.OneOf_Spec, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request.OneOf_Spec) -> Bool {
        switch (lhs, rhs) {
        case (.search(let l), .search(let r)): return l == r
        case (.identification(let l), .identification(let r)): return l == r
        case (.lobby(let l), .lobby(let r)): return l == r
        case (.shopping(let l), .shopping(let r)): return l == r
        case (.wallet(let l), .wallet(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies the structure of a response to a request to search for member accounts.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Cursor to resume this operation and keep paging.
    public var cursor: String = String()

    /// Record count in this batch.
    public var count: UInt32 = 0

    /// Total resultset record count.
    public var total: UInt32 = 0

    /// Matching member accounts.
    public var member: [Bloombox_Schema_Identity_MembershipReference] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies one complete member search operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to search for members.
    public var request: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request to search for members.
    public var response: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to search for active stock status at a given location.
public struct Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies an inventory query based on item keys.
  public struct KeyQuerySpec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specific key the requestor is interested in, if applicable.
    public var key: Opencannabis_Inventory_InventoryKey {
      get {return _storage._key ?? Opencannabis_Inventory_InventoryKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an inventory query based on menu sections.
  public struct SectionQuerySpec {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies a menu section for which to retrieve inventory.
    public var section: Opencannabis_Products_Menu_Section_Section = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Request to query inventory status.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The device that is submitting this search.
    public var register: Bloombox_Schema_Partner_PartnerDeviceKey {
      get {return _storage._register ?? Bloombox_Schema_Partner_PartnerDeviceKey()}
      set {_uniqueStorage()._register = newValue}
    }
    /// Returns true if `register` has been explicitly set.
    public var hasRegister: Bool {return _storage._register != nil}
    /// Clears the value of `register`. Subsequent reads from it will return its default value.
    public mutating func clearRegister() {_uniqueStorage()._register = nil}

    /// Specifies the location at which we wish to query inventory.
    public var location: Bloombox_Schema_Partner_LocationKey {
      get {return _storage._location ?? Bloombox_Schema_Partner_LocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    public var query: OneOf_Query? {
      get {return _storage._query}
      set {_uniqueStorage()._query = newValue}
    }

    /// Flag to indicate that we need a full menu.
    public var full: Bool {
      get {
        if case .full(let v)? = _storage._query {return v}
        return false
      }
      set {_uniqueStorage()._query = .full(newValue)}
    }

    /// Specifies a key-based query.
    public var keys: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec {
      get {
        if case .keys(let v)? = _storage._query {return v}
        return Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec()
      }
      set {_uniqueStorage()._query = .keys(newValue)}
    }

    /// Specifies a section-based query.
    public var sections: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec {
      get {
        if case .sections(let v)? = _storage._query {return v}
        return Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec()
      }
      set {_uniqueStorage()._query = .sections(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Query: Equatable {
      /// Flag to indicate that we need a full menu.
      case full(Bool)
      /// Specifies a key-based query.
      case keys(Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec)
      /// Specifies a section-based query.
      case sections(Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request.OneOf_Query, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request.OneOf_Query) -> Bool {
        switch (lhs, rhs) {
        case (.full(let l), .full(let r)): return l == r
        case (.keys(let l), .keys(let r)): return l == r
        case (.sections(let l), .sections(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to an inventory enquiry. Indicates status of the requested stock items.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies update payloads for this event, if applicable.
    public var item: [Opencannabis_Inventory_InventoryProduct] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Specifies an RPC operation to establish an inventory status stream, wherein initial inventory information is sent and
/// then kept up to date with real-time notifications.
public struct Bloombox_Schema_Services_Pos_V1beta1_InventoryStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to establish an inventory update stream.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the location at which we wish to query inventory.
    public var location: Opencannabis_Inventory_InventoryLocationKey {
      get {return _storage._location ?? Opencannabis_Inventory_InventoryLocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    /// Active and valid point-of-sale session.
    public var session: String {
      get {return _storage._session}
      set {_uniqueStorage()._session = newValue}
    }

    /// Local bloom filters that constitute local client inventory data, if existing data is present.
    public var local: [String] {
      get {return _storage._local}
      set {_uniqueStorage()._local = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response stanza payload for an inventory stream.
  public struct Payload {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the event being transmitted in this payload.
    public var event: Bloombox_Schema_Services_Pos_V1beta1_InventoryStreamEvent = .pingPong

    /// Specifies update payloads for this event, if applicable.
    public var item: [Opencannabis_Inventory_InventoryProduct] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.pos.v1beta1"

extension Bloombox_Schema_Services_Pos_V1beta1_POSError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "INVALID_PARTNER"),
    2: .same(proto: "INVALID_LOCATION"),
    3: .same(proto: "INVALID_DEVICE"),
    4: .same(proto: "INVALID_ID_TOKEN"),
    5: .same(proto: "INVALID_DEVICE_SIGNATURE"),
    6: .same(proto: "INVALID_TICKET"),
    7: .same(proto: "INVALID_TICKET_KEY"),
    8: .same(proto: "INVALID_TICKET_SIGNATURE"),
    9: .same(proto: "INVALID_TIMESTAMP"),
    10: .same(proto: "DEVICE_NOT_FOUND"),
    11: .same(proto: "SESSION_NOT_FOUND"),
    12: .same(proto: "SESSION_CONFLICT"),
    20: .same(proto: "ILLEGAL_TICKET_STRUCTURE"),
    21: .same(proto: "ILLEGAL_TICKET_VERSION"),
    22: .same(proto: "ILLEGAL_TIMESTAMP"),
    30: .same(proto: "TICKET_NOT_FOUND"),
    31: .same(proto: "TICKET_CONFLICT"),
    32: .same(proto: "TICKET_CLAIMED"),
    96: .same(proto: "INVALID_REQUEST"),
    97: .same(proto: "AUTHORIZATION_DENIED"),
    98: .same(proto: "ACCESS_CONFLICT"),
    99: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryStreamEvent: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PING_PONG"),
    1: .same(proto: "NO_CHANGE"),
    2: .same(proto: "UPDATE"),
  ]
}

extension Bloombox_Schema_Services_Pos_V1beta1_SessionTokenGrant: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "API"),
    1: .same(proto: "STREAM"),
    2: .same(proto: "MESSAGING"),
  ]
}

extension Bloombox_Schema_Services_Pos_V1beta1_RegisterSessionToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RegisterSessionToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "grant"),
    2: .same(proto: "token"),
  ]

  fileprivate class _StorageClass {
    var _grant: Bloombox_Schema_Services_Pos_V1beta1_SessionTokenGrant = .api
    var _token: Bloombox_Schema_Security_AuthToken? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _grant = source._grant
      _token = source._token
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._grant)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._token)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._grant != .api {
        try visitor.visitSingularEnumField(value: _storage._grant, fieldNumber: 1)
      }
      if let v = _storage._token {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_RegisterSessionToken, rhs: Bloombox_Schema_Services_Pos_V1beta1_RegisterSessionToken) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._grant != rhs_storage._grant {return false}
        if _storage._token != rhs_storage._token {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MessagingAuth"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "nonce"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.nonce)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.nonce.isEmpty {
      try visitor.visitSingularStringField(value: self.nonce, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth, rhs: Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth) -> Bool {
    if lhs.nonce != rhs.nonce {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CashRegisterSession"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "user"),
    3: .same(proto: "status"),
    5: .same(proto: "rights"),
    6: .same(proto: "authorization"),
    7: .same(proto: "messaging"),
    8: .standard(proto: "check_in"),
    9: .same(proto: "expires"),
    10: .same(proto: "established"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _user: Bloombox_Schema_Identity_StaffUser? = nil
    var _status: Opencannabis_Commerce_SessionStatus = .established
    var _rights: Bloombox_Schema_Identity_IndustryProfile? = nil
    var _authorization: [Bloombox_Schema_Services_Pos_V1beta1_RegisterSessionToken] = []
    var _messaging: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.MessagingSession? = nil
    var _checkIn: Opencannabis_Temporal_Instant? = nil
    var _expires: Opencannabis_Temporal_Instant? = nil
    var _established: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _user = source._user
      _status = source._status
      _rights = source._rights
      _authorization = source._authorization
      _messaging = source._messaging
      _checkIn = source._checkIn
      _expires = source._expires
      _established = source._established
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._rights)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._authorization)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._messaging)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._checkIn)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._expires)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._established)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._status != .established {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      if let v = _storage._rights {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._authorization.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._authorization, fieldNumber: 6)
      }
      if let v = _storage._messaging {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._checkIn {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._expires {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._established {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession, rhs: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._rights != rhs_storage._rights {return false}
        if _storage._authorization != rhs_storage._authorization {return false}
        if _storage._messaging != rhs_storage._messaging {return false}
        if _storage._checkIn != rhs_storage._checkIn {return false}
        if _storage._expires != rhs_storage._expires {return false}
        if _storage._established != rhs_storage._established {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.MessagingSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.protoMessageName + ".MessagingSession"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.identity)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.MessagingSession, rhs: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession.MessagingSession) -> Bool {
    if lhs.identity != rhs.identity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AuthorizeUser"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser, rhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "messaging"),
    3: .same(proto: "hardware"),
    4: .same(proto: "app"),
    5: .same(proto: "session"),
    10: .same(proto: "token"),
    11: .same(proto: "challenge"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _messaging: Bloombox_Schema_Services_Pos_V1beta1_MessagingAuth? = nil
    var _hardware: Opencannabis_Commerce_POSHardware? = nil
    var _app: Bloombox_Schema_Analytics_Context_DeviceApplication? = nil
    var _session: String = String()
    var _auth: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request.OneOf_Auth?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _messaging = source._messaging
      _hardware = source._hardware
      _app = source._app
      _session = source._session
      _auth = source._auth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._messaging)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._hardware)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._app)
        case 5: try decoder.decodeSingularStringField(value: &_storage._session)
        case 10:
          var v: Bloombox_Schema_Security_IdentityToken?
          if let current = _storage._auth {
            try decoder.handleConflictingOneOf()
            if case .token(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._auth = .token(v)}
        case 11:
          var v: Opencannabis_Crypto_Primitives_Integrity_Hash?
          if let current = _storage._auth {
            try decoder.handleConflictingOneOf()
            if case .challenge(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._auth = .challenge(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._messaging {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._hardware {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 5)
      }
      switch _storage._auth {
      case .token(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .challenge(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._messaging != rhs_storage._messaging {return false}
        if _storage._hardware != rhs_storage._hardware {return false}
        if _storage._app != rhs_storage._app {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._auth != rhs_storage._auth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _session: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenSession"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_OpenSession.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "session"),
    3: .same(proto: "token"),
    4: .same(proto: "open"),
    5: .same(proto: "resume"),
    6: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _session: String = String()
    var _token: String = String()
    var _claim: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request.OneOf_Claim?
    var _signature: Opencannabis_Crypto_Signature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _session = source._session
      _token = source._token
      _claim = source._claim
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularStringField(value: &_storage._session)
        case 3: try decoder.decodeSingularStringField(value: &_storage._token)
        case 4:
          var v: Opencannabis_Commerce_PointOfSaleState.SessionOpen?
          if let current = _storage._claim {
            try decoder.handleConflictingOneOf()
            if case .open(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._claim = .open(v)}
        case 5:
          if _storage._claim != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._claim = .resume(v)}
        case 6: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 2)
      }
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 3)
      }
      switch _storage._claim {
      case .open(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .resume(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      case nil: break
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._token != rhs_storage._token {return false}
        if _storage._claim != rhs_storage._claim {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_OpenSession.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _session: Bloombox_Schema_Services_Pos_V1beta1_CashRegisterSession? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._session {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_OpenSession.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloseSession: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloseSession"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CloseSession.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "session"),
    3: .same(proto: "close"),
    4: .same(proto: "transaction"),
    6: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _session: String = String()
    var _close: Opencannabis_Commerce_PointOfSaleState.SessionClose? = nil
    var _transaction: [Opencannabis_Commerce_PurchaseKey] = []
    var _signature: Opencannabis_Crypto_Signature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _session = source._session
      _close = source._close
      _transaction = source._transaction
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularStringField(value: &_storage._session)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._close)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._transaction)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 2)
      }
      if let v = _storage._close {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._transaction.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._transaction, fieldNumber: 4)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._close != rhs_storage._close {return false}
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CloseSession.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "closed"),
  ]

  fileprivate class _StorageClass {
    var _closed: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _closed = source._closed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._closed)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._closed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._closed != rhs_storage._closed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CloseSession.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OpenTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchase"),
    2: .same(proto: "register"),
    3: .same(proto: "session"),
    4: .same(proto: "fresh"),
    6: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _session: String = String()
    var _fresh: Bool = false
    var _signature: Opencannabis_Crypto_Signature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _purchase = source._purchase
      _register = source._register
      _session = source._session
      _fresh = source._fresh
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._fresh)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
      if _storage._fresh != false {
        try visitor.visitSingularBoolField(value: _storage._fresh, fieldNumber: 4)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._register != rhs_storage._register {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._fresh != rhs_storage._fresh {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchase"),
    2: .same(proto: "claim"),
    3: .same(proto: "status"),
    4: .same(proto: "granted"),
    5: .same(proto: "expires"),
  ]

  fileprivate class _StorageClass {
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _claim: String = String()
    var _status: Opencannabis_Commerce_PurchaseStatus = .fresh
    var _granted: Opencannabis_Temporal_Instant? = nil
    var _expires: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _purchase = source._purchase
      _claim = source._claim
      _status = source._status
      _granted = source._granted
      _expires = source._expires
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 2: try decoder.decodeSingularStringField(value: &_storage._claim)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._granted)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._expires)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._claim.isEmpty {
        try visitor.visitSingularStringField(value: _storage._claim, fieldNumber: 2)
      }
      if _storage._status != .fresh {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 3)
      }
      if let v = _storage._granted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._expires {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._claim != rhs_storage._claim {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._granted != rhs_storage._granted {return false}
        if _storage._expires != rhs_storage._expires {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_SaveTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SaveTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "ticket"),
    3: .same(proto: "session"),
    4: .same(proto: "signature"),
    5: .same(proto: "timestamp"),
    6: .same(proto: "auto"),
    7: .same(proto: "close"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _ticket: Opencannabis_Commerce_PurchaseTicket? = nil
    var _session: String = String()
    var _signature: Opencannabis_Commerce_PurchaseSignature? = nil
    var _timestamp: Opencannabis_Temporal_Instant? = nil
    var _auto: Bool = false
    var _close: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _ticket = source._ticket
      _session = source._session
      _signature = source._signature
      _timestamp = source._timestamp
      _auto = source._auto
      _close = source._close
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._ticket)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._signature)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._auto)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._close)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._ticket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._auto != false {
        try visitor.visitSingularBoolField(value: _storage._auto, fieldNumber: 6)
      }
      if _storage._close != false {
        try visitor.visitSingularBoolField(value: _storage._close, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._ticket != rhs_storage._ticket {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._signature != rhs_storage._signature {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._auto != rhs_storage._auto {return false}
        if _storage._close != rhs_storage._close {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "status"),
    3: .same(proto: "granted"),
    4: .same(proto: "expires"),
  ]

  fileprivate class _StorageClass {
    var _version: UInt32 = 0
    var _status: Opencannabis_Commerce_PurchaseStatus = .fresh
    var _granted: Opencannabis_Temporal_Instant? = nil
    var _expires: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _status = source._status
      _granted = source._granted
      _expires = source._expires
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._version)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._granted)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._expires)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 1)
      }
      if _storage._status != .fresh {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 2)
      }
      if let v = _storage._granted {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._expires {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._granted != rhs_storage._granted {return false}
        if _storage._expires != rhs_storage._expires {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_LoadTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LoadTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "purchase"),
    3: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _session: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _purchase = source._purchase
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticket"),
  ]

  fileprivate class _StorageClass {
    var _ticket: Opencannabis_Commerce_PurchaseTicket? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ticket = source._ticket
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ticket)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ticket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ticket != rhs_storage._ticket {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ClaimTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "purchase"),
    3: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _session: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _purchase = source._purchase
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticket"),
  ]

  fileprivate class _StorageClass {
    var _ticket: Opencannabis_Commerce_PurchaseTicket? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ticket = source._ticket
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ticket)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ticket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ticket != rhs_storage._ticket {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_ClaimTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloneTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloneTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "purchase"),
    2: .same(proto: "register"),
    3: .same(proto: "session"),
  ]

  fileprivate class _StorageClass {
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _session: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _purchase = source._purchase
      _register = source._register
      _session = source._session
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._register != rhs_storage._register {return false}
        if _storage._session != rhs_storage._session {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ticket"),
  ]

  fileprivate class _StorageClass {
    var _ticket: Opencannabis_Commerce_PurchaseTicket? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _ticket = source._ticket
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._ticket)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._ticket {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._ticket != rhs_storage._ticket {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_CloneTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_VoidTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VoidTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "purchase"),
    3: .same(proto: "session"),
    4: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _session: String = String()
    var _signature: Opencannabis_Crypto_Signature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _purchase = source._purchase
      _session = source._session
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _version: UInt32 = 0
    var _timestamp: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._version)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 1)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FinalizeTicket"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket, rhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "purchase"),
    3: .same(proto: "session"),
    4: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _purchase: Opencannabis_Commerce_PurchaseKey? = nil
    var _session: String = String()
    var _signature: Opencannabis_Crypto_Signature? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _purchase = source._purchase
      _session = source._session
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._purchase)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._purchase {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._purchase != rhs_storage._purchase {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "timestamp"),
  ]

  fileprivate class _StorageClass {
    var _version: UInt32 = 0
    var _timestamp: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._version)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._version != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._version, fieldNumber: 1)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MemberSearch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MemberSearch"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.protoMessageName + ".MemberPredicate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "email"),
    2: .same(proto: "phone"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.email)
      case 2: try decoder.decodeSingularStringField(value: &self.phone)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 1)
    }
    if !self.phone.isEmpty {
      try visitor.visitSingularStringField(value: self.phone, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate) -> Bool {
    if lhs.email != rhs.email {return false}
    if lhs.phone != rhs.phone {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.protoMessageName + ".DigitalPass"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pass"),
    2: .same(proto: "challenge"),
  ]

  fileprivate class _StorageClass {
    var _pass: Bloombox_Schema_Identity_Pass_DigitalPassKey? = nil
    var _challenge: Opencannabis_Crypto_Primitives_Integrity_Hash? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pass = source._pass
      _challenge = source._challenge
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pass)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._challenge)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pass {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._challenge {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pass != rhs_storage._pass {return false}
        if _storage._challenge != rhs_storage._challenge {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cursor"),
    2: .same(proto: "limit"),
    3: .same(proto: "signal"),
    20: .same(proto: "search"),
    21: .same(proto: "identification"),
    22: .same(proto: "lobby"),
    23: .same(proto: "shopping"),
    24: .same(proto: "wallet"),
  ]

  fileprivate class _StorageClass {
    var _cursor: String = String()
    var _limit: UInt32 = 0
    var _signal: [String] = []
    var _spec: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request.OneOf_Spec?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _cursor = source._cursor
      _limit = source._limit
      _signal = source._signal
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._cursor)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._limit)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._signal)
        case 20:
          var v: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.MemberPredicate?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .search(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .search(v)}
        case 21:
          var v: Bloombox_Schema_Identity_IDReference?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .identification(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .identification(v)}
        case 22:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._spec = .lobby(v)}
        case 23:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._spec = .shopping(v)}
        case 24:
          var v: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.DigitalPass?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .wallet(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .wallet(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._cursor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cursor, fieldNumber: 1)
      }
      if _storage._limit != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._limit, fieldNumber: 2)
      }
      if !_storage._signal.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._signal, fieldNumber: 3)
      }
      switch _storage._spec {
      case .search(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .identification(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .lobby(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      case .shopping(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      case .wallet(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._cursor != rhs_storage._cursor {return false}
        if _storage._limit != rhs_storage._limit {return false}
        if _storage._signal != rhs_storage._signal {return false}
        if _storage._spec != rhs_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cursor"),
    2: .same(proto: "count"),
    3: .same(proto: "total"),
    4: .same(proto: "member"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.cursor)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.total)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.member)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cursor.isEmpty {
      try visitor.visitSingularStringField(value: self.cursor, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.total != 0 {
      try visitor.visitSingularUInt32Field(value: self.total, fieldNumber: 3)
    }
    if !self.member.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.member, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response) -> Bool {
    if lhs.cursor != rhs.cursor {return false}
    if lhs.count != rhs.count {return false}
    if lhs.total != rhs.total {return false}
    if lhs.member != rhs.member {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request? = nil
    var _response: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Operation, rhs: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryQuery"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.protoMessageName + ".KeyQuerySpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Inventory_InventoryKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.protoMessageName + ".SectionQuerySpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "section"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.section)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.section != .unspecified {
      try visitor.visitSingularEnumField(value: self.section, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec) -> Bool {
    if lhs.section != rhs.section {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "register"),
    2: .same(proto: "location"),
    3: .same(proto: "full"),
    4: .same(proto: "keys"),
    5: .same(proto: "sections"),
  ]

  fileprivate class _StorageClass {
    var _register: Bloombox_Schema_Partner_PartnerDeviceKey? = nil
    var _location: Bloombox_Schema_Partner_LocationKey? = nil
    var _query: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request.OneOf_Query?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _register = source._register
      _location = source._location
      _query = source._query
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._register)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 3:
          if _storage._query != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._query = .full(v)}
        case 4:
          var v: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.KeyQuerySpec?
          if let current = _storage._query {
            try decoder.handleConflictingOneOf()
            if case .keys(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._query = .keys(v)}
        case 5:
          var v: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.SectionQuerySpec?
          if let current = _storage._query {
            try decoder.handleConflictingOneOf()
            if case .sections(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._query = .sections(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._register {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._query {
      case .full(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      case .keys(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .sections(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._register != rhs_storage._register {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._query != rhs_storage._query {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryStream"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    3: .same(proto: "session"),
    2: .same(proto: "local"),
  ]

  fileprivate class _StorageClass {
    var _location: Opencannabis_Inventory_InventoryLocationKey? = nil
    var _session: String = String()
    var _local: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
      _session = source._session
      _local = source._local
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._local)
        case 3: try decoder.decodeSingularStringField(value: &_storage._session)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._local.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._local, fieldNumber: 2)
      }
      if !_storage._session.isEmpty {
        try visitor.visitSingularStringField(value: _storage._session, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._location != rhs_storage._location {return false}
        if _storage._session != rhs_storage._session {return false}
        if _storage._local != rhs_storage._local {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.protoMessageName + ".Payload"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.event)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.event != .pingPong {
      try visitor.visitSingularEnumField(value: self.event, fieldNumber: 1)
    }
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload, rhs: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload) -> Bool {
    if lhs.event != rhs.event {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
