// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/v1beta4/TelemetryService_Beta4.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides the Telemetry API, which accepts arbitrary event payloads and records them as telemetry data. Various forms
/// of specialized telemetry data may be sent, such as error or timing payloads. User conversion and interest events are
/// also enumerated explicitly for easier analytics calculations and more efficient event transmission.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies status codes that a response may provide.
public enum Bloombox_Services_Telemetry_V1beta4_OperationStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Everything went well.
  case ok // = 0

  /// An error of some kind occurred.
  case error // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .error: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Telemetry_V1beta4_OperationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Telemetry_V1beta4_OperationStatus] = [
    .ok,
    .error,
  ]
}

#endif  // swift(>=4.2)

/// Specifies known errors that may be emitted in exceptional processing cases.
public enum Bloombox_Services_Telemetry_V1beta4_TelemetryError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// An unknown internal error occurred.
  case unknown // = 0

  /// The collection value was missing or found to be invalid.
  case invalidCollection // = 1

  /// The partner code was missing or found to be invalid.
  case invalidPartner // = 2

  /// The location code was missing or found to be invalid.
  case invalidLocation // = 3

  /// The device key was missing or found to be invalid.
  case invalidDevice // = 4

  /// The user key or ID was missing or found to be invalid.
  case invalidUser // = 5

  /// The client key or ID was missing or found to be invalid.
  case invalidClient // = 6

  /// The specified partner could not be found.
  case partnerNotFound // = 7

  /// The specified location could not be found.
  case locationNotFound // = 8

  /// The request payload was invalid in some manner.
  case invalidPayload // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .invalidCollection
    case 2: self = .invalidPartner
    case 3: self = .invalidLocation
    case 4: self = .invalidDevice
    case 5: self = .invalidUser
    case 6: self = .invalidClient
    case 7: self = .partnerNotFound
    case 8: self = .locationNotFound
    case 99: self = .invalidPayload
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .invalidCollection: return 1
    case .invalidPartner: return 2
    case .invalidLocation: return 3
    case .invalidDevice: return 4
    case .invalidUser: return 5
    case .invalidClient: return 6
    case .partnerNotFound: return 7
    case .locationNotFound: return 8
    case .invalidPayload: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Telemetry_V1beta4_TelemetryError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Telemetry_V1beta4_TelemetryError] = [
    .unknown,
    .invalidCollection,
    .invalidPartner,
    .invalidLocation,
    .invalidDevice,
    .invalidUser,
    .invalidClient,
    .partnerNotFound,
    .locationNotFound,
    .invalidPayload,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a response to a request to submit telemetry data.
public struct Bloombox_Services_Telemetry_V1beta4_TelemetryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of the operation.
  public var status: Bloombox_Services_Telemetry_V1beta4_OperationStatus = .ok

  /// Count of events submitted.
  public var count: UInt32 = 0

  /// Service maintenance status, if applicable.
  public var service: Bloombox_Services_ServiceStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an RPC operation to retrieve status information for the telemetry service.
public struct Bloombox_Services_Telemetry_V1beta4_TelemetryPing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to ping the service.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies a response to a service ping.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current service status.
    public var status: Bloombox_Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies an entire ping operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for service status.
    public var request: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request {
      get {return _storage._request ?? Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request for service status.
    public var response: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response {
      get {return _storage._response ?? Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an event related to commercial services. This includes product events, section events, and order events.
public struct Bloombox_Services_Telemetry_V1beta4_CommercialEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies an impression-type event.
  public struct Impression {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Event being reported in this transaction.
    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// Impression event on a menu section.
    public var section: Bloombox_Analytics_Section_Impression {
      get {
        if case .section(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Section_Impression()
      }
      set {_uniqueStorage()._event = .section(newValue)}
    }

    /// Impression event on a menu product.
    public var product: Bloombox_Analytics_Product_Impression {
      get {
        if case .product(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Product_Impression()
      }
      set {_uniqueStorage()._event = .product(newValue)}
    }

    /// Impression event for a commercial shop.
    public var shop: Bloombox_Analytics_Shop_Impression {
      get {
        if case .shop(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Shop_Impression()
      }
      set {_uniqueStorage()._event = .shop(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Event being reported in this transaction.
    public enum OneOf_Event: Equatable {
      /// Impression event on a menu section.
      case section(Bloombox_Analytics_Section_Impression)
      /// Impression event on a menu product.
      case product(Bloombox_Analytics_Product_Impression)
      /// Impression event for a commercial shop.
      case shop(Bloombox_Analytics_Shop_Impression)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.section(let l), .section(let r)): return l == r
        case (.product(let l), .product(let r)): return l == r
        case (.shop(let l), .shop(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a view-type event.
  public struct View {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Event being reported in this transaction.
    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// View event on a menu section.
    public var section: Bloombox_Analytics_Section_View {
      get {
        if case .section(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Section_View()
      }
      set {_uniqueStorage()._event = .section(newValue)}
    }

    /// View event on a menu product.
    public var product: Bloombox_Analytics_Product_View {
      get {
        if case .product(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Product_View()
      }
      set {_uniqueStorage()._event = .product(newValue)}
    }

    /// View event for a commercial shop.
    public var shop: Bloombox_Analytics_Shop_View {
      get {
        if case .shop(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Shop_View()
      }
      set {_uniqueStorage()._event = .shop(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Event being reported in this transaction.
    public enum OneOf_Event: Equatable {
      /// View event on a menu section.
      case section(Bloombox_Analytics_Section_View)
      /// View event on a menu product.
      case product(Bloombox_Analytics_Product_View)
      /// View event for a commercial shop.
      case shop(Bloombox_Analytics_Shop_View)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.section(let l), .section(let r)): return l == r
        case (.product(let l), .product(let r)): return l == r
        case (.shop(let l), .shop(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an action-type event.
  public struct Action {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name for the action being transmitted. This is the string enum name for whatever event type is in use.
    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Event being reported in this transaction.
    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// Action event on a menu section.
    public var section: Bloombox_Analytics_Section_Action {
      get {
        if case .section(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Section_Action()
      }
      set {_uniqueStorage()._event = .section(newValue)}
    }

    /// Action event on a menu product.
    public var product: Bloombox_Analytics_Product_Action {
      get {
        if case .product(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Product_Action()
      }
      set {_uniqueStorage()._event = .product(newValue)}
    }

    /// Action event for a commercial shop.
    public var shop: Bloombox_Analytics_Shop_Action {
      get {
        if case .shop(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Shop_Action()
      }
      set {_uniqueStorage()._event = .shop(newValue)}
    }

    /// Action event on a user order.
    public var order: Bloombox_Analytics_Order_Action {
      get {
        if case .order(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Order_Action()
      }
      set {_uniqueStorage()._event = .order(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Event being reported in this transaction.
    public enum OneOf_Event: Equatable {
      /// Action event on a menu section.
      case section(Bloombox_Analytics_Section_Action)
      /// Action event on a menu product.
      case product(Bloombox_Analytics_Product_Action)
      /// Action event for a commercial shop.
      case shop(Bloombox_Analytics_Shop_Action)
      /// Action event on a user order.
      case order(Bloombox_Analytics_Order_Action)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.section(let l), .section(let r)): return l == r
        case (.product(let l), .product(let r)): return l == r
        case (.shop(let l), .shop(let r)): return l == r
        case (.order(let l), .order(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an event related to a user's identity, account, preferences, or otherwise having some concern with the
/// addressability, authentication, and relevace of a user's experience with Bloombox.
public struct Bloombox_Services_Telemetry_V1beta4_IdentityEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Action taken by or on a user.
  public struct Action {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name of the action we are reporting.
    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// Action taken by or on a user.
    public var action: Bloombox_Analytics_Identity_Action {
      get {
        if case .action(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Identity_Action()
      }
      set {_uniqueStorage()._event = .action(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Event: Equatable {
      /// Action taken by or on a user.
      case action(Bloombox_Analytics_Identity_Action)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.action(let l), .action(let r)): return l == r
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies events that deal with user-submitted searches, including the query itself, the resultset, and any response
/// the user makes based upon that resultset.
public struct Bloombox_Services_Telemetry_V1beta4_SearchEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Event constituting a fulltext search submitted by an end user.
  public struct Query {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Term string for the search, encoded in Base64.
    public var term: String {
      get {return _storage._term}
      set {_uniqueStorage()._term = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Digital property from which this search originated.
    public var property: Bloombox_Analytics_Search_SearchProperty {
      get {return _storage._property}
      set {_uniqueStorage()._property = newValue}
    }

    /// Number of results.
    public var totalResults: UInt32 {
      get {return _storage._totalResults}
      set {_uniqueStorage()._totalResults = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Result selection event by a user, after performing a search.
  public struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Term string for the search, encoded in Base64.
    public var term: String {
      get {return _storage._term}
      set {_uniqueStorage()._term = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Digital property from which this search originated.
    public var property: Bloombox_Analytics_Search_SearchProperty {
      get {return _storage._property}
      set {_uniqueStorage()._property = newValue}
    }

    /// Number of results.
    public var totalResults: UInt32 {
      get {return _storage._totalResults}
      set {_uniqueStorage()._totalResults = newValue}
    }

    /// Index of the tapped result in the set.
    public var selectedResult: UInt32 {
      get {return _storage._selectedResult}
      set {_uniqueStorage()._selectedResult = newValue}
    }

    /// Product key that was selected as a result of this tap.
    public var key: Opencannabis_Base_ProductKey {
      get {return _storage._key ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.services.telemetry.v1beta4"

extension Bloombox_Services_Telemetry_V1beta4_OperationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "ERROR"),
  ]
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "INVALID_COLLECTION"),
    2: .same(proto: "INVALID_PARTNER"),
    3: .same(proto: "INVALID_LOCATION"),
    4: .same(proto: "INVALID_DEVICE"),
    5: .same(proto: "INVALID_USER"),
    6: .same(proto: "INVALID_CLIENT"),
    7: .same(proto: "PARTNER_NOT_FOUND"),
    8: .same(proto: "LOCATION_NOT_FOUND"),
    99: .same(proto: "INVALID_PAYLOAD"),
  ]
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TelemetryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "count"),
    3: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      case 3: try decoder.decodeSingularEnumField(value: &self.service)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.service != .unknown {
      try visitor.visitSingularEnumField(value: self.service, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryResponse, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.count != rhs.count {return false}
    if lhs.service != rhs.service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TelemetryPing"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_TelemetryPing.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_TelemetryPing.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_TelemetryPing.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request? = nil
    var _response: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Operation, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommercialEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_CommercialEvent.protoMessageName + ".Impression"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    10: .same(proto: "section"),
    11: .same(proto: "product"),
    12: .same(proto: "shop"),
  ]

  fileprivate class _StorageClass {
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Section_Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .section(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .section(v)}
        case 11:
          var v: Bloombox_Analytics_Product_Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .product(v)}
        case 12:
          var v: Bloombox_Analytics_Shop_Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .shop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .shop(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._event {
      case .section(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .shop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_CommercialEvent.protoMessageName + ".View"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    10: .same(proto: "section"),
    11: .same(proto: "product"),
    12: .same(proto: "shop"),
  ]

  fileprivate class _StorageClass {
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Section_View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .section(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .section(v)}
        case 11:
          var v: Bloombox_Analytics_Product_View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .product(v)}
        case 12:
          var v: Bloombox_Analytics_Shop_View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .shop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .shop(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._event {
      case .section(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .shop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_CommercialEvent.protoMessageName + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "context"),
    10: .same(proto: "section"),
    11: .same(proto: "product"),
    12: .same(proto: "shop"),
    13: .same(proto: "order"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Section_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .section(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .section(v)}
        case 11:
          var v: Bloombox_Analytics_Product_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .product(v)}
        case 12:
          var v: Bloombox_Analytics_Shop_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .shop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .shop(v)}
        case 13:
          var v: Bloombox_Analytics_Order_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .order(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .order(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._event {
      case .section(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .shop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .order(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_IdentityEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IdentityEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent, rhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_IdentityEvent.protoMessageName + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "context"),
    10: .same(proto: "action"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Identity_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .action(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .action(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if case .action(let v)? = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action, rhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_SearchEvent.protoMessageName + ".Query"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "context"),
    3: .same(proto: "property"),
    4: .standard(proto: "total_results"),
  ]

  fileprivate class _StorageClass {
    var _term: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _property: Bloombox_Analytics_Search_SearchProperty = .propertyUnspecified
    var _totalResults: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _term = source._term
      _context = source._context
      _property = source._property
      _totalResults = source._totalResults
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._term)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._property)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._totalResults)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._term.isEmpty {
        try visitor.visitSingularStringField(value: _storage._term, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._property != .propertyUnspecified {
        try visitor.visitSingularEnumField(value: _storage._property, fieldNumber: 3)
      }
      if _storage._totalResults != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._totalResults, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._term != rhs_storage._term {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._totalResults != rhs_storage._totalResults {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_SearchEvent.protoMessageName + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "context"),
    3: .same(proto: "property"),
    4: .standard(proto: "total_results"),
    5: .standard(proto: "selected_result"),
    6: .same(proto: "key"),
  ]

  fileprivate class _StorageClass {
    var _term: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _property: Bloombox_Analytics_Search_SearchProperty = .propertyUnspecified
    var _totalResults: UInt32 = 0
    var _selectedResult: UInt32 = 0
    var _key: Opencannabis_Base_ProductKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _term = source._term
      _context = source._context
      _property = source._property
      _totalResults = source._totalResults
      _selectedResult = source._selectedResult
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._term)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._property)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._totalResults)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._selectedResult)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._key)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._term.isEmpty {
        try visitor.visitSingularStringField(value: _storage._term, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._property != .propertyUnspecified {
        try visitor.visitSingularEnumField(value: _storage._property, fieldNumber: 3)
      }
      if _storage._totalResults != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._totalResults, fieldNumber: 4)
      }
      if _storage._selectedResult != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._selectedResult, fieldNumber: 5)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._term != rhs_storage._term {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._totalResults != rhs_storage._totalResults {return false}
        if _storage._selectedResult != rhs_storage._selectedResult {return false}
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
