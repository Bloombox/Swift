// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/Instant.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a particular moment in time.
public struct Temporal_Instant: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Instant"

  /// Instant specification option.
  public var spec: OneOf_Spec? {
    get {return _storage._spec}
    set {_uniqueStorage()._spec = newValue}
  }

  /// ISO8601-formatted timestamp.
  public var iso8601: String {
    get {
      if case .iso8601(let v)? = _storage._spec {return v}
      return String()
    }
    set {_uniqueStorage()._spec = .iso8601(newValue)}
  }

  /// Unix epoch timestamp, at millisecond resolution.
  public var timestamp: UInt64 {
    get {
      if case .timestamp(let v)? = _storage._spec {return v}
      return 0
    }
    set {_uniqueStorage()._spec = .timestamp(newValue)}
  }

  /// Protobuf timestamp.
  public var instant: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {
      if case .instant(let v)? = _storage._spec {return v}
      return SwiftProtobuf.Google_Protobuf_Timestamp()
    }
    set {_uniqueStorage()._spec = .instant(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Instant specification option.
  public enum OneOf_Spec: Equatable {
    /// ISO8601-formatted timestamp.
    case iso8601(String)
    /// Unix epoch timestamp, at millisecond resolution.
    case timestamp(UInt64)
    /// Protobuf timestamp.
    case instant(SwiftProtobuf.Google_Protobuf_Timestamp)

    public static func ==(lhs: Temporal_Instant.OneOf_Spec, rhs: Temporal_Instant.OneOf_Spec) -> Bool {
      switch (lhs, rhs) {
      case (.iso8601(let l), .iso8601(let r)): return l == r
      case (.timestamp(let l), .timestamp(let r)): return l == r
      case (.instant(let l), .instant(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._spec = .iso8601(v)}
        case 2:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: UInt64?
          try decoder.decodeSingularUInt64Field(value: &v)
          if let v = v {_storage._spec = .timestamp(v)}
        case 3:
          var v: SwiftProtobuf.Google_Protobuf_Timestamp?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .instant(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .instant(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._spec {
      case .iso8601(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      case .timestamp(let v)?:
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      case .instant(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "temporal"

extension Temporal_Instant: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "iso8601"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "instant"),
  ]

  fileprivate class _StorageClass {
    var _spec: Temporal_Instant.OneOf_Spec?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Temporal_Instant) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._spec != other_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
