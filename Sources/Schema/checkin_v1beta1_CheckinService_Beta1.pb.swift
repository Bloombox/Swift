// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: checkin/v1beta1/CheckinService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the Checkin API, which provides features for checking customers in to a retail dispensary, usually from the
/// dispensary lobby. Checkin happens via checkin hardware stations, or manually via the Bloombox Dashboard.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known errors that may be thrown by checkin operations.
public enum Bloombox_Schema_Services_Checkin_V1beta1_CheckinError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0

  /// Unable to locate the specified identification document.
  case idNotFound // = 1

  /// The user's subject ID, either provided or already known, is currently expired.
  case idExpired // = 2

  /// The user's subject ID failed to be validated in some manner.
  case idInvalid // = 3

  /// The subject ID type is currently unsupported.
  case idTypeUnsupported // = 4

  /// The subject digital card type is invalid or unrecognized.
  case cardTypeInvalid // = 5

  /// The subject digital card is expired.
  case cardExpired // = 6

  /// The subject digital card is suspended.
  case cardSuspended // = 7

  /// The resolved user account is entirely suspended from Bloombox.
  case userSuspended // = 8

  /// The resolved user account is suspended by the backing partner.
  case partnerSuspended // = 9

  /// The partner code was invalid in some way.
  case partnerInvalid // = 10

  /// The location code was invalid in some way.
  case locationInvalid // = 11

  /// The subject document has an invalid issuance jurisdiction.
  case jurisdictionInvalid // = 12

  /// The subject document issuance jurisdiction is not supported or eligible.
  case jurisdictionUnsupported // = 13

  /// The user is not old enough to meet the requisite age requirements for the jurisdiction within which
  /// they attempted to checkin.
  case userUnderage // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .idNotFound
    case 2: self = .idExpired
    case 3: self = .idInvalid
    case 4: self = .idTypeUnsupported
    case 5: self = .cardTypeInvalid
    case 6: self = .cardExpired
    case 7: self = .cardSuspended
    case 8: self = .userSuspended
    case 9: self = .partnerSuspended
    case 10: self = .partnerInvalid
    case 11: self = .locationInvalid
    case 12: self = .jurisdictionInvalid
    case 13: self = .jurisdictionUnsupported
    case 14: self = .userUnderage
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .idNotFound: return 1
    case .idExpired: return 2
    case .idInvalid: return 3
    case .idTypeUnsupported: return 4
    case .cardTypeInvalid: return 5
    case .cardExpired: return 6
    case .cardSuspended: return 7
    case .userSuspended: return 8
    case .partnerSuspended: return 9
    case .partnerInvalid: return 10
    case .locationInvalid: return 11
    case .jurisdictionInvalid: return 12
    case .jurisdictionUnsupported: return 13
    case .userUnderage: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Services_Checkin_V1beta1_CheckinError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Services_Checkin_V1beta1_CheckinError] = [
    .noError,
    .idNotFound,
    .idExpired,
    .idInvalid,
    .idTypeUnsupported,
    .cardTypeInvalid,
    .cardExpired,
    .cardSuspended,
    .userSuspended,
    .partnerSuspended,
    .partnerInvalid,
    .locationInvalid,
    .jurisdictionInvalid,
    .jurisdictionUnsupported,
    .userUnderage,
  ]
}

#endif  // swift(>=4.2)

/// Specifies an RPC operation to retrieve status information for the Checkin API.
public struct Bloombox_Schema_Services_Checkin_V1beta1_Ping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a checkin ping request.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies a checkin ping response.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current service status.
    public var status: Bloombox_Schema_Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies a checkin ping operation, consisting of one request and one response.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to ping.
    public var request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to ping.
    public var response: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response {
      get {return _storage._response ?? Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies information about the user account resolved during a checkin operation. Account flags are expressed, along
/// with enough information for a salutation.
public struct Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key and identity ID for the user who was checked in.
  public var key: Bloombox_Schema_Identity_UserKey {
    get {return _storage._key ?? Bloombox_Schema_Identity_UserKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Active account flags.
  public var flags: Bloombox_Schema_Identity_UserFlags {
    get {return _storage._flags ?? Bloombox_Schema_Identity_UserFlags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_uniqueStorage()._flags = nil}

  /// Person's name information, for display purposes.
  public var name: Opencannabis_Person_Name {
    get {return _storage._name ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies information to prompt a user to enroll via SMS.
public struct Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Provisioned enrollment code.
  public var code: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies a response to a request to check a user in, regardless of whether they checked in via their government ID,
/// a physical card, or an authenticated digital card.
public struct Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies whether the operation was successful. If not, there should be an error listed.
  public var success: Bool {
    get {return _storage._success}
    set {_uniqueStorage()._success = newValue}
  }

  /// Specifies whether the user must enroll to continue.
  public var mustEnroll: Bool {
    get {return _storage._mustEnroll}
    set {_uniqueStorage()._mustEnroll = newValue}
  }

  /// Specifies a known checkin error that occurred, if applicable.
  public var error: Bloombox_Schema_Services_Checkin_V1beta1_CheckinError {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  /// Information about the resulting user account.
  public var user: Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser {
    get {return _storage._user ?? Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  /// Information related to the user's next enrollment action, if required.
  public var enrollment: Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment {
    get {return _storage._enrollment ?? Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment()}
    set {_uniqueStorage()._enrollment = newValue}
  }
  /// Returns true if `enrollment` has been explicitly set.
  public var hasEnrollment: Bool {return _storage._enrollment != nil}
  /// Clears the value of `enrollment`. Subsequent reads from it will return its default value.
  public mutating func clearEnrollment() {_uniqueStorage()._enrollment = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an RPC operation to check a user via their government ID, most notably, a United States Driver's License or
/// Identification Card, issued by a US State.
public struct Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to checkin via a user's government ID.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Raw string, produced from a barcode scan or magstripe read.
    public var raw: String = String()

    /// Partnership scope for the request.
    public var scope: String = String()

    /// Serial number of the device that is submitting this request.
    public var serialNumber: String = String()

    /// Unique hardware fingerprint for the device that is submitting this request.
    public var fingerprint: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies an ID-based checkin operation, consisting of one request and one generic checkin response.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to check a user in via their government ID.
    public var request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Generic checkin response.
    public var response: Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse {
      get {return _storage._response ?? Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to check a user via an authenticated digital representation of their identity, usually in
/// the form of an Apple Wallet based, Bloombox-issued pass.
public struct Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to checkin via a user's digital card.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type ID of the subject digital card.
    public var cardType: String = String()

    /// Raw bytes of the card's barcode, encoded in base64.
    public var payload: String = String()

    /// Embedded signature in the digital card, encoded in base64.
    public var signature: String = String()

    /// Digital signature and hash from the submitting device, encoded in base64.
    public var agent: String = String()

    /// Partnership scope for the request.
    public var scope: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies a digital checkin operation, consisting of one request and one generic checkin response.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request to check a user in via their government ID.
    public var request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request {
      get {return _storage._request ?? Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Generic checkin response.
    public var response: Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse {
      get {return _storage._response ?? Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.checkin.v1beta1"

extension Bloombox_Schema_Services_Checkin_V1beta1_CheckinError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "ID_NOT_FOUND"),
    2: .same(proto: "ID_EXPIRED"),
    3: .same(proto: "ID_INVALID"),
    4: .same(proto: "ID_TYPE_UNSUPPORTED"),
    5: .same(proto: "CARD_TYPE_INVALID"),
    6: .same(proto: "CARD_EXPIRED"),
    7: .same(proto: "CARD_SUSPENDED"),
    8: .same(proto: "USER_SUSPENDED"),
    9: .same(proto: "PARTNER_SUSPENDED"),
    10: .same(proto: "PARTNER_INVALID"),
    11: .same(proto: "LOCATION_INVALID"),
    12: .same(proto: "JURISDICTION_INVALID"),
    13: .same(proto: "JURISDICTION_UNSUPPORTED"),
    14: .same(proto: "USER_UNDERAGE"),
  ]
}

extension Bloombox_Schema_Services_Checkin_V1beta1_Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ping"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping, rhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_Ping.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request, rhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_Ping.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response, rhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_Ping.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_Ping.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request? = nil
    var _response: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Operation, rhs: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckinUser"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "flags"),
    3: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _key: Bloombox_Schema_Identity_UserKey? = nil
    var _flags: Bloombox_Schema_Identity_UserFlags? = nil
    var _name: Opencannabis_Person_Name? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _flags = source._flags
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser, rhs: Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._flags != rhs_storage._flags {return false}
        if _storage._name != rhs_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckinEnrollment"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.code)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment, rhs: Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckinResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .standard(proto: "must_enroll"),
    3: .same(proto: "error"),
    4: .same(proto: "user"),
    5: .same(proto: "enrollment"),
  ]

  fileprivate class _StorageClass {
    var _success: Bool = false
    var _mustEnroll: Bool = false
    var _error: Bloombox_Schema_Services_Checkin_V1beta1_CheckinError = .noError
    var _user: Bloombox_Schema_Services_Checkin_V1beta1_CheckinUser? = nil
    var _enrollment: Bloombox_Schema_Services_Checkin_V1beta1_CheckinEnrollment? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _success = source._success
      _mustEnroll = source._mustEnroll
      _error = source._error
      _user = source._user
      _enrollment = source._enrollment
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._success)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._mustEnroll)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._error)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._enrollment)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._success != false {
        try visitor.visitSingularBoolField(value: _storage._success, fieldNumber: 1)
      }
      if _storage._mustEnroll != false {
        try visitor.visitSingularBoolField(value: _storage._mustEnroll, fieldNumber: 2)
      }
      if _storage._error != .noError {
        try visitor.visitSingularEnumField(value: _storage._error, fieldNumber: 3)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._enrollment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse, rhs: Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._success != rhs_storage._success {return false}
        if _storage._mustEnroll != rhs_storage._mustEnroll {return false}
        if _storage._error != rhs_storage._error {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._enrollment != rhs_storage._enrollment {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IDCheckin"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin, rhs: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "raw"),
    2: .same(proto: "scope"),
    3: .standard(proto: "serial_number"),
    4: .same(proto: "fingerprint"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.raw)
      case 2: try decoder.decodeSingularStringField(value: &self.scope)
      case 3: try decoder.decodeSingularStringField(value: &self.serialNumber)
      case 4: try decoder.decodeSingularStringField(value: &self.fingerprint)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.raw.isEmpty {
      try visitor.visitSingularStringField(value: self.raw, fieldNumber: 1)
    }
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 2)
    }
    if !self.serialNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.serialNumber, fieldNumber: 3)
    }
    if !self.fingerprint.isEmpty {
      try visitor.visitSingularStringField(value: self.fingerprint, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request, rhs: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request) -> Bool {
    if lhs.raw != rhs.raw {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.serialNumber != rhs.serialNumber {return false}
    if lhs.fingerprint != rhs.fingerprint {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request? = nil
    var _response: Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Operation, rhs: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CardCheckin"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin, rhs: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "card_type"),
    2: .same(proto: "payload"),
    3: .same(proto: "signature"),
    4: .same(proto: "agent"),
    5: .same(proto: "scope"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.cardType)
      case 2: try decoder.decodeSingularStringField(value: &self.payload)
      case 3: try decoder.decodeSingularStringField(value: &self.signature)
      case 4: try decoder.decodeSingularStringField(value: &self.agent)
      case 5: try decoder.decodeSingularStringField(value: &self.scope)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cardType.isEmpty {
      try visitor.visitSingularStringField(value: self.cardType, fieldNumber: 1)
    }
    if !self.payload.isEmpty {
      try visitor.visitSingularStringField(value: self.payload, fieldNumber: 2)
    }
    if !self.signature.isEmpty {
      try visitor.visitSingularStringField(value: self.signature, fieldNumber: 3)
    }
    if !self.agent.isEmpty {
      try visitor.visitSingularStringField(value: self.agent, fieldNumber: 4)
    }
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request, rhs: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request) -> Bool {
    if lhs.cardType != rhs.cardType {return false}
    if lhs.payload != rhs.payload {return false}
    if lhs.signature != rhs.signature {return false}
    if lhs.agent != rhs.agent {return false}
    if lhs.scope != rhs.scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request? = nil
    var _response: Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Operation, rhs: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
