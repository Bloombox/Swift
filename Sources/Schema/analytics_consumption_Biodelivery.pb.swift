// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics/consumption/Biodelivery.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines structures and enumerations related to cannabis consumption analytics. This is a private module intended for
/// use in proprietary Bloombox systems.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates methods that enable a consumer to use cannabis.
public enum Bloombox_Consumption_BiodeliveryMethod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default value: unspecified.
  case unspecifiedConsumptionMethod // = 0

  /// Smoked cannabis, in some manner.
  case inhaled // = 1

  /// Edible cannabis, in some manner.
  case ingested // = 2

  /// Topicals applied to the skin.
  case topical // = 3

  /// Transdermal, applied via patch to the skin.
  case transdermal // = 4

  /// Suppositories. They do exist.
  case suppository // = 5

  /// Sublingual products (placed under the tongue). Usually in the form of strips.
  case sublingual // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedConsumptionMethod
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedConsumptionMethod
    case 1: self = .inhaled
    case 2: self = .ingested
    case 3: self = .topical
    case 4: self = .transdermal
    case 5: self = .suppository
    case 6: self = .sublingual
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedConsumptionMethod: return 0
    case .inhaled: return 1
    case .ingested: return 2
    case .topical: return 3
    case .transdermal: return 4
    case .suppository: return 5
    case .sublingual: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Consumption_BiodeliveryMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Consumption_BiodeliveryMethod] = [
    .unspecifiedConsumptionMethod,
    .inhaled,
    .ingested,
    .topical,
    .transdermal,
    .suppository,
    .sublingual,
  ]
}

#endif  // swift(>=4.2)

/// Specifies full information about a method of consumption. Adds detailed information to a `ConsumptionMethod` enum
/// mapping value.
public struct Bloombox_Consumption_BiodeliveryInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// General method of consumption.
  public var method: Bloombox_Consumption_BiodeliveryMethod {
    get {return _storage._method}
    set {_uniqueStorage()._method = newValue}
  }

  /// Specifies further details, based on the type of consumption method.
  public var details: OneOf_Details? {
    get {return _storage._details}
    set {_uniqueStorage()._details = newValue}
  }

  /// Specifies detailed information about cannabis consumption via inhalation.
  public var inhaled: Bloombox_Consumption_BiodeliveryInfo.Inhaled {
    get {
      if case .inhaled(let v)? = _storage._details {return v}
      return Bloombox_Consumption_BiodeliveryInfo.Inhaled()
    }
    set {_uniqueStorage()._details = .inhaled(newValue)}
  }

  /// Specifies detailed information about cannabis consumption via ingestion.
  public var ingested: Bloombox_Consumption_BiodeliveryInfo.Ingested {
    get {
      if case .ingested(let v)? = _storage._details {return v}
      return Bloombox_Consumption_BiodeliveryInfo.Ingested()
    }
    set {_uniqueStorage()._details = .ingested(newValue)}
  }

  /// Specifies detailed information about cannabis consumption via topical (cream-based) medicines.
  public var topical: Bloombox_Consumption_BiodeliveryInfo.Topical {
    get {
      if case .topical(let v)? = _storage._details {return v}
      return Bloombox_Consumption_BiodeliveryInfo.Topical()
    }
    set {_uniqueStorage()._details = .topical(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies further details, based on the type of consumption method.
  public enum OneOf_Details: Equatable {
    /// Specifies detailed information about cannabis consumption via inhalation.
    case inhaled(Bloombox_Consumption_BiodeliveryInfo.Inhaled)
    /// Specifies detailed information about cannabis consumption via ingestion.
    case ingested(Bloombox_Consumption_BiodeliveryInfo.Ingested)
    /// Specifies detailed information about cannabis consumption via topical (cream-based) medicines.
    case topical(Bloombox_Consumption_BiodeliveryInfo.Topical)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Consumption_BiodeliveryInfo.OneOf_Details, rhs: Bloombox_Consumption_BiodeliveryInfo.OneOf_Details) -> Bool {
      switch (lhs, rhs) {
      case (.inhaled(let l), .inhaled(let r)): return l == r
      case (.ingested(let l), .ingested(let r)): return l == r
      case (.topical(let l), .topical(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Specifies detailed information about cannabis consumption via inhalation.
  public struct Inhaled {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the type of inhaled cannabis.
    public var type: Bloombox_Consumption_BiodeliveryInfo.Inhaled.InhaledCannabisType = .smoke

    /// Specifies the tool used to inhale cannabis.
    public var tool: Bloombox_Consumption_BiodeliveryInfo.Inhaled.InhaledCannabisTool = .genericInhaledTool

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Indicates inhalation type.
    public enum InhaledCannabisType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Cannabis smoke.
      case smoke // = 0

      /// Cannabis vapor.
      case vapor // = 1
      case UNRECOGNIZED(Int)

      public init() {
        self = .smoke
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .smoke
        case 1: self = .vapor
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .smoke: return 0
        case .vapor: return 1
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// Specifies tools used to inhale cannabis.
    public enum InhaledCannabisTool: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Generic, or unspecified, inhalation-based cannabis consumption tool.
      case genericInhaledTool // = 0

      /// Dry pipes with no water filtering.
      case dryPipe // = 1

      /// Water pipes and bubblers.
      case waterPipe // = 2

      /// Full bongs.
      case bong // = 3

      /// Rolled joints.
      case rolledJoint // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .genericInhaledTool
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .genericInhaledTool
        case 1: self = .dryPipe
        case 2: self = .waterPipe
        case 3: self = .bong
        case 4: self = .rolledJoint
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .genericInhaledTool: return 0
        case .dryPipe: return 1
        case .waterPipe: return 2
        case .bong: return 3
        case .rolledJoint: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  /// Specifies detailed information about cannabis consumption via ingestion.
  public struct Ingested {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the type of ingested cannabis.
    public var type: Bloombox_Consumption_BiodeliveryInfo.Ingested.IngestedCannabisType = .genericIngestedCannabis

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Enumerates types of ingested cannabis.
    public enum IngestedCannabisType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Generic, or unspecified, ingestion-based cannabis consumption.
      case genericIngestedCannabis // = 0

      /// Cannabis ingestion in the form of food, or edibles.
      case food // = 1

      /// Measured-dose, ingested capsules.
      case capsule // = 2

      /// Raw ingested cannabis flower.
      case flower // = 3

      /// Concentrated liquids added to other foods or taken sub-lingually.
      case tincture // = 4

      /// Concentrated strips usually placed under the tongue.
      case sublingual // = 5
      case UNRECOGNIZED(Int)

      public init() {
        self = .genericIngestedCannabis
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .genericIngestedCannabis
        case 1: self = .food
        case 2: self = .capsule
        case 3: self = .flower
        case 4: self = .tincture
        case 5: self = .sublingual
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .genericIngestedCannabis: return 0
        case .food: return 1
        case .capsule: return 2
        case .flower: return 3
        case .tincture: return 4
        case .sublingual: return 5
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  /// Specifies detailed information about cannabis consumption via topical (cream-based) medicines.
  public struct Topical {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Type of topical cannabis ingested.
    public var type: Bloombox_Consumption_BiodeliveryInfo.Topical.TopicalCannabisType = .genericTopicalCannabis

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Enumerates types of topical cannabis delivery.
    public enum TopicalCannabisType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Generic, or unspecified, topical-based cannabis consumption.
      case genericTopicalCannabis // = 0

      /// Ointments and creams containing cannabis.
      case ointment // = 1

      /// Transdermal patches containing cannabis.
      case transdermal // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .genericTopicalCannabis
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .genericTopicalCannabis
        case 1: self = .ointment
        case 2: self = .transdermal
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .genericTopicalCannabis: return 0
        case .ointment: return 1
        case .transdermal: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.consumption"

extension Bloombox_Consumption_BiodeliveryMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CONSUMPTION_METHOD"),
    1: .same(proto: "INHALED"),
    2: .same(proto: "INGESTED"),
    3: .same(proto: "TOPICAL"),
    4: .same(proto: "TRANSDERMAL"),
    5: .same(proto: "SUPPOSITORY"),
    6: .same(proto: "SUBLINGUAL"),
  ]
}

extension Bloombox_Consumption_BiodeliveryInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".BiodeliveryInfo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "method"),
    10: .same(proto: "inhaled"),
    11: .same(proto: "ingested"),
    12: .same(proto: "topical"),
  ]

  fileprivate class _StorageClass {
    var _method: Bloombox_Consumption_BiodeliveryMethod = .unspecifiedConsumptionMethod
    var _details: Bloombox_Consumption_BiodeliveryInfo.OneOf_Details?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _method = source._method
      _details = source._details
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._method)
        case 10:
          var v: Bloombox_Consumption_BiodeliveryInfo.Inhaled?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .inhaled(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .inhaled(v)}
        case 11:
          var v: Bloombox_Consumption_BiodeliveryInfo.Ingested?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .ingested(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .ingested(v)}
        case 12:
          var v: Bloombox_Consumption_BiodeliveryInfo.Topical?
          if let current = _storage._details {
            try decoder.handleConflictingOneOf()
            if case .topical(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._details = .topical(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._method != .unspecifiedConsumptionMethod {
        try visitor.visitSingularEnumField(value: _storage._method, fieldNumber: 1)
      }
      switch _storage._details {
      case .inhaled(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .ingested(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .topical(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Consumption_BiodeliveryInfo, rhs: Bloombox_Consumption_BiodeliveryInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._method != rhs_storage._method {return false}
        if _storage._details != rhs_storage._details {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Consumption_BiodeliveryInfo.Inhaled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Consumption_BiodeliveryInfo.protoMessageName + ".Inhaled"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "tool"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeSingularEnumField(value: &self.tool)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .smoke {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.tool != .genericInhaledTool {
      try visitor.visitSingularEnumField(value: self.tool, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Consumption_BiodeliveryInfo.Inhaled, rhs: Bloombox_Consumption_BiodeliveryInfo.Inhaled) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.tool != rhs.tool {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Consumption_BiodeliveryInfo.Inhaled.InhaledCannabisType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SMOKE"),
    1: .same(proto: "VAPOR"),
  ]
}

extension Bloombox_Consumption_BiodeliveryInfo.Inhaled.InhaledCannabisTool: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC_INHALED_TOOL"),
    1: .same(proto: "DRY_PIPE"),
    2: .same(proto: "WATER_PIPE"),
    3: .same(proto: "BONG"),
    4: .same(proto: "ROLLED_JOINT"),
  ]
}

extension Bloombox_Consumption_BiodeliveryInfo.Ingested: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Consumption_BiodeliveryInfo.protoMessageName + ".Ingested"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .genericIngestedCannabis {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Consumption_BiodeliveryInfo.Ingested, rhs: Bloombox_Consumption_BiodeliveryInfo.Ingested) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Consumption_BiodeliveryInfo.Ingested.IngestedCannabisType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC_INGESTED_CANNABIS"),
    1: .same(proto: "FOOD"),
    2: .same(proto: "CAPSULE"),
    3: .same(proto: "FLOWER"),
    4: .same(proto: "TINCTURE"),
    5: .same(proto: "SUBLINGUAL"),
  ]
}

extension Bloombox_Consumption_BiodeliveryInfo.Topical: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Consumption_BiodeliveryInfo.protoMessageName + ".Topical"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .genericTopicalCannabis {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Consumption_BiodeliveryInfo.Topical, rhs: Bloombox_Consumption_BiodeliveryInfo.Topical) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Consumption_BiodeliveryInfo.Topical.TopicalCannabisType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC_TOPICAL_CANNABIS"),
    1: .same(proto: "OINTMENT"),
    2: .same(proto: "TRANSDERMAL"),
  ]
}
