// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: dash/v1beta1/DashService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the Dashboard API, which is a private API that provides features specific to supporting the Bloombox main
/// management dashboard and web console.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known error states that may surface when interacting with the Dashboard Service.
public enum Bloombox_Schema_Services_Dash_V1beta1_DashError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0

  /// The specified partner key was found to be invalid.
  case partnerInvalid // = 1

  /// The specified partner key, while valid, could not be resolved.
  case partnerNotFound // = 2

  /// The speciied location key was found to be invalid.
  case locationInvalid // = 3

  /// The specified location key, while valid, could not be resolved.
  case locationNotFound // = 4

  /// The specified integration is not ready.
  case integrationNotReady // = 5

  /// The specified integration is not currently enabled.
  case integrationDisabled // = 6

  /// The specified integration is not currently enabled.
  case integrationAuthfail // = 7

  /// The specified integration settings are not valid.
  case integrationSettingsInvalid // = 9

  /// An error occurred with an integration.
  case integrationError // = 10

  /// Permission was denied for the current security context.
  case permissionDenied // = 90

  /// A routine was found not be implemented.
  case notImplemented // = 91

  /// An unknown or unidentified internal error occurred.
  case internalError // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .partnerInvalid
    case 2: self = .partnerNotFound
    case 3: self = .locationInvalid
    case 4: self = .locationNotFound
    case 5: self = .integrationNotReady
    case 6: self = .integrationDisabled
    case 7: self = .integrationAuthfail
    case 9: self = .integrationSettingsInvalid
    case 10: self = .integrationError
    case 90: self = .permissionDenied
    case 91: self = .notImplemented
    case 99: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .partnerInvalid: return 1
    case .partnerNotFound: return 2
    case .locationInvalid: return 3
    case .locationNotFound: return 4
    case .integrationNotReady: return 5
    case .integrationDisabled: return 6
    case .integrationAuthfail: return 7
    case .integrationSettingsInvalid: return 9
    case .integrationError: return 10
    case .permissionDenied: return 90
    case .notImplemented: return 91
    case .internalError: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Schema_Services_Dash_V1beta1_DashError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Schema_Services_Dash_V1beta1_DashError] = [
    .noError,
    .partnerInvalid,
    .partnerNotFound,
    .locationInvalid,
    .locationNotFound,
    .integrationNotReady,
    .integrationDisabled,
    .integrationAuthfail,
    .integrationSettingsInvalid,
    .integrationError,
    .permissionDenied,
    .notImplemented,
    .internalError,
  ]
}

#endif  // swift(>=4.2)

/// Specifies an RPC operation to retrieve partner-level settings.
public struct Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request for partner-level settings.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner ID.
    public var partner: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request for partner-level settings.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current partner-level settings.
    public var settings: Bloombox_Schema_Partner_Settings_PartnerSettings {
      get {return _storage._settings ?? Bloombox_Schema_Partner_Settings_PartnerSettings()}
      set {_uniqueStorage()._settings = newValue}
    }
    /// Returns true if `settings` has been explicitly set.
    public var hasSettings: Bool {return _storage._settings != nil}
    /// Clears the value of `settings`. Subsequent reads from it will return its default value.
    public mutating func clearSettings() {_uniqueStorage()._settings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to update partner-level settings from the dashboard.
public struct Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to update partner-level settings.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner ID.
    public var partner: String {
      get {return _storage._partner}
      set {_uniqueStorage()._partner = newValue}
    }

    /// Settings to apply for the partner.
    public var settings: Bloombox_Schema_Partner_Settings_PartnerSettings {
      get {return _storage._settings ?? Bloombox_Schema_Partner_Settings_PartnerSettings()}
      set {_uniqueStorage()._settings = newValue}
    }
    /// Returns true if `settings` has been explicitly set.
    public var hasSettings: Bool {return _storage._settings != nil}
    /// Clears the value of `settings`. Subsequent reads from it will return its default value.
    public mutating func clearSettings() {_uniqueStorage()._settings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to retrieve location-level settings.
public struct Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request for location-level settings.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner ID.
    public var partner: String = String()

    /// Location ID.
    public var location: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request for location-level settings.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current location-level settings.
    public var settings: Bloombox_Schema_Partner_Settings_PartnerLocationSettings {
      get {return _storage._settings ?? Bloombox_Schema_Partner_Settings_PartnerLocationSettings()}
      set {_uniqueStorage()._settings = newValue}
    }
    /// Returns true if `settings` has been explicitly set.
    public var hasSettings: Bool {return _storage._settings != nil}
    /// Clears the value of `settings`. Subsequent reads from it will return its default value.
    public mutating func clearSettings() {_uniqueStorage()._settings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to update partner location-level settings from the dashboard.
public struct Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to update location-level settings.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner ID.
    public var partner: String {
      get {return _storage._partner}
      set {_uniqueStorage()._partner = newValue}
    }

    /// Location ID.
    public var location: String {
      get {return _storage._location}
      set {_uniqueStorage()._location = newValue}
    }

    /// Location settings.
    public var settings: Bloombox_Schema_Partner_Settings_PartnerLocationSettings {
      get {return _storage._settings ?? Bloombox_Schema_Partner_Settings_PartnerLocationSettings()}
      set {_uniqueStorage()._settings = newValue}
    }
    /// Returns true if `settings` has been explicitly set.
    public var hasSettings: Bool {return _storage._settings != nil}
    /// Clears the value of `settings`. Subsequent reads from it will return its default value.
    public mutating func clearSettings() {_uniqueStorage()._settings = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Validate settings for an integrated piece of software against a Bloombox account.
public struct Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to validate settings for an integrated piece of software.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner scope for the request. Required.
    public var partner: String = String()

    /// Location scope for the request, if applicable.
    public var location: String = String()

    /// Vendor for which we should validate settings.
    public var vendor: Bloombox_Schema_Partner_Integrations_IntegrationPartner = .internal

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request to validate settings for an integrated piece of software.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Integration error experienced, if any.
    public var err: Bloombox_Schema_Services_Dash_V1beta1_DashError = .noError

    /// Error message, if any.
    public var message: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Test an integrated piece of software against a Bloombox account.
public struct Bloombox_Schema_Services_Dash_V1beta1_TestIntegration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to test an integrated piece of software.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner scope for the request. Required.
    public var partner: String = String()

    /// Location scope for the request, if applicable.
    public var location: String = String()

    /// Vendor for which we should test integration points.
    public var vendor: Bloombox_Schema_Partner_Integrations_IntegrationPartner = .internal

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request to test an integrated piece of software.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Integration error experienced, if any.
    public var err: Bloombox_Schema_Services_Dash_V1beta1_DashError = .noError

    /// Error message, if any.
    public var message: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Manually trigger an integration to run.
public struct Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to trigger an integration.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner scope for the request. Required.
    public var partner: String = String()

    /// Location scope for the request, if applicable.
    public var location: String = String()

    /// Vendor for which we should trigger an integration.
    public var vendor: Bloombox_Schema_Partner_Integrations_IntegrationPartner = .internal

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request to trigger an integration.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Integration error experienced, if any.
    public var err: Bloombox_Schema_Services_Dash_V1beta1_DashError = .noError

    /// Error message, if any.
    public var message: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Fetch an individual partner record.
public struct Bloombox_Schema_Services_Dash_V1beta1_GetPartner {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to retrieve an individual partner record by its ID.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Shortcode for the desired partner.
    public var partner: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request to retrieve an individual partner record.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Resulting partner record.
    public var partner: Bloombox_Schema_Partner_Partner {
      get {return _storage._partner ?? Bloombox_Schema_Partner_Partner()}
      set {_uniqueStorage()._partner = newValue}
    }
    /// Returns true if `partner` has been explicitly set.
    public var hasPartner: Bool {return _storage._partner != nil}
    /// Clears the value of `partner`. Subsequent reads from it will return its default value.
    public mutating func clearPartner() {_uniqueStorage()._partner = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// List locations for a given partner account.
public struct Bloombox_Schema_Services_Dash_V1beta1_ListLocations {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to list locations for a given partner account.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Shortcode for the partner for which we want to list locations.
    public var partner: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request to list locations for a given partner.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Locations owned by the partner, if the partner record could be located.
    public var locations: [Bloombox_Schema_Partner_PartnerLocation] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Retrieve an individual partner location record.
public struct Bloombox_Schema_Services_Dash_V1beta1_GetLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to retrieve an individual partner location record.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Shorcode for the partner that owns the desired location.
    public var partner: String = String()

    /// Shortcode for the desired location.
    public var location: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Response to a request to retrieve an individual location.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Resulting location record.
    public var location: Bloombox_Schema_Partner_PartnerLocation {
      get {return _storage._location ?? Bloombox_Schema_Partner_PartnerLocation()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.dash.v1beta1"

extension Bloombox_Schema_Services_Dash_V1beta1_DashError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "PARTNER_INVALID"),
    2: .same(proto: "PARTNER_NOT_FOUND"),
    3: .same(proto: "LOCATION_INVALID"),
    4: .same(proto: "LOCATION_NOT_FOUND"),
    5: .same(proto: "INTEGRATION_NOT_READY"),
    6: .same(proto: "INTEGRATION_DISABLED"),
    7: .same(proto: "INTEGRATION_AUTHFAIL"),
    9: .same(proto: "INTEGRATION_SETTINGS_INVALID"),
    10: .same(proto: "INTEGRATION_ERROR"),
    90: .same(proto: "PERMISSION_DENIED"),
    91: .same(proto: "NOT_IMPLEMENTED"),
    99: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPartnerSettings"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "settings"),
  ]

  fileprivate class _StorageClass {
    var _settings: Bloombox_Schema_Partner_Settings_PartnerSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _settings = source._settings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._settings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartnerSettings.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._settings != rhs_storage._settings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdatePartnerSettings"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings, rhs: Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "settings"),
  ]

  fileprivate class _StorageClass {
    var _partner: String = String()
    var _settings: Bloombox_Schema_Partner_Settings_PartnerSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _partner = source._partner
      _settings = source._settings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._partner)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._settings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._partner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._partner, fieldNumber: 1)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_UpdatePartnerSettings.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._partner != rhs_storage._partner {return false}
        if _storage._settings != rhs_storage._settings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetLocationSettings"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "settings"),
  ]

  fileprivate class _StorageClass {
    var _settings: Bloombox_Schema_Partner_Settings_PartnerLocationSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _settings = source._settings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._settings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocationSettings.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._settings != rhs_storage._settings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateLocationSettings"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings, rhs: Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "settings"),
  ]

  fileprivate class _StorageClass {
    var _partner: String = String()
    var _location: String = String()
    var _settings: Bloombox_Schema_Partner_Settings_PartnerLocationSettings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _partner = source._partner
      _location = source._location
      _settings = source._settings
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._partner)
        case 2: try decoder.decodeSingularStringField(value: &_storage._location)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._settings)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._partner.isEmpty {
        try visitor.visitSingularStringField(value: _storage._partner, fieldNumber: 1)
      }
      if !_storage._location.isEmpty {
        try visitor.visitSingularStringField(value: _storage._location, fieldNumber: 2)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_UpdateLocationSettings.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._partner != rhs_storage._partner {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._settings != rhs_storage._settings {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ValidateIntegration"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration, rhs: Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "vendor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      case 3: try decoder.decodeSingularEnumField(value: &self.vendor)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    if self.vendor != .internal {
      try visitor.visitSingularEnumField(value: self.vendor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.location != rhs.location {return false}
    if lhs.vendor != rhs.vendor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.err)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.err != .noError {
      try visitor.visitSingularEnumField(value: self.err, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_ValidateIntegration.Response) -> Bool {
    if lhs.err != rhs.err {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_TestIntegration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestIntegration"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_TestIntegration, rhs: Bloombox_Schema_Services_Dash_V1beta1_TestIntegration) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "vendor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      case 3: try decoder.decodeSingularEnumField(value: &self.vendor)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    if self.vendor != .internal {
      try visitor.visitSingularEnumField(value: self.vendor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.location != rhs.location {return false}
    if lhs.vendor != rhs.vendor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.err)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.err != .noError {
      try visitor.visitSingularEnumField(value: self.err, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_TestIntegration.Response) -> Bool {
    if lhs.err != rhs.err {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TriggerIntegration"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration, rhs: Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "vendor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      case 3: try decoder.decodeSingularEnumField(value: &self.vendor)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    if self.vendor != .internal {
      try visitor.visitSingularEnumField(value: self.vendor, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.location != rhs.location {return false}
    if lhs.vendor != rhs.vendor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.err)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.err != .noError {
      try visitor.visitSingularEnumField(value: self.err, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_TriggerIntegration.Response) -> Bool {
    if lhs.err != rhs.err {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetPartner: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPartner"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartner, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartner) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetPartner.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetPartner.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartner.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartner.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetPartner.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetPartner.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
  ]

  fileprivate class _StorageClass {
    var _partner: Bloombox_Schema_Partner_Partner? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _partner = source._partner
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._partner)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._partner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartner.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetPartner.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._partner != rhs_storage._partner {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_ListLocations: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListLocations"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_ListLocations, rhs: Bloombox_Schema_Services_Dash_V1beta1_ListLocations) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_ListLocations.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_ListLocations.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_ListLocations.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_ListLocations.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_ListLocations.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_ListLocations.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "locations"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.locations)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.locations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.locations, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_ListLocations.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_ListLocations.Response) -> Bool {
    if lhs.locations != rhs.locations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetLocation"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocation, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocation) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetLocation.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetLocation.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocation.Request, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocation.Request) -> Bool {
    if lhs.partner != rhs.partner {return false}
    if lhs.location != rhs.location {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Dash_V1beta1_GetLocation.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Schema_Services_Dash_V1beta1_GetLocation.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _location: Bloombox_Schema_Partner_PartnerLocation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocation.Response, rhs: Bloombox_Schema_Services_Dash_V1beta1_GetLocation.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
