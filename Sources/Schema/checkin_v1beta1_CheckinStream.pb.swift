// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: checkin/v1beta1/CheckinStream.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies types of checkin assertions that can be made by a user. A checkin assertion is an event where a user
/// asserts their identity or qualifications to purchase cannabis, along with an official document of some kind.
public enum Bloombox_Tables_Checkin_V1beta1_CheckinAssertionType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified or unrecognized checkin assertion type.
  case unspecified // = 0

  /// Checkin via government-issued ID.
  case id // = 1

  /// Checkin via a physically-issued checkin or loyalty card.
  case physical // = 2

  /// Checkin via an authenticated digital card.
  case digital // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .id
    case 2: self = .physical
    case 3: self = .digital
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .id: return 1
    case .physical: return 2
    case .digital: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies the partnership scope for a single checkin operation.
public struct Bloombox_Tables_Checkin_V1beta1_CheckinScope {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Partner account attached to a given checkin.
  public var partner: String = String()

  /// Partner location a checkin occurred at.
  public var location: String = String()

  /// Specific device UUID that committed a user checkin.
  public var device: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies a table of raw events, serialized as JSON.
public struct Bloombox_Tables_Checkin_V1beta1_CheckinStream {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Checkin UUID. Generated when it happens and used to correlate telemetry.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Specifies the type of checkin assertion that was made.
  public var type: Bloombox_Tables_Checkin_V1beta1_CheckinAssertionType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Timestamp describing when this checkin occurred.
  public var occurred: UInt64 {
    get {return _storage._occurred}
    set {_uniqueStorage()._occurred = newValue}
  }

  /// Specifies the partnership scope of a given checkin.
  public var scope: Bloombox_Tables_Checkin_V1beta1_CheckinScope {
    get {return _storage._scope ?? Bloombox_Tables_Checkin_V1beta1_CheckinScope()}
    set {_uniqueStorage()._scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  public var hasScope: Bool {return _storage._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  public mutating func clearScope() {_storage._scope = nil}

  /// User key that was matched to this checkin operation.
  public var user: Bloombox_Schema_Identity_UserKey {
    get {return _storage._user ?? Bloombox_Schema_Identity_UserKey()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_storage._user = nil}

  /// Specifies whether checkin access was granted for the invoking user.
  public var granted: Bool {
    get {return _storage._granted}
    set {_uniqueStorage()._granted = newValue}
  }

  /// Specifies the error that prevented the user from checking in, if any.
  public var error: Bloombox_Schema_Services_Checkin_V1beta1_CheckinError {
    get {return _storage._error}
    set {_uniqueStorage()._error = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.tables.checkin.v1beta1"

extension Bloombox_Tables_Checkin_V1beta1_CheckinAssertionType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "ID"),
    2: .same(proto: "PHYSICAL"),
    3: .same(proto: "DIGITAL"),
  ]
}

extension Bloombox_Tables_Checkin_V1beta1_CheckinScope: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckinScope"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "device"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.partner)
      case 2: try decoder.decodeSingularStringField(value: &self.location)
      case 3: try decoder.decodeSingularStringField(value: &self.device)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.partner.isEmpty {
      try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
    }
    if !self.location.isEmpty {
      try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
    }
    if !self.device.isEmpty {
      try visitor.visitSingularStringField(value: self.device, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Tables_Checkin_V1beta1_CheckinScope) -> Bool {
    if self.partner != other.partner {return false}
    if self.location != other.location {return false}
    if self.device != other.device {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Tables_Checkin_V1beta1_CheckinStream: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckinStream"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "type"),
    3: .same(proto: "occurred"),
    4: .same(proto: "scope"),
    5: .same(proto: "user"),
    6: .same(proto: "granted"),
    7: .same(proto: "error"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _type: Bloombox_Tables_Checkin_V1beta1_CheckinAssertionType = .unspecified
    var _occurred: UInt64 = 0
    var _scope: Bloombox_Tables_Checkin_V1beta1_CheckinScope? = nil
    var _user: Bloombox_Schema_Identity_UserKey? = nil
    var _granted: Bool = false
    var _error: Bloombox_Schema_Services_Checkin_V1beta1_CheckinError = .noError

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _type = source._type
      _occurred = source._occurred
      _scope = source._scope
      _user = source._user
      _granted = source._granted
      _error = source._error
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularUInt64Field(value: &_storage._occurred)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._scope)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._granted)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._error)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if _storage._type != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if _storage._occurred != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._occurred, fieldNumber: 3)
      }
      if let v = _storage._scope {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._granted != false {
        try visitor.visitSingularBoolField(value: _storage._granted, fieldNumber: 6)
      }
      if _storage._error != .noError {
        try visitor.visitSingularEnumField(value: _storage._error, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Tables_Checkin_V1beta1_CheckinStream) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._occurred != other_storage._occurred {return false}
        if _storage._scope != other_storage._scope {return false}
        if _storage._user != other_storage._user {return false}
        if _storage._granted != other_storage._granted {return false}
        if _storage._error != other_storage._error {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
