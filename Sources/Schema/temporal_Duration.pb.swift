// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: temporal/Duration.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies time units that may be used to express durations.
public enum Opencannabis_Temporal_TimeUnit: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Millisecond-level resolution.
  case milliseconds // = 0

  /// Microsecond-level resolution.
  case microseconds // = 1

  /// Second-level resolution.
  case seconds // = 2

  /// Minute-level resolution.
  case minutes // = 3

  /// Hour-level resolution.
  case hours // = 4

  /// Day-level resolution.
  case days // = 5

  /// Week-level resolution.
  case weeks // = 6

  /// Month-level resolution.
  case months // = 7

  /// Year-level resolution.
  case years // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .milliseconds
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .milliseconds
    case 1: self = .microseconds
    case 2: self = .seconds
    case 3: self = .minutes
    case 4: self = .hours
    case 5: self = .days
    case 6: self = .weeks
    case 7: self = .months
    case 8: self = .years
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .milliseconds: return 0
    case .microseconds: return 1
    case .seconds: return 2
    case .minutes: return 3
    case .hours: return 4
    case .days: return 5
    case .weeks: return 6
    case .months: return 7
    case .years: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Temporal_TimeUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Temporal_TimeUnit] = [
    .milliseconds,
    .microseconds,
    .seconds,
    .minutes,
    .hours,
    .days,
    .weeks,
    .months,
    .years,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a duration, or, a distance between two points in temporal space.
public struct Opencannabis_Temporal_Duration {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the unit this duration operates on.
  public var unit: Opencannabis_Temporal_TimeUnit = .milliseconds

  /// Specifies the amount expressed of the above duration.
  public var amount: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.temporal"

extension Opencannabis_Temporal_TimeUnit: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MILLISECONDS"),
    1: .same(proto: "MICROSECONDS"),
    2: .same(proto: "SECONDS"),
    3: .same(proto: "MINUTES"),
    4: .same(proto: "HOURS"),
    5: .same(proto: "DAYS"),
    6: .same(proto: "WEEKS"),
    7: .same(proto: "MONTHS"),
    8: .same(proto: "YEARS"),
  ]
}

extension Opencannabis_Temporal_Duration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Duration"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unit"),
    2: .same(proto: "amount"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.unit)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.amount)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.unit != .milliseconds {
      try visitor.visitSingularEnumField(value: self.unit, fieldNumber: 1)
    }
    if self.amount != 0 {
      try visitor.visitSingularUInt32Field(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Temporal_Duration, rhs: Opencannabis_Temporal_Duration) -> Bool {
    if lhs.unit != rhs.unit {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
