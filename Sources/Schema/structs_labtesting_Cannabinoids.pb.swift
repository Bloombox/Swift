// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/labtesting/Cannabinoids.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides definitions and enumerations related specifically to compounds classified as cannabinoids. This includes an
/// enumeration of all cannabinoid compounds known or supported by the system. Cannabinoid ratios and other ancillary
/// definitions (but still related to cannabinoids) can be found here.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates available cannabinoid compounds, that generally show up in test results related to cannabis.
public enum Opencannabis_Structs_Labtesting_Cannabinoid: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// THC.
  case thc // = 0

  /// THC-a.
  case thcA // = 1

  /// THC-v.
  case thcV // = 2

  /// THC-va.
  case thcVa // = 3

  /// THC-8.
  case thc8 // = 4

  /// THC-9.
  case thc9 // = 5

  /// CBD.
  case cbd // = 10

  /// CBD-a.
  case cbdA // = 11

  /// CBD-v.
  case cbdV // = 12

  /// CBD-va.
  case cbdVa // = 13

  /// CBC.
  case cbc // = 20

  /// CBC-a.
  case cbcA // = 21

  /// CBG.
  case cbg // = 30

  /// CBG-a.
  case cbgA // = 31

  /// CBN.
  case cbn // = 40

  /// CBN-a.
  case cbnA // = 41

  /// CBV.
  case cbv // = 50

  /// CBV-a.
  case cbvA // = 51

  /// TAC.
  case tac // = 60

  /// CBL.
  case cbl // = 70

  /// CBL-a.
  case cblA // = 71
  case UNRECOGNIZED(Int)

  public init() {
    self = .thc
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .thc
    case 1: self = .thcA
    case 2: self = .thcV
    case 3: self = .thcVa
    case 4: self = .thc8
    case 5: self = .thc9
    case 10: self = .cbd
    case 11: self = .cbdA
    case 12: self = .cbdV
    case 13: self = .cbdVa
    case 20: self = .cbc
    case 21: self = .cbcA
    case 30: self = .cbg
    case 31: self = .cbgA
    case 40: self = .cbn
    case 41: self = .cbnA
    case 50: self = .cbv
    case 51: self = .cbvA
    case 60: self = .tac
    case 70: self = .cbl
    case 71: self = .cblA
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .thc: return 0
    case .thcA: return 1
    case .thcV: return 2
    case .thcVa: return 3
    case .thc8: return 4
    case .thc9: return 5
    case .cbd: return 10
    case .cbdA: return 11
    case .cbdV: return 12
    case .cbdVa: return 13
    case .cbc: return 20
    case .cbcA: return 21
    case .cbg: return 30
    case .cbgA: return 31
    case .cbn: return 40
    case .cbnA: return 41
    case .cbv: return 50
    case .cbvA: return 51
    case .tac: return 60
    case .cbl: return 70
    case .cblA: return 71
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Structs_Labtesting_Cannabinoid: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Structs_Labtesting_Cannabinoid] = [
    .thc,
    .thcA,
    .thcV,
    .thcVa,
    .thc8,
    .thc9,
    .cbd,
    .cbdA,
    .cbdV,
    .cbdVa,
    .cbc,
    .cbcA,
    .cbg,
    .cbgA,
    .cbn,
    .cbnA,
    .cbv,
    .cbvA,
    .tac,
    .cbl,
    .cblA,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates available cannabinoid ratio states. This value is computed from the THC and CBD test results, if
/// available, and expresses the general (low-resolution) ratio between those two values, which are the most important in
/// cannabis test result data.
public enum Opencannabis_Structs_Labtesting_CannabinoidRatio: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No cannabinoid dominance.
  case noCannabinoidPreference // = 0

  /// Majority THC or only THC.
  case thcOnly // = 1

  /// THC majority, with a minority of CBD.
  case thcOverCbd // = 2

  /// Equal THC and CBD content.
  case equal // = 3

  /// CBD majority, with a minority of THC.
  case cbdOverThc // = 4

  /// Majority CBD or only CBD.
  case cbdOnly // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .noCannabinoidPreference
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noCannabinoidPreference
    case 1: self = .thcOnly
    case 2: self = .thcOverCbd
    case 3: self = .equal
    case 4: self = .cbdOverThc
    case 5: self = .cbdOnly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noCannabinoidPreference: return 0
    case .thcOnly: return 1
    case .thcOverCbd: return 2
    case .equal: return 3
    case .cbdOverThc: return 4
    case .cbdOnly: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Structs_Labtesting_CannabinoidRatio: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Structs_Labtesting_CannabinoidRatio] = [
    .noCannabinoidPreference,
    .thcOnly,
    .thcOverCbd,
    .equal,
    .cbdOverThc,
    .cbdOnly,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Opencannabis_Structs_Labtesting_Cannabinoid: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "THC"),
    1: .same(proto: "THC_A"),
    2: .same(proto: "THC_V"),
    3: .same(proto: "THC_VA"),
    4: .same(proto: "THC_8"),
    5: .same(proto: "THC_9"),
    10: .same(proto: "CBD"),
    11: .same(proto: "CBD_A"),
    12: .same(proto: "CBD_V"),
    13: .same(proto: "CBD_VA"),
    20: .same(proto: "CBC"),
    21: .same(proto: "CBC_A"),
    30: .same(proto: "CBG"),
    31: .same(proto: "CBG_A"),
    40: .same(proto: "CBN"),
    41: .same(proto: "CBN_A"),
    50: .same(proto: "CBV"),
    51: .same(proto: "CBV_A"),
    60: .same(proto: "TAC"),
    70: .same(proto: "CBL"),
    71: .same(proto: "CBL_A"),
  ]
}

extension Opencannabis_Structs_Labtesting_CannabinoidRatio: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_CANNABINOID_PREFERENCE"),
    1: .same(proto: "THC_ONLY"),
    2: .same(proto: "THC_OVER_CBD"),
    3: .same(proto: "EQUAL"),
    4: .same(proto: "CBD_OVER_THC"),
    5: .same(proto: "CBD_ONLY"),
  ]
}
