// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: menu/v1beta1/MenuService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known errors that may be thrown by menu operations.
public enum Services_Menu_V1beta1_MenuError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0

  /// The specified partner ID is invalid.
  case partnerInvalid // = 1

  /// The specified location ID is invalid.
  case locationInvalid // = 2

  /// The specified section value was invalid.
  case sectionInvalid // = 3

  /// The specified section could not be found.
  case sectionNotFound // = 4

  /// The specified partner/location pair was valid, but menu data could not be resolved.
  case menuNotFound // = 5

  /// The server encountered some internal error.
  case internalError // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .partnerInvalid
    case 2: self = .locationInvalid
    case 3: self = .sectionInvalid
    case 4: self = .sectionNotFound
    case 5: self = .menuNotFound
    case 6: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .partnerInvalid: return 1
    case .locationInvalid: return 2
    case .sectionInvalid: return 3
    case .sectionNotFound: return 4
    case .menuNotFound: return 5
    case .internalError: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies an RPC operation to retrieve status information for the Menu API.
public struct Services_Menu_V1beta1_Ping: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Ping"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a menu ping request.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Services_Menu_V1beta1_Ping.protoMessageName + ".Request"

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let _ = try decoder.nextFieldNumber() {
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies a menu ping response.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Services_Menu_V1beta1_Ping.protoMessageName + ".Response"

    /// Current service status.
    public var status: Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &self.status)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.status != .unknown {
        try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies a menu ping operation, consisting of one request and one response.
  public struct Operation: SwiftProtobuf.Message {
    public static let protoMessageName: String = Services_Menu_V1beta1_Ping.protoMessageName + ".Operation"

    /// Request to ping.
    public var request: Services_Menu_V1beta1_Ping.Request {
      get {return _storage._request ?? Services_Menu_V1beta1_Ping.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_storage._request = nil}

    /// Response to the requested ping.
    public var response: Services_Menu_V1beta1_Ping.Response {
      get {return _storage._response ?? Services_Menu_V1beta1_Ping.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_storage._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._request {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if let v = _storage._response {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies an RPC operation to retrieve menu data, either in full (i.e. the entire menu, compose of all sections), or
/// for a given set of specified sections.
public struct Services_Menu_V1beta1_GetMenu: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".GetMenu"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request payload to retrieve a menu.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Services_Menu_V1beta1_GetMenu.protoMessageName + ".Request"

    /// Partnership scope for the request.
    public var scope: String = String()

    /// Flag indicating a full menu, including hidden/out-of-stock items.
    public var full: Bool = false

    /// Only include menu keys, no detail data.
    public var keysOnly: Bool = false

    /// Don't return the menu if it's identical to this fingerprint.
    public var snapshot: String = String()

    /// Bloom filter to consider when returning or processing menu items.
    public var fingerprint: String = String()

    /// Sections to include in the menu. If unspecified, include all sections.
    public var section: Products_Menu_Section_Section = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.scope)
        case 2: try decoder.decodeSingularBoolField(value: &self.full)
        case 3: try decoder.decodeSingularBoolField(value: &self.keysOnly)
        case 4: try decoder.decodeSingularStringField(value: &self.snapshot)
        case 5: try decoder.decodeSingularStringField(value: &self.fingerprint)
        case 6: try decoder.decodeSingularEnumField(value: &self.section)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.scope.isEmpty {
        try visitor.visitSingularStringField(value: self.scope, fieldNumber: 1)
      }
      if self.full != false {
        try visitor.visitSingularBoolField(value: self.full, fieldNumber: 2)
      }
      if self.keysOnly != false {
        try visitor.visitSingularBoolField(value: self.keysOnly, fieldNumber: 3)
      }
      if !self.snapshot.isEmpty {
        try visitor.visitSingularStringField(value: self.snapshot, fieldNumber: 4)
      }
      if !self.fingerprint.isEmpty {
        try visitor.visitSingularStringField(value: self.fingerprint, fieldNumber: 5)
      }
      if self.section != .unspecified {
        try visitor.visitSingularEnumField(value: self.section, fieldNumber: 6)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Specifies the response to a request to retrieve menu data.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Services_Menu_V1beta1_GetMenu.protoMessageName + ".Response"

    /// Specifies the actual menu data payload returned in this response. The menu payload is independently usable, and
    /// includes any raw data or metadata needed to process the menu.
    public var catalog: Products_Menu_Menu {
      get {return _storage._catalog ?? Products_Menu_Menu()}
      set {_uniqueStorage()._catalog = newValue}
    }
    /// Returns true if `catalog` has been explicitly set.
    public var hasCatalog: Bool {return _storage._catalog != nil}
    /// Clears the value of `catalog`. Subsequent reads from it will return its default value.
    public mutating func clearCatalog() {_storage._catalog = nil}

    /// Total count of products included in this response, across all menu sections.
    public var count: Int32 {
      get {return _storage._count}
      set {_uniqueStorage()._count = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._catalog)
          case 2: try decoder.decodeSingularInt32Field(value: &_storage._count)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._catalog {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
        if _storage._count != 0 {
          try visitor.visitSingularInt32Field(value: _storage._count, fieldNumber: 2)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "services.menu.v1beta1"

extension Services_Menu_V1beta1_MenuError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "PARTNER_INVALID"),
    2: .same(proto: "LOCATION_INVALID"),
    3: .same(proto: "SECTION_INVALID"),
    4: .same(proto: "SECTION_NOT_FOUND"),
    5: .same(proto: "MENU_NOT_FOUND"),
    6: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Services_Menu_V1beta1_Ping: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_Ping) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Services_Menu_V1beta1_Ping.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_Ping.Request) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Services_Menu_V1beta1_Ping.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_Ping.Response) -> Bool {
    if self.status != other.status {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Services_Menu_V1beta1_Ping.Operation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Services_Menu_V1beta1_Ping.Request? = nil
    var _response: Services_Menu_V1beta1_Ping.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_Ping.Operation) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._request != other_storage._request {return false}
        if _storage._response != other_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Services_Menu_V1beta1_GetMenu: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_GetMenu) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Services_Menu_V1beta1_GetMenu.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "full"),
    3: .standard(proto: "keys_only"),
    4: .same(proto: "snapshot"),
    5: .same(proto: "fingerprint"),
    6: .same(proto: "section"),
  ]

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_GetMenu.Request) -> Bool {
    if self.scope != other.scope {return false}
    if self.full != other.full {return false}
    if self.keysOnly != other.keysOnly {return false}
    if self.snapshot != other.snapshot {return false}
    if self.fingerprint != other.fingerprint {return false}
    if self.section != other.section {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Services_Menu_V1beta1_GetMenu.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catalog"),
    2: .same(proto: "count"),
  ]

  fileprivate class _StorageClass {
    var _catalog: Products_Menu_Menu? = nil
    var _count: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _catalog = source._catalog
      _count = source._count
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Services_Menu_V1beta1_GetMenu.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._catalog != other_storage._catalog {return false}
        if _storage._count != other_storage._count {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
