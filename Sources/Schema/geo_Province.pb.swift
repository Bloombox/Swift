// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: geo/Province.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a US or non-US province.
public struct Opencannabis_Geo_Province {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var spec: Opencannabis_Geo_Province.OneOf_Spec? = nil

  public var state: Opencannabis_Geo_Usa_USState {
    get {
      if case .state(let v)? = spec {return v}
      return .unspecified
    }
    set {spec = .state(newValue)}
  }

  public var province: String {
    get {
      if case .province(let v)? = spec {return v}
      return String()
    }
    set {spec = .province(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Spec: Equatable {
    case state(Opencannabis_Geo_Usa_USState)
    case province(String)

    public static func ==(lhs: Opencannabis_Geo_Province.OneOf_Spec, rhs: Opencannabis_Geo_Province.OneOf_Spec) -> Bool {
      switch (lhs, rhs) {
      case (.state(let l), .state(let r)): return l == r
      case (.province(let l), .province(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.geo"

extension Opencannabis_Geo_Province: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Province"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "province"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1:
        if self.spec != nil {try decoder.handleConflictingOneOf()}
        var v: Opencannabis_Geo_Usa_USState?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.spec = .state(v)}
      case 2:
        if self.spec != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.spec = .province(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    switch self.spec {
    case .state(let v)?:
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    case .province(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Geo_Province) -> Bool {
    if self.spec != other.spec {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
