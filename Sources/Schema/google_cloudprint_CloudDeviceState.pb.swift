// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloudprint/CloudDeviceState.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines structures that specify state for a given cloud-managed printer device.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents the entire cloud-connected device state.
public struct Google_Cloudprint_CloudDeviceState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the CDS in the form "X.Y" where changes to Y are backwards compatible, and changes to X are not.
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Whether device is connected to the server. It is not intended to be reported by the device, it's set by the server.
  public var cloudConnectionState: Google_Cloudprint_CloudDeviceState.CloudConnectionStateType {
    get {return _storage._cloudConnectionState}
    set {_uniqueStorage()._cloudConnectionState = newValue}
  }

  /// Defined for devices with printing capabilities.
  public var printer: Google_Cloudprint_PrinterStateSection {
    get {return _storage._printer ?? Google_Cloudprint_PrinterStateSection()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Supported device states.
  public enum StateType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Device is ready to accept jobs. Self-testing, low power and all other states in which the device can start
    /// processing newly submitted jobs without user intervention should be mapped into this state.
    case idle // = 0

    /// Processing jobs (e.g. printing).
    case processing // = 1

    /// Device cannot process jobs. User should fix the problem to resume the processing (e.g. printer is out of paper).
    case stopped // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .idle
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .idle
      case 1: self = .processing
      case 2: self = .stopped
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .idle: return 0
      case .processing: return 1
      case .stopped: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Device cloud connectivity state.
  public enum CloudConnectionStateType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case unknown // = 0
    case notConfigured // = 1
    case online // = 2
    case offline // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknown
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .notConfigured
      case 2: self = .online
      case 3: self = .offline
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .notConfigured: return 1
      case .online: return 2
      case .offline: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloudprint_CloudDeviceState.StateType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_CloudDeviceState.StateType] = [
    .idle,
    .processing,
    .stopped,
  ]
}

extension Google_Cloudprint_CloudDeviceState.CloudConnectionStateType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_CloudDeviceState.CloudConnectionStateType] = [
    .unknown,
    .notConfigured,
    .online,
    .offline,
  ]
}

#endif  // swift(>=4.2)

/// Represents a cloud device's state in a form convenient for display in a UI.
public struct Google_Cloudprint_CloudDeviceUiState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Device state summary (required).
  public var summary: Google_Cloudprint_CloudDeviceUiState.Summary {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  /// Overall severity (error level) of the device state (required). Must only be HIGH in the case that the device is
  /// STOPPED.
  public var severity: Google_Cloudprint_CloudDeviceUiState.Severity {
    get {return _storage._severity}
    set {_uniqueStorage()._severity = newValue}
  }

  /// Number of issues detected. Present if and only if CDS is nontrivial.
  public var numIssues: Int32 {
    get {return _storage._numIssues}
    set {_uniqueStorage()._numIssues = newValue}
  }

  /// Heuristically determined most relevant message from a state item. Present if and only if CDS is nontrivial, the
  /// device is not OFFLINE, and the maximum severity of a state item is at least MEDIUM if the device is IDLE or
  /// PROCESSING, or at least LOW if the device is STOPPED.
  public var caption: String {
    get {return _storage._caption}
    set {_uniqueStorage()._caption = newValue}
  }

  /// State items specific to the printing capability of the device. Present if and only if CDS is nontrivial and this
  /// CloudDeviceUiState object is being returned in a single printer lookup or in a recent printer search.
  public var printer: Google_Cloudprint_PrinterUiStateSection {
    get {return _storage._printer ?? Google_Cloudprint_PrinterUiStateSection()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum Summary: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case idle // = 0
    case processing // = 1
    case stopped // = 2
    case offline // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .idle
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .idle
      case 1: self = .processing
      case 2: self = .stopped
      case 3: self = .offline
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .idle: return 0
      case .processing: return 1
      case .stopped: return 2
      case .offline: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum Severity: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case none // = 0
    case low // = 1
    case medium // = 2
    case high // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .none
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .none
      case 1: self = .low
      case 2: self = .medium
      case 3: self = .high
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .none: return 0
      case .low: return 1
      case .medium: return 2
      case .high: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Google_Cloudprint_CloudDeviceUiState.Summary: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_CloudDeviceUiState.Summary] = [
    .idle,
    .processing,
    .stopped,
    .offline,
  ]
}

extension Google_Cloudprint_CloudDeviceUiState.Severity: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_CloudDeviceUiState.Severity] = [
    .none,
    .low,
    .medium,
    .high,
  ]
}

#endif  // swift(>=4.2)

/// Contains one UI state item for each CDS state item using the information obtained from cross-referencing the CDD.
public struct Google_Cloudprint_PrinterUiStateSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var vendorItem: [Google_Cloudprint_PrinterUiStateSection.Item] = []

  public var inputTrayItem: [Google_Cloudprint_PrinterUiStateSection.Item] = []

  public var outputBinItem: [Google_Cloudprint_PrinterUiStateSection.Item] = []

  public var markerItem: [Google_Cloudprint_PrinterUiStateSection.Item] = []

  public var coverItem: [Google_Cloudprint_PrinterUiStateSection.Item] = []

  public var mediaPathItem: [Google_Cloudprint_PrinterUiStateSection.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// A UI state item with a severity level and either:
  /// (1) a localized message and UI-displayable data from the properties and state of a particular unit of the device,
  ///     or
  /// (2) a possibly non-localized vendor state message.
  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// The severity of this individual state item (required).
    public var severity: Google_Cloudprint_CloudDeviceUiState.Severity = .none

    /// A message produced from a state item, e.g. Black ink level is 60%. This message may not be localized if it is
    /// from a VendorState.Item (required).
    public var message: String = String()

    /// A non-localized vendor-specific message that provides additional information about the state of the device unit
    /// described by this item.
    public var vendorMessage: String = String()

    /// The fullness level of an input tray, output bin or marker.
    public var levelPercent: Int32 = 0

    /// The color of a marker.
    public var color: Google_Cloudprint_Marker.Color.TypeEnum = .custom

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Represents the printer state.
public struct Google_Cloudprint_PrinterStateSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Current printer state (required).
  public var state: Google_Cloudprint_CloudDeviceState.StateType {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// State of the input trays.
  public var inputTrayState: Google_Cloudprint_InputTrayState {
    get {return _storage._inputTrayState ?? Google_Cloudprint_InputTrayState()}
    set {_uniqueStorage()._inputTrayState = newValue}
  }
  /// Returns true if `inputTrayState` has been explicitly set.
  public var hasInputTrayState: Bool {return _storage._inputTrayState != nil}
  /// Clears the value of `inputTrayState`. Subsequent reads from it will return its default value.
  public mutating func clearInputTrayState() {_uniqueStorage()._inputTrayState = nil}

  /// State of the output bins.
  public var outputBinState: Google_Cloudprint_OutputBinState {
    get {return _storage._outputBinState ?? Google_Cloudprint_OutputBinState()}
    set {_uniqueStorage()._outputBinState = newValue}
  }
  /// Returns true if `outputBinState` has been explicitly set.
  public var hasOutputBinState: Bool {return _storage._outputBinState != nil}
  /// Clears the value of `outputBinState`. Subsequent reads from it will return its default value.
  public mutating func clearOutputBinState() {_uniqueStorage()._outputBinState = nil}

  /// State of the markers.
  public var markerState: Google_Cloudprint_MarkerState {
    get {return _storage._markerState ?? Google_Cloudprint_MarkerState()}
    set {_uniqueStorage()._markerState = newValue}
  }
  /// Returns true if `markerState` has been explicitly set.
  public var hasMarkerState: Bool {return _storage._markerState != nil}
  /// Clears the value of `markerState`. Subsequent reads from it will return its default value.
  public mutating func clearMarkerState() {_uniqueStorage()._markerState = nil}

  /// State of the printer doors/covers/etc.
  public var coverState: Google_Cloudprint_CoverState {
    get {return _storage._coverState ?? Google_Cloudprint_CoverState()}
    set {_uniqueStorage()._coverState = newValue}
  }
  /// Returns true if `coverState` has been explicitly set.
  public var hasCoverState: Bool {return _storage._coverState != nil}
  /// Clears the value of `coverState`. Subsequent reads from it will return its default value.
  public mutating func clearCoverState() {_uniqueStorage()._coverState = nil}

  /// State of the printer media paths.
  public var mediaPathState: Google_Cloudprint_MediaPathState {
    get {return _storage._mediaPathState ?? Google_Cloudprint_MediaPathState()}
    set {_uniqueStorage()._mediaPathState = newValue}
  }
  /// Returns true if `mediaPathState` has been explicitly set.
  public var hasMediaPathState: Bool {return _storage._mediaPathState != nil}
  /// Clears the value of `mediaPathState`. Subsequent reads from it will return its default value.
  public mutating func clearMediaPathState() {_uniqueStorage()._mediaPathState = nil}

  /// Vendor-specific printer state.
  public var vendorState: Google_Cloudprint_VendorState {
    get {return _storage._vendorState ?? Google_Cloudprint_VendorState()}
    set {_uniqueStorage()._vendorState = newValue}
  }
  /// Returns true if `vendorState` has been explicitly set.
  public var hasVendorState: Bool {return _storage._vendorState != nil}
  /// Clears the value of `vendorState`. Subsequent reads from it will return its default value.
  public mutating func clearVendorState() {_uniqueStorage()._vendorState = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// State of the device's input trays.
public struct Google_Cloudprint_InputTrayState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [Google_Cloudprint_InputTrayState.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of the tray (refers to CDD model) (required).
    public var vendorID: String = String()

    /// Current tray state (required).
    public var state: Google_Cloudprint_InputTrayState.Item.StateType = .ok

    /// Loaded media level, percent. Ranges from 0 (empty) to 100 (fully loaded).
    public var levelPercent: Int32 = 0

    /// Vendor-specific message, ignored when state == OK.
    public var vendorMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum StateType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Tray is functional.
      case ok // = 0

      /// Tray is out of media. Treated as error.
      case empty // = 1

      /// Tray is open. Treated as error.
      case `open` // = 2

      /// Tray is installed, but turned off or disconnected. Treated as error.
      case off // = 3

      /// Tray is present, but not functioning properly. Treated as error.
      case failure // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .ok
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .ok
        case 1: self = .empty
        case 2: self = .open
        case 3: self = .off
        case 4: self = .failure
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .ok: return 0
        case .empty: return 1
        case .open: return 2
        case .off: return 3
        case .failure: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

/// State of the device's output bins.
public struct Google_Cloudprint_OutputBinState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [Google_Cloudprint_OutputBinState.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of the bin (refers to CDD model) (required).
    public var vendorID: String = String()

    /// Current bin state (required).
    public var state: Google_Cloudprint_OutputBinState.Item.StateType = .ok

    /// Used space, percent. Ranges from 0 (empty) to 100 (full).
    public var levelPercent: Int32 = 0

    /// Vendor-specific message, ignored when state == OK.
    public var vendorMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum StateType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Bin is functional.
      case ok // = 0

      /// Bin is full and cannot receive any more output. Treated as error.
      case full // = 1

      /// Bin is open. Treated as error.
      case `open` // = 2

      /// Bin is installed, but turned off or disconnected. Treated as error.
      case off // = 3

      /// Bin is present, but not functioning properly. Treated as error.
      case failure // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .ok
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .ok
        case 1: self = .full
        case 2: self = .open
        case 3: self = .off
        case 4: self = .failure
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .ok: return 0
        case .full: return 1
        case .open: return 2
        case .off: return 3
        case .failure: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

/// State of the device markers (toner/ink/staples/etc).
public struct Google_Cloudprint_MarkerState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [Google_Cloudprint_MarkerState.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of the marker (refers to CDD model) (required).
    public var vendorID: String = String()

    /// Current marker state (required).
    public var state: Google_Cloudprint_MarkerState.Item.StateType = .ok

    /// Marker supply amount, percent. Ranges from 0 to 100.
    public var levelPercent: Int32 = 0

    /// Estimated number of pages for which the marker supply amount will last.
    public var levelPages: Int32 = 0

    /// Vendor-specific message, ignored when state == OK.
    public var vendorMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum StateType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Marker is functional.
      case ok // = 0

      /// Marker resource is exhausted. Treated as error.
      case exhausted // = 1

      /// Marker is removed. Treated as error.
      case removed // = 2

      /// Marker is present, but not functioning properly. Treated as error.
      case failure // = 3
      case UNRECOGNIZED(Int)

      public init() {
        self = .ok
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .ok
        case 1: self = .exhausted
        case 2: self = .removed
        case 3: self = .failure
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .ok: return 0
        case .exhausted: return 1
        case .removed: return 2
        case .failure: return 3
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

/// State of the device covers (door/cover/etc).
public struct Google_Cloudprint_CoverState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [Google_Cloudprint_CoverState.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of the cover (refers to CDD model) (required).
    public var vendorID: String = String()

    /// Current cover state (required).
    public var state: Google_Cloudprint_CoverState.Item.StateType = .ok

    /// Vendor-specific message, ignored when state == OK.
    public var vendorMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum StateType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Default cover state (closed, does not need any attention).
      case ok // = 0

      /// Cover is open. Treated as error.
      case `open` // = 1

      /// Cover is not functioning properly. Treated as error.
      case failure // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .ok
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .ok
        case 1: self = .open
        case 2: self = .failure
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .ok: return 0
        case .open: return 1
        case .failure: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

/// State of the device media paths.
public struct Google_Cloudprint_MediaPathState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [Google_Cloudprint_MediaPathState.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID of the media path (refers to CDD model) (required).
    public var vendorID: String = String()

    /// Current state (required).
    public var state: Google_Cloudprint_MediaPathState.Item.StateType = .ok

    /// Vendor-specific message, ignored when state == OK.
    public var vendorMessage: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum StateType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Path is functioning.
      case ok // = 0

      /// Media is jammed. Treated as error.
      case mediaJam // = 1

      /// Path is present, but not functioning properly. Treated as error.
      case failure // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .ok
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .ok
        case 1: self = .mediaJam
        case 2: self = .failure
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .ok: return 0
        case .mediaJam: return 1
        case .failure: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

/// Vendor-specific state.
public struct Google_Cloudprint_VendorState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var item: [Google_Cloudprint_VendorState.Item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Item {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Severity of the state (required).
    public var state: Google_Cloudprint_VendorState.Item.StateType = .error

    /// Non-localized user-readable state description. New vendor state items should use description_localized instead.
    /// It is required that either description or description_localized is set.
    public var description_p: String = String()

    /// Translations of state description. If not empty, must contain an entry with locale == EN.
    public var descriptionLocalized: [Google_Cloudprint_LocalizedString] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum StateType: SwiftProtobuf.Enum {
      public typealias RawValue = Int
      case error // = 0
      case warning // = 1
      case info // = 2
      case UNRECOGNIZED(Int)

      public init() {
        self = .error
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .error
        case 1: self = .warning
        case 2: self = .info
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .error: return 0
        case .warning: return 1
        case .info: return 2
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    public init() {}
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloudprint"

extension Google_Cloudprint_CloudDeviceState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudDeviceState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "cloud_connection_state"),
    3: .same(proto: "printer"),
  ]

  fileprivate class _StorageClass {
    var _version: String = String()
    var _cloudConnectionState: Google_Cloudprint_CloudDeviceState.CloudConnectionStateType = .unknown
    var _printer: Google_Cloudprint_PrinterStateSection? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _cloudConnectionState = source._cloudConnectionState
      _printer = source._printer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._version)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._cloudConnectionState)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._printer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 1)
      }
      if _storage._cloudConnectionState != .unknown {
        try visitor.visitSingularEnumField(value: _storage._cloudConnectionState, fieldNumber: 2)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CloudDeviceState, rhs: Google_Cloudprint_CloudDeviceState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._cloudConnectionState != rhs_storage._cloudConnectionState {return false}
        if _storage._printer != rhs_storage._printer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CloudDeviceState.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IDLE"),
    1: .same(proto: "PROCESSING"),
    2: .same(proto: "STOPPED"),
  ]
}

extension Google_Cloudprint_CloudDeviceState.CloudConnectionStateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "NOT_CONFIGURED"),
    2: .same(proto: "ONLINE"),
    3: .same(proto: "OFFLINE"),
  ]
}

extension Google_Cloudprint_CloudDeviceUiState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudDeviceUiState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "summary"),
    2: .same(proto: "severity"),
    3: .standard(proto: "num_issues"),
    4: .same(proto: "caption"),
    5: .same(proto: "printer"),
  ]

  fileprivate class _StorageClass {
    var _summary: Google_Cloudprint_CloudDeviceUiState.Summary = .idle
    var _severity: Google_Cloudprint_CloudDeviceUiState.Severity = .none
    var _numIssues: Int32 = 0
    var _caption: String = String()
    var _printer: Google_Cloudprint_PrinterUiStateSection? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _summary = source._summary
      _severity = source._severity
      _numIssues = source._numIssues
      _caption = source._caption
      _printer = source._printer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._summary)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._severity)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._numIssues)
        case 4: try decoder.decodeSingularStringField(value: &_storage._caption)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._printer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._summary != .idle {
        try visitor.visitSingularEnumField(value: _storage._summary, fieldNumber: 1)
      }
      if _storage._severity != .none {
        try visitor.visitSingularEnumField(value: _storage._severity, fieldNumber: 2)
      }
      if _storage._numIssues != 0 {
        try visitor.visitSingularInt32Field(value: _storage._numIssues, fieldNumber: 3)
      }
      if !_storage._caption.isEmpty {
        try visitor.visitSingularStringField(value: _storage._caption, fieldNumber: 4)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CloudDeviceUiState, rhs: Google_Cloudprint_CloudDeviceUiState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._severity != rhs_storage._severity {return false}
        if _storage._numIssues != rhs_storage._numIssues {return false}
        if _storage._caption != rhs_storage._caption {return false}
        if _storage._printer != rhs_storage._printer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CloudDeviceUiState.Summary: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "IDLE"),
    1: .same(proto: "PROCESSING"),
    2: .same(proto: "STOPPED"),
    3: .same(proto: "OFFLINE"),
  ]
}

extension Google_Cloudprint_CloudDeviceUiState.Severity: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NONE"),
    1: .same(proto: "LOW"),
    2: .same(proto: "MEDIUM"),
    3: .same(proto: "HIGH"),
  ]
}

extension Google_Cloudprint_PrinterUiStateSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrinterUiStateSection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_item"),
    2: .standard(proto: "input_tray_item"),
    3: .standard(proto: "output_bin_item"),
    4: .standard(proto: "marker_item"),
    5: .standard(proto: "cover_item"),
    6: .standard(proto: "media_path_item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.vendorItem)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.inputTrayItem)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.outputBinItem)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.markerItem)
      case 5: try decoder.decodeRepeatedMessageField(value: &self.coverItem)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.mediaPathItem)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vendorItem, fieldNumber: 1)
    }
    if !self.inputTrayItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.inputTrayItem, fieldNumber: 2)
    }
    if !self.outputBinItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.outputBinItem, fieldNumber: 3)
    }
    if !self.markerItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.markerItem, fieldNumber: 4)
    }
    if !self.coverItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.coverItem, fieldNumber: 5)
    }
    if !self.mediaPathItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mediaPathItem, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrinterUiStateSection, rhs: Google_Cloudprint_PrinterUiStateSection) -> Bool {
    if lhs.vendorItem != rhs.vendorItem {return false}
    if lhs.inputTrayItem != rhs.inputTrayItem {return false}
    if lhs.outputBinItem != rhs.outputBinItem {return false}
    if lhs.markerItem != rhs.markerItem {return false}
    if lhs.coverItem != rhs.coverItem {return false}
    if lhs.mediaPathItem != rhs.mediaPathItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_PrinterUiStateSection.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_PrinterUiStateSection.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "severity"),
    2: .same(proto: "message"),
    3: .standard(proto: "vendor_message"),
    4: .standard(proto: "level_percent"),
    5: .same(proto: "color"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.severity)
      case 2: try decoder.decodeSingularStringField(value: &self.message)
      case 3: try decoder.decodeSingularStringField(value: &self.vendorMessage)
      case 4: try decoder.decodeSingularInt32Field(value: &self.levelPercent)
      case 5: try decoder.decodeSingularEnumField(value: &self.color)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.severity != .none {
      try visitor.visitSingularEnumField(value: self.severity, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    if !self.vendorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorMessage, fieldNumber: 3)
    }
    if self.levelPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.levelPercent, fieldNumber: 4)
    }
    if self.color != .custom {
      try visitor.visitSingularEnumField(value: self.color, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrinterUiStateSection.Item, rhs: Google_Cloudprint_PrinterUiStateSection.Item) -> Bool {
    if lhs.severity != rhs.severity {return false}
    if lhs.message != rhs.message {return false}
    if lhs.vendorMessage != rhs.vendorMessage {return false}
    if lhs.levelPercent != rhs.levelPercent {return false}
    if lhs.color != rhs.color {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_PrinterStateSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrinterStateSection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "input_tray_state"),
    3: .standard(proto: "output_bin_state"),
    4: .standard(proto: "marker_state"),
    5: .standard(proto: "cover_state"),
    6: .standard(proto: "media_path_state"),
    101: .standard(proto: "vendor_state"),
  ]

  fileprivate class _StorageClass {
    var _state: Google_Cloudprint_CloudDeviceState.StateType = .idle
    var _inputTrayState: Google_Cloudprint_InputTrayState? = nil
    var _outputBinState: Google_Cloudprint_OutputBinState? = nil
    var _markerState: Google_Cloudprint_MarkerState? = nil
    var _coverState: Google_Cloudprint_CoverState? = nil
    var _mediaPathState: Google_Cloudprint_MediaPathState? = nil
    var _vendorState: Google_Cloudprint_VendorState? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _inputTrayState = source._inputTrayState
      _outputBinState = source._outputBinState
      _markerState = source._markerState
      _coverState = source._coverState
      _mediaPathState = source._mediaPathState
      _vendorState = source._vendorState
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._inputTrayState)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._outputBinState)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._markerState)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._coverState)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._mediaPathState)
        case 101: try decoder.decodeSingularMessageField(value: &_storage._vendorState)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._state != .idle {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 1)
      }
      if let v = _storage._inputTrayState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._outputBinState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._markerState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._coverState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._mediaPathState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._vendorState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrinterStateSection, rhs: Google_Cloudprint_PrinterStateSection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._inputTrayState != rhs_storage._inputTrayState {return false}
        if _storage._outputBinState != rhs_storage._outputBinState {return false}
        if _storage._markerState != rhs_storage._markerState {return false}
        if _storage._coverState != rhs_storage._coverState {return false}
        if _storage._mediaPathState != rhs_storage._mediaPathState {return false}
        if _storage._vendorState != rhs_storage._vendorState {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_InputTrayState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InputTrayState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_InputTrayState, rhs: Google_Cloudprint_InputTrayState) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_InputTrayState.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_InputTrayState.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .same(proto: "state"),
    3: .standard(proto: "level_percent"),
    101: .standard(proto: "vendor_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vendorID)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 3: try decoder.decodeSingularInt32Field(value: &self.levelPercent)
      case 101: try decoder.decodeSingularStringField(value: &self.vendorMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorID.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorID, fieldNumber: 1)
    }
    if self.state != .ok {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if self.levelPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.levelPercent, fieldNumber: 3)
    }
    if !self.vendorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorMessage, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_InputTrayState.Item, rhs: Google_Cloudprint_InputTrayState.Item) -> Bool {
    if lhs.vendorID != rhs.vendorID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.levelPercent != rhs.levelPercent {return false}
    if lhs.vendorMessage != rhs.vendorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_InputTrayState.Item.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "EMPTY"),
    2: .same(proto: "OPEN"),
    3: .same(proto: "OFF"),
    4: .same(proto: "FAILURE"),
  ]
}

extension Google_Cloudprint_OutputBinState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".OutputBinState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_OutputBinState, rhs: Google_Cloudprint_OutputBinState) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_OutputBinState.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_OutputBinState.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .same(proto: "state"),
    3: .standard(proto: "level_percent"),
    101: .standard(proto: "vendor_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vendorID)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 3: try decoder.decodeSingularInt32Field(value: &self.levelPercent)
      case 101: try decoder.decodeSingularStringField(value: &self.vendorMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorID.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorID, fieldNumber: 1)
    }
    if self.state != .ok {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if self.levelPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.levelPercent, fieldNumber: 3)
    }
    if !self.vendorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorMessage, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_OutputBinState.Item, rhs: Google_Cloudprint_OutputBinState.Item) -> Bool {
    if lhs.vendorID != rhs.vendorID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.levelPercent != rhs.levelPercent {return false}
    if lhs.vendorMessage != rhs.vendorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_OutputBinState.Item.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "FULL"),
    2: .same(proto: "OPEN"),
    3: .same(proto: "OFF"),
    4: .same(proto: "FAILURE"),
  ]
}

extension Google_Cloudprint_MarkerState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MarkerState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_MarkerState, rhs: Google_Cloudprint_MarkerState) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_MarkerState.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_MarkerState.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .same(proto: "state"),
    3: .standard(proto: "level_percent"),
    4: .standard(proto: "level_pages"),
    101: .standard(proto: "vendor_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vendorID)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 3: try decoder.decodeSingularInt32Field(value: &self.levelPercent)
      case 4: try decoder.decodeSingularInt32Field(value: &self.levelPages)
      case 101: try decoder.decodeSingularStringField(value: &self.vendorMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorID.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorID, fieldNumber: 1)
    }
    if self.state != .ok {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if self.levelPercent != 0 {
      try visitor.visitSingularInt32Field(value: self.levelPercent, fieldNumber: 3)
    }
    if self.levelPages != 0 {
      try visitor.visitSingularInt32Field(value: self.levelPages, fieldNumber: 4)
    }
    if !self.vendorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorMessage, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_MarkerState.Item, rhs: Google_Cloudprint_MarkerState.Item) -> Bool {
    if lhs.vendorID != rhs.vendorID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.levelPercent != rhs.levelPercent {return false}
    if lhs.levelPages != rhs.levelPages {return false}
    if lhs.vendorMessage != rhs.vendorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_MarkerState.Item.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "EXHAUSTED"),
    2: .same(proto: "REMOVED"),
    3: .same(proto: "FAILURE"),
  ]
}

extension Google_Cloudprint_CoverState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CoverState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CoverState, rhs: Google_Cloudprint_CoverState) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CoverState.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_CoverState.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .same(proto: "state"),
    101: .standard(proto: "vendor_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vendorID)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 101: try decoder.decodeSingularStringField(value: &self.vendorMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorID.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorID, fieldNumber: 1)
    }
    if self.state != .ok {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.vendorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorMessage, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CoverState.Item, rhs: Google_Cloudprint_CoverState.Item) -> Bool {
    if lhs.vendorID != rhs.vendorID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.vendorMessage != rhs.vendorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CoverState.Item.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "OPEN"),
    2: .same(proto: "FAILURE"),
  ]
}

extension Google_Cloudprint_MediaPathState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MediaPathState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_MediaPathState, rhs: Google_Cloudprint_MediaPathState) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_MediaPathState.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_MediaPathState.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vendor_id"),
    2: .same(proto: "state"),
    101: .standard(proto: "vendor_message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.vendorID)
      case 2: try decoder.decodeSingularEnumField(value: &self.state)
      case 101: try decoder.decodeSingularStringField(value: &self.vendorMessage)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.vendorID.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorID, fieldNumber: 1)
    }
    if self.state != .ok {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 2)
    }
    if !self.vendorMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.vendorMessage, fieldNumber: 101)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_MediaPathState.Item, rhs: Google_Cloudprint_MediaPathState.Item) -> Bool {
    if lhs.vendorID != rhs.vendorID {return false}
    if lhs.state != rhs.state {return false}
    if lhs.vendorMessage != rhs.vendorMessage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_MediaPathState.Item.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "MEDIA_JAM"),
    2: .same(proto: "FAILURE"),
  ]
}

extension Google_Cloudprint_VendorState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VendorState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.item)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_VendorState, rhs: Google_Cloudprint_VendorState) -> Bool {
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_VendorState.Item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_VendorState.protoMessageName + ".Item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "description"),
    3: .standard(proto: "description_localized"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.state)
      case 2: try decoder.decodeSingularStringField(value: &self.description_p)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.descriptionLocalized)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.state != .error {
      try visitor.visitSingularEnumField(value: self.state, fieldNumber: 1)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 2)
    }
    if !self.descriptionLocalized.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.descriptionLocalized, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_VendorState.Item, rhs: Google_Cloudprint_VendorState.Item) -> Bool {
    if lhs.state != rhs.state {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.descriptionLocalized != rhs.descriptionLocalized {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_VendorState.Item.StateType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ERROR"),
    1: .same(proto: "WARNING"),
    2: .same(proto: "INFO"),
  ]
}
