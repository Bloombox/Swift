// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: geo/Location.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumeration of recognized units of distance.
public enum Opencannabis_Geo_DistanceUnit: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Distance in meters.
  case meters // = 0

  /// Distance in inches.
  case inches // = 1

  /// Distance in feet.
  case feet // = 2

  /// Distance in millimeters.
  case millimeters // = 3

  /// Distance in centimeters.
  case centimeters // = 4

  /// Distance in kilometers.
  case kilometers // = 5

  /// Distance in miles.
  case miles // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .meters
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .meters
    case 1: self = .inches
    case 2: self = .feet
    case 3: self = .millimeters
    case 4: self = .centimeters
    case 5: self = .kilometers
    case 6: self = .miles
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .meters: return 0
    case .inches: return 1
    case .feet: return 2
    case .millimeters: return 3
    case .centimeters: return 4
    case .kilometers: return 5
    case .miles: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Geo_DistanceUnit: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Geo_DistanceUnit] = [
    .meters,
    .inches,
    .feet,
    .millimeters,
    .centimeters,
    .kilometers,
    .miles,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a single distance value.
public struct Opencannabis_Geo_DistanceValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the unit of measurement employed for this distance.
  public var unit: Opencannabis_Geo_DistanceUnit = .meters

  /// Actual value.
  public var value: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents an estimate of location accuracy.
public struct Opencannabis_Geo_LocationAccuracy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies whether this accuracy rating is an estimate.
  public var estimate: Bool {
    get {return _storage._estimate}
    set {_uniqueStorage()._estimate = newValue}
  }

  /// Distance value for the accuracy specified.
  public var value: Opencannabis_Geo_DistanceValue {
    get {return _storage._value ?? Opencannabis_Geo_DistanceValue()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  public var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  public mutating func clearValue() {_uniqueStorage()._value = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents a physically addressable location in the real world.
public struct Opencannabis_Geo_Location {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name for this location, if applicable.
  public var name: Opencannabis_Content_Name {
    get {return _storage._name ?? Opencannabis_Content_Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  /// Address for this location, if applicable.
  public var address: Opencannabis_Geo_Address {
    get {return _storage._address ?? Opencannabis_Geo_Address()}
    set {_uniqueStorage()._address = newValue}
  }
  /// Returns true if `address` has been explicitly set.
  public var hasAddress: Bool {return _storage._address != nil}
  /// Clears the value of `address`. Subsequent reads from it will return its default value.
  public mutating func clearAddress() {_uniqueStorage()._address = nil}

  /// Geopoint (latitude/longitude) for this location.
  public var point: Opencannabis_Geo_Point {
    get {return _storage._point ?? Opencannabis_Geo_Point()}
    set {_uniqueStorage()._point = newValue}
  }
  /// Returns true if `point` has been explicitly set.
  public var hasPoint: Bool {return _storage._point != nil}
  /// Clears the value of `point`. Subsequent reads from it will return its default value.
  public mutating func clearPoint() {_uniqueStorage()._point = nil}

  /// Specifies the accuracy estimate, if known.
  public var accuracy: Opencannabis_Geo_LocationAccuracy {
    get {return _storage._accuracy ?? Opencannabis_Geo_LocationAccuracy()}
    set {_uniqueStorage()._accuracy = newValue}
  }
  /// Returns true if `accuracy` has been explicitly set.
  public var hasAccuracy: Bool {return _storage._accuracy != nil}
  /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
  public mutating func clearAccuracy() {_uniqueStorage()._accuracy = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a distance between two locations.
public struct Opencannabis_Geo_Distance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies whether this distance is an estimate.
  public var estimate: Bool {
    get {return _storage._estimate}
    set {_uniqueStorage()._estimate = newValue}
  }

  /// Specifies the accuracy estimate for the distance values, if known.
  public var accuracy: Opencannabis_Geo_LocationAccuracy {
    get {return _storage._accuracy ?? Opencannabis_Geo_LocationAccuracy()}
    set {_uniqueStorage()._accuracy = newValue}
  }
  /// Returns true if `accuracy` has been explicitly set.
  public var hasAccuracy: Bool {return _storage._accuracy != nil}
  /// Clears the value of `accuracy`. Subsequent reads from it will return its default value.
  public mutating func clearAccuracy() {_uniqueStorage()._accuracy = nil}

  /// Specifies the unit of measurement for a location accuracy estimate.
  public var unit: Opencannabis_Geo_DistanceUnit {
    get {return _storage._unit}
    set {_uniqueStorage()._unit = newValue}
  }

  /// Specifies the starting location for a distance span.
  public var start: Opencannabis_Geo_Location {
    get {return _storage._start ?? Opencannabis_Geo_Location()}
    set {_uniqueStorage()._start = newValue}
  }
  /// Returns true if `start` has been explicitly set.
  public var hasStart: Bool {return _storage._start != nil}
  /// Clears the value of `start`. Subsequent reads from it will return its default value.
  public mutating func clearStart() {_uniqueStorage()._start = nil}

  /// Specifies the terminating location for a distance span.
  public var end: Opencannabis_Geo_Location {
    get {return _storage._end ?? Opencannabis_Geo_Location()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  public var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  public mutating func clearEnd() {_uniqueStorage()._end = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.geo"

extension Opencannabis_Geo_DistanceUnit: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "METERS"),
    1: .same(proto: "INCHES"),
    2: .same(proto: "FEET"),
    3: .same(proto: "MILLIMETERS"),
    4: .same(proto: "CENTIMETERS"),
    5: .same(proto: "KILOMETERS"),
    6: .same(proto: "MILES"),
  ]
}

extension Opencannabis_Geo_DistanceValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DistanceValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "unit"),
    3: .same(proto: "value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.unit)
      case 3: try decoder.decodeSingularDoubleField(value: &self.value)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.unit != .meters {
      try visitor.visitSingularEnumField(value: self.unit, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularDoubleField(value: self.value, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Geo_DistanceValue, rhs: Opencannabis_Geo_DistanceValue) -> Bool {
    if lhs.unit != rhs.unit {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Geo_LocationAccuracy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocationAccuracy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "estimate"),
    2: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _estimate: Bool = false
    var _value: Opencannabis_Geo_DistanceValue? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _estimate = source._estimate
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._estimate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._estimate != false {
        try visitor.visitSingularBoolField(value: _storage._estimate, fieldNumber: 1)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Geo_LocationAccuracy, rhs: Opencannabis_Geo_LocationAccuracy) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._estimate != rhs_storage._estimate {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Geo_Location: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Location"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "address"),
    3: .same(proto: "point"),
    4: .same(proto: "accuracy"),
  ]

  fileprivate class _StorageClass {
    var _name: Opencannabis_Content_Name? = nil
    var _address: Opencannabis_Geo_Address? = nil
    var _point: Opencannabis_Geo_Point? = nil
    var _accuracy: Opencannabis_Geo_LocationAccuracy? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _address = source._address
      _point = source._point
      _accuracy = source._accuracy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._address)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._point)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._accuracy)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._address {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._point {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._accuracy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Geo_Location, rhs: Opencannabis_Geo_Location) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._address != rhs_storage._address {return false}
        if _storage._point != rhs_storage._point {return false}
        if _storage._accuracy != rhs_storage._accuracy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Geo_Distance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Distance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "estimate"),
    2: .same(proto: "accuracy"),
    3: .same(proto: "unit"),
    4: .same(proto: "start"),
    5: .same(proto: "end"),
  ]

  fileprivate class _StorageClass {
    var _estimate: Bool = false
    var _accuracy: Opencannabis_Geo_LocationAccuracy? = nil
    var _unit: Opencannabis_Geo_DistanceUnit = .meters
    var _start: Opencannabis_Geo_Location? = nil
    var _end: Opencannabis_Geo_Location? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _estimate = source._estimate
      _accuracy = source._accuracy
      _unit = source._unit
      _start = source._start
      _end = source._end
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._estimate)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._accuracy)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._unit)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._start)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._end)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._estimate != false {
        try visitor.visitSingularBoolField(value: _storage._estimate, fieldNumber: 1)
      }
      if let v = _storage._accuracy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._unit != .meters {
        try visitor.visitSingularEnumField(value: _storage._unit, fieldNumber: 3)
      }
      if let v = _storage._start {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Geo_Distance, rhs: Opencannabis_Geo_Distance) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._estimate != rhs_storage._estimate {return false}
        if _storage._accuracy != rhs_storage._accuracy {return false}
        if _storage._unit != rhs_storage._unit {return false}
        if _storage._start != rhs_storage._start {return false}
        if _storage._end != rhs_storage._end {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
