// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: person/Person.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// A person/patint and their name, legal name, nickname, etc.
public struct Opencannabis_Person_Person: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Person"

  /// Person's primary name information.
  public var name: Opencannabis_Person_Name {
    get {return _storage._name ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  /// Person's legal name, if it differs from their primary name.
  public var legalName: Opencannabis_Person_Name {
    get {return _storage._legalName ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._legalName = newValue}
  }
  /// Returns true if `legalName` has been explicitly set.
  public var hasLegalName: Bool {return _storage._legalName != nil}
  /// Clears the value of `legalName`. Subsequent reads from it will return its default value.
  public mutating func clearLegalName() {_storage._legalName = nil}

  /// Person's optional alternate name.
  public var alternateName: Opencannabis_Person_Name {
    get {return _storage._alternateName ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._alternateName = newValue}
  }
  /// Returns true if `alternateName` has been explicitly set.
  public var hasAlternateName: Bool {return _storage._alternateName != nil}
  /// Clears the value of `alternateName`. Subsequent reads from it will return its default value.
  public mutating func clearAlternateName() {_storage._alternateName = nil}

  /// Person's contact information.
  public var contact: Opencannabis_Contact_ContactInfo {
    get {return _storage._contact ?? Opencannabis_Contact_ContactInfo()}
    set {_uniqueStorage()._contact = newValue}
  }
  /// Returns true if `contact` has been explicitly set.
  public var hasContact: Bool {return _storage._contact != nil}
  /// Clears the value of `contact`. Subsequent reads from it will return its default value.
  public mutating func clearContact() {_storage._contact = nil}

  /// Date of birth.
  public var dateOfBirth: Opencannabis_Temporal_Date {
    get {return _storage._dateOfBirth ?? Opencannabis_Temporal_Date()}
    set {_uniqueStorage()._dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  public var hasDateOfBirth: Bool {return _storage._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  public mutating func clearDateOfBirth() {_storage._dateOfBirth = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._legalName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._alternateName)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._contact)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._dateOfBirth)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._legalName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._alternateName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._contact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._dateOfBirth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.person"

extension Opencannabis_Person_Person: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "legal_name"),
    3: .standard(proto: "alternate_name"),
    4: .same(proto: "contact"),
    5: .standard(proto: "date_of_birth"),
  ]

  fileprivate class _StorageClass {
    var _name: Opencannabis_Person_Name? = nil
    var _legalName: Opencannabis_Person_Name? = nil
    var _alternateName: Opencannabis_Person_Name? = nil
    var _contact: Opencannabis_Contact_ContactInfo? = nil
    var _dateOfBirth: Opencannabis_Temporal_Date? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _legalName = source._legalName
      _alternateName = source._alternateName
      _contact = source._contact
      _dateOfBirth = source._dateOfBirth
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Person_Person) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._legalName != other_storage._legalName {return false}
        if _storage._alternateName != other_storage._alternateName {return false}
        if _storage._contact != other_storage._contact {return false}
        if _storage._dateOfBirth != other_storage._dateOfBirth {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
