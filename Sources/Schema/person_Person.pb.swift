// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: person/Person.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides structures related to a person and all their characteristics. As well as enumerating gender.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Genders that a user may be.
public enum Opencannabis_Person_Gender: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified gender.
  case unspecified // = 0

  /// Male.
  case male // = 1

  /// Female.
  case female // = 2

  /// Other.
  case other // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .male
    case 2: self = .female
    case 3: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .male: return 1
    case .female: return 2
    case .other: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Person_Gender: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Person_Gender] = [
    .unspecified,
    .male,
    .female,
    .other,
  ]
}

#endif  // swift(>=4.2)

/// A person/patint and their name, legal name, nickname, etc.
public struct Opencannabis_Person_Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Person's primary name information.
  public var name: Opencannabis_Person_Name {
    get {return _storage._name ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  /// Person's legal name, if it differs from their primary name.
  public var legalName: Opencannabis_Person_Name {
    get {return _storage._legalName ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._legalName = newValue}
  }
  /// Returns true if `legalName` has been explicitly set.
  public var hasLegalName: Bool {return _storage._legalName != nil}
  /// Clears the value of `legalName`. Subsequent reads from it will return its default value.
  public mutating func clearLegalName() {_uniqueStorage()._legalName = nil}

  /// Person's optional alternate name.
  public var alternateName: Opencannabis_Person_Name {
    get {return _storage._alternateName ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._alternateName = newValue}
  }
  /// Returns true if `alternateName` has been explicitly set.
  public var hasAlternateName: Bool {return _storage._alternateName != nil}
  /// Clears the value of `alternateName`. Subsequent reads from it will return its default value.
  public mutating func clearAlternateName() {_uniqueStorage()._alternateName = nil}

  /// Person's contact information.
  public var contact: Opencannabis_Contact_ContactInfo {
    get {return _storage._contact ?? Opencannabis_Contact_ContactInfo()}
    set {_uniqueStorage()._contact = newValue}
  }
  /// Returns true if `contact` has been explicitly set.
  public var hasContact: Bool {return _storage._contact != nil}
  /// Clears the value of `contact`. Subsequent reads from it will return its default value.
  public mutating func clearContact() {_uniqueStorage()._contact = nil}

  /// Date of birth.
  public var dateOfBirth: Opencannabis_Temporal_Date {
    get {return _storage._dateOfBirth ?? Opencannabis_Temporal_Date()}
    set {_uniqueStorage()._dateOfBirth = newValue}
  }
  /// Returns true if `dateOfBirth` has been explicitly set.
  public var hasDateOfBirth: Bool {return _storage._dateOfBirth != nil}
  /// Clears the value of `dateOfBirth`. Subsequent reads from it will return its default value.
  public mutating func clearDateOfBirth() {_uniqueStorage()._dateOfBirth = nil}

  public var gender: Opencannabis_Person_Gender {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.person"

extension Opencannabis_Person_Gender: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
    3: .same(proto: "OTHER"),
  ]
}

extension Opencannabis_Person_Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Person"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "legal_name"),
    3: .standard(proto: "alternate_name"),
    4: .same(proto: "contact"),
    5: .standard(proto: "date_of_birth"),
    6: .same(proto: "gender"),
  ]

  fileprivate class _StorageClass {
    var _name: Opencannabis_Person_Name? = nil
    var _legalName: Opencannabis_Person_Name? = nil
    var _alternateName: Opencannabis_Person_Name? = nil
    var _contact: Opencannabis_Contact_ContactInfo? = nil
    var _dateOfBirth: Opencannabis_Temporal_Date? = nil
    var _gender: Opencannabis_Person_Gender = .unspecified

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _legalName = source._legalName
      _alternateName = source._alternateName
      _contact = source._contact
      _dateOfBirth = source._dateOfBirth
      _gender = source._gender
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._legalName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._alternateName)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._contact)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._dateOfBirth)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._gender)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._legalName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._alternateName {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._contact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._dateOfBirth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._gender != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Person_Person, rhs: Opencannabis_Person_Person) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._legalName != rhs_storage._legalName {return false}
        if _storage._alternateName != rhs_storage._alternateName {return false}
        if _storage._contact != rhs_storage._contact {return false}
        if _storage._dateOfBirth != rhs_storage._dateOfBirth {return false}
        if _storage._gender != rhs_storage._gender {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
