// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/ids/UserDoctorRec.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies structures for a user's prescription, from a physician, to consume/purchase cannabis.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Doctor recommendation to allow a consumer to purchase cannabis in a restricted market.
public struct Bloombox_Schema_Identity_Ids_UserDoctorRec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// ID number/unique code.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Expiration date for the recommendation.
  public var expirationDate: Opencannabis_Temporal_Date {
    get {return _storage._expirationDate ?? Opencannabis_Temporal_Date()}
    set {_uniqueStorage()._expirationDate = newValue}
  }
  /// Returns true if `expirationDate` has been explicitly set.
  public var hasExpirationDate: Bool {return _storage._expirationDate != nil}
  /// Clears the value of `expirationDate`. Subsequent reads from it will return its default value.
  public mutating func clearExpirationDate() {_storage._expirationDate = nil}

  /// Raw barcode value.
  public var barcode: String {
    get {return _storage._barcode}
    set {_uniqueStorage()._barcode = newValue}
  }

  /// US state where the recommendation is valid.
  public var state: Opencannabis_Geo_Usa_USState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// Country for the recommendation.
  public var country: String {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  /// Doctor's unique ID.
  public var doctorID: String {
    get {return _storage._doctorID}
    set {_uniqueStorage()._doctorID = newValue}
  }

  /// Personal information about the physician.
  public var doctor: Opencannabis_Person_Person {
    get {return _storage._doctor ?? Opencannabis_Person_Person()}
    set {_uniqueStorage()._doctor = newValue}
  }
  /// Returns true if `doctor` has been explicitly set.
  public var hasDoctor: Bool {return _storage._doctor != nil}
  /// Clears the value of `doctor`. Subsequent reads from it will return its default value.
  public mutating func clearDoctor() {_storage._doctor = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.identity.ids"

extension Bloombox_Schema_Identity_Ids_UserDoctorRec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserDoctorRec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "expiration_date"),
    3: .same(proto: "barcode"),
    4: .same(proto: "state"),
    5: .same(proto: "country"),
    6: .standard(proto: "doctor_id"),
    7: .same(proto: "doctor"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _expirationDate: Opencannabis_Temporal_Date? = nil
    var _barcode: String = String()
    var _state: Opencannabis_Geo_Usa_USState = .unspecified
    var _country: String = String()
    var _doctorID: String = String()
    var _doctor: Opencannabis_Person_Person? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _expirationDate = source._expirationDate
      _barcode = source._barcode
      _state = source._state
      _country = source._country
      _doctorID = source._doctorID
      _doctor = source._doctor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._expirationDate)
        case 3: try decoder.decodeSingularStringField(value: &_storage._barcode)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._state)
        case 5: try decoder.decodeSingularStringField(value: &_storage._country)
        case 6: try decoder.decodeSingularStringField(value: &_storage._doctorID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._doctor)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._expirationDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._barcode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._barcode, fieldNumber: 3)
      }
      if _storage._state != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 4)
      }
      if !_storage._country.isEmpty {
        try visitor.visitSingularStringField(value: _storage._country, fieldNumber: 5)
      }
      if !_storage._doctorID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._doctorID, fieldNumber: 6)
      }
      if let v = _storage._doctor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_Ids_UserDoctorRec) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._expirationDate != other_storage._expirationDate {return false}
        if _storage._barcode != other_storage._barcode {return false}
        if _storage._state != other_storage._state {return false}
        if _storage._country != other_storage._country {return false}
        if _storage._doctorID != other_storage._doctorID {return false}
        if _storage._doctor != other_storage._doctor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
