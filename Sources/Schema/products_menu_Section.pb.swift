// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/menu/Section.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Flags that may be applied to a section's configuration.
public enum Opencannabis_Products_Menu_Section_SectionFlag: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// This section should not be displayed.
  case hidden // = 0

  /// This section should be promoted and/or presented with high priority.
  case featured // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .hidden
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hidden
    case 1: self = .featured
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .hidden: return 0
    case .featured: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Known sections, that are expected to be included with nearly every menu.
public enum Opencannabis_Products_Menu_Section_Section: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified or unknown section.
  case unspecified // = 0

  /// Traditional "buds" or "flowers" section.
  case flowers // = 1

  /// Concentrated cannabis products such as oils, waxes and hashes.
  case extracts // = 2

  /// Edible cannabis products, such as brownies, candy bars, etc.
  case edibles // = 3

  /// Cartridge and pen battery products.
  case cartridges // = 4

  /// Tinctures, teas, and other miscellaneous products.
  case apothecary // = 5

  /// Pre-rolled flower-based joints, potentially fortified.
  case prerolls // = 6

  /// Plant clones, seeds, and other cultivation products.
  case plants // = 7

  /// General merchandise.
  case merchandise // = 8
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .flowers
    case 2: self = .extracts
    case 3: self = .edibles
    case 4: self = .cartridges
    case 5: self = .apothecary
    case 6: self = .prerolls
    case 7: self = .plants
    case 8: self = .merchandise
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .flowers: return 1
    case .extracts: return 2
    case .edibles: return 3
    case .cartridges: return 4
    case .apothecary: return 5
    case .prerolls: return 6
    case .plants: return 7
    case .merchandise: return 8
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Special filtered sections - commonly used sections based on filters builtin to apps/sites.
public enum Opencannabis_Products_Menu_Section_FilteredSection: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Only presents products that are on sale.
  case onSale // = 0

  /// Only presents products that are cultivated, manufactured, or otherwise produced in-house.
  case house // = 1

  /// Only presents products containing CBD.
  case cbd // = 2

  /// Special section for product search.
  case search // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .onSale
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .onSale
    case 1: self = .house
    case 2: self = .cbd
    case 3: self = .search
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .onSale: return 0
    case .house: return 1
    case .cbd: return 2
    case .search: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Custom configuration-based menu sections, usually via `FilteredSection`.
public struct Opencannabis_Products_Menu_Section_CustomSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// String ID for a custom section.
  public var id: String = String()

  /// Filtered section specification.
  public var filter: Opencannabis_Products_Menu_Section_FilteredSection = .onSale

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies media for a section.
public struct Opencannabis_Products_Menu_Section_SectionMedia {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies a media item to use as a tablet homescreen tile for this section.
  public var tabletHomescreenMedia: Opencannabis_Media_MediaItem {
    get {return _storage._tabletHomescreenMedia ?? Opencannabis_Media_MediaItem()}
    set {_uniqueStorage()._tabletHomescreenMedia = newValue}
  }
  /// Returns true if `tabletHomescreenMedia` has been explicitly set.
  public var hasTabletHomescreenMedia: Bool {return _storage._tabletHomescreenMedia != nil}
  /// Clears the value of `tabletHomescreenMedia`. Subsequent reads from it will return its default value.
  public mutating func clearTabletHomescreenMedia() {_storage._tabletHomescreenMedia = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies settings that a menu section may consider.
public struct Opencannabis_Products_Menu_Section_SectionSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Presentable name for this section.
  public var name: Opencannabis_Content_Name {
    get {return _storage._name ?? Opencannabis_Content_Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_storage._name = nil}

  /// Media to use when presenting this section.
  public var media: Opencannabis_Products_Menu_Section_SectionMedia {
    get {return _storage._media ?? Opencannabis_Products_Menu_Section_SectionMedia()}
    set {_uniqueStorage()._media = newValue}
  }
  /// Returns true if `media` has been explicitly set.
  public var hasMedia: Bool {return _storage._media != nil}
  /// Clears the value of `media`. Subsequent reads from it will return its default value.
  public mutating func clearMedia() {_storage._media = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a menu section, along with section configuration (settings and flags).
public struct Opencannabis_Products_Menu_Section_SectionSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the subject menu section.
  public var spec: OneOf_Spec? {
    get {return _storage._spec}
    set {_uniqueStorage()._spec = newValue}
  }

  /// Known and enumerated menu section.
  public var section: Opencannabis_Products_Menu_Section_Section {
    get {
      if case .section(let v)? = _storage._spec {return v}
      return .unspecified
    }
    set {_uniqueStorage()._spec = .section(newValue)}
  }

  /// Custom, filter-based menu section.
  public var customSection: Opencannabis_Products_Menu_Section_CustomSection {
    get {
      if case .customSection(let v)? = _storage._spec {return v}
      return Opencannabis_Products_Menu_Section_CustomSection()
    }
    set {_uniqueStorage()._spec = .customSection(newValue)}
  }

  /// Arbitrary name for other types of sections.
  public var name: String {
    get {
      if case .name(let v)? = _storage._spec {return v}
      return String()
    }
    set {_uniqueStorage()._spec = .name(newValue)}
  }

  /// Settings to apply to the subject section.
  public var settings: Opencannabis_Products_Menu_Section_SectionSettings {
    get {return _storage._settings ?? Opencannabis_Products_Menu_Section_SectionSettings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  public var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  public mutating func clearSettings() {_storage._settings = nil}

  /// Current set of flags to apply to the subject section.
  public var flags: [Opencannabis_Products_Menu_Section_SectionFlag] {
    get {return _storage._flags}
    set {_uniqueStorage()._flags = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies the subject menu section.
  public enum OneOf_Spec: Equatable {
    /// Known and enumerated menu section.
    case section(Opencannabis_Products_Menu_Section_Section)
    /// Custom, filter-based menu section.
    case customSection(Opencannabis_Products_Menu_Section_CustomSection)
    /// Arbitrary name for other types of sections.
    case name(String)

    public static func ==(lhs: Opencannabis_Products_Menu_Section_SectionSpec.OneOf_Spec, rhs: Opencannabis_Products_Menu_Section_SectionSpec.OneOf_Spec) -> Bool {
      switch (lhs, rhs) {
      case (.section(let l), .section(let r)): return l == r
      case (.customSection(let l), .customSection(let r)): return l == r
      case (.name(let l), .name(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.products.menu.section"

extension Opencannabis_Products_Menu_Section_SectionFlag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HIDDEN"),
    1: .same(proto: "FEATURED"),
  ]
}

extension Opencannabis_Products_Menu_Section_Section: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "FLOWERS"),
    2: .same(proto: "EXTRACTS"),
    3: .same(proto: "EDIBLES"),
    4: .same(proto: "CARTRIDGES"),
    5: .same(proto: "APOTHECARY"),
    6: .same(proto: "PREROLLS"),
    7: .same(proto: "PLANTS"),
    8: .same(proto: "MERCHANDISE"),
  ]
}

extension Opencannabis_Products_Menu_Section_FilteredSection: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ON_SALE"),
    1: .same(proto: "HOUSE"),
    2: .same(proto: "CBD"),
    3: .same(proto: "SEARCH"),
  ]
}

extension Opencannabis_Products_Menu_Section_CustomSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CustomSection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "filter"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.filter)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if self.filter != .onSale {
      try visitor.visitSingularEnumField(value: self.filter, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Products_Menu_Section_CustomSection) -> Bool {
    if self.id != other.id {return false}
    if self.filter != other.filter {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Menu_Section_SectionMedia: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionMedia"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .standard(proto: "tablet_homescreen_media"),
  ]

  fileprivate class _StorageClass {
    var _tabletHomescreenMedia: Opencannabis_Media_MediaItem? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _tabletHomescreenMedia = source._tabletHomescreenMedia
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 2: try decoder.decodeSingularMessageField(value: &_storage._tabletHomescreenMedia)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._tabletHomescreenMedia {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Products_Menu_Section_SectionMedia) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._tabletHomescreenMedia != other_storage._tabletHomescreenMedia {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Menu_Section_SectionSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "media"),
  ]

  fileprivate class _StorageClass {
    var _name: Opencannabis_Content_Name? = nil
    var _media: Opencannabis_Products_Menu_Section_SectionMedia? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _media = source._media
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._media)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._media {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Products_Menu_Section_SectionSettings) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._name != other_storage._name {return false}
        if _storage._media != other_storage._media {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Menu_Section_SectionSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SectionSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "section"),
    2: .standard(proto: "custom_section"),
    3: .same(proto: "name"),
    4: .same(proto: "settings"),
    5: .same(proto: "flags"),
  ]

  fileprivate class _StorageClass {
    var _spec: Opencannabis_Products_Menu_Section_SectionSpec.OneOf_Spec?
    var _settings: Opencannabis_Products_Menu_Section_SectionSettings? = nil
    var _flags: [Opencannabis_Products_Menu_Section_SectionFlag] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _spec = source._spec
      _settings = source._settings
      _flags = source._flags
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: Opencannabis_Products_Menu_Section_Section?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._spec = .section(v)}
        case 2:
          var v: Opencannabis_Products_Menu_Section_CustomSection?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .customSection(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .customSection(v)}
        case 3:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._spec = .name(v)}
        case 4: try decoder.decodeSingularMessageField(value: &_storage._settings)
        case 5: try decoder.decodeRepeatedEnumField(value: &_storage._flags)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._spec {
      case .section(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      case .customSection(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .name(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case nil: break
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._flags.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._flags, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Products_Menu_Section_SectionSpec) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._spec != other_storage._spec {return false}
        if _storage._settings != other_storage._settings {return false}
        if _storage._flags != other_storage._flags {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
