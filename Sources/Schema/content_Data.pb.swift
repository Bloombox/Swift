// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: content/Data.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides definitions, structures, and enumerations related to raw data and data formats.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known data encapsulation or encoding formats, which are commonly found or used to integrate systems. These
/// formats (or, a subset of them) are supported for adaption to and from OpenCannabis.
public enum Opencannabis_Content_DataFormat: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Sentinel value for an unknown, or unrecognized, data format.
  case unknownFormat // = 0

  /// Comma-Separated-Values. When referred to with no other demarcation, this enumeration corresponds with
  /// [RFC4180 (Common Format and MIME Type for Comma-Separated Values)](https://tools.ietf.org/html/rfc4180).
  case csv // = 10

  /// Tab-Separated-Values (i.e. CSV, but with tabs). Follows the same quoting and newline guidelines as RFC-4180.
  case tsv // = 11

  /// Excel-style CSV (Comma-Separated-Values) format.
  case excelCsv // = 12

  /// Old-style Excel spreadsheet format.
  case excelXls // = 13

  /// Modern Excel spreadsheet format.
  case excelXlsx // = 14

  /// MessagePack: length-prefixed JSON-like binary encoding format, schemaless.
  case msgpack // = 20

  /// Avro: length-prefixed JSON-like binary encoding format, schema'd.
  case avro // = 30

  /// Structured Query Language-based systems or dialects.
  case sql // = 40

  /// ProtoJSON/JSON object format, serialized to comply with the OpenCannabis standard.
  case json // = 50

  /// Proto-text format, serialized to comply with the OpenCannabis standard.
  case ocpText // = 61

  /// Proto-binary format, serialized to comply with the OpenCannabis standard.
  case ocpBinary // = 62
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownFormat
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownFormat
    case 10: self = .csv
    case 11: self = .tsv
    case 12: self = .excelCsv
    case 13: self = .excelXls
    case 14: self = .excelXlsx
    case 20: self = .msgpack
    case 30: self = .avro
    case 40: self = .sql
    case 50: self = .json
    case 61: self = .ocpText
    case 62: self = .ocpBinary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownFormat: return 0
    case .csv: return 10
    case .tsv: return 11
    case .excelCsv: return 12
    case .excelXls: return 13
    case .excelXlsx: return 14
    case .msgpack: return 20
    case .avro: return 30
    case .sql: return 40
    case .json: return 50
    case .ocpText: return 61
    case .ocpBinary: return 62
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Content_DataFormat: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Content_DataFormat] = [
    .unknownFormat,
    .csv,
    .tsv,
    .excelCsv,
    .excelXls,
    .excelXlsx,
    .msgpack,
    .avro,
    .sql,
    .json,
    .ocpText,
    .ocpBinary,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Opencannabis_Content_DataFormat: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_FORMAT"),
    10: .same(proto: "CSV"),
    11: .same(proto: "TSV"),
    12: .same(proto: "EXCEL_CSV"),
    13: .same(proto: "EXCEL_XLS"),
    14: .same(proto: "EXCEL_XLSX"),
    20: .same(proto: "MSGPACK"),
    30: .same(proto: "AVRO"),
    40: .same(proto: "SQL"),
    50: .same(proto: "JSON"),
    61: .same(proto: "OCP_TEXT"),
    62: .same(proto: "OCP_BINARY"),
  ]
}
