// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics/identity/UserAnalytics.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies actions that may be taken by a user. See also: `ShopAction`.
public enum Bloombox_Analytics_Identity_UserAction: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The user engaged in some manner, either anonymously, or with an identified user key.
  case engage // = 0

  /// The user signed up for a fresh, completely-new Bloombox account.
  case enroll // = 10

  /// The user activated a dormant or previously-created shadow account for themselves.
  case activate // = 11

  /// The user joined a particular partner location or organization.
  case join // = 12

  /// The user verified an assertion of their identity or eligibility to purchase cannabis.
  case verify // = 13

  /// The user checked in at a physical or digital location.
  case checkin // = 14

  /// The user adjusted their own preferences, w.r.t. a specific location, or globally.
  case preferences // = 15

  /// The user made a purchase.
  case purchase // = 16

  /// The user submitted an order for pickup or delivery.
  case order // = 17

  /// The user opted-in globally to communications related to Bloombox, their account, and so on, whether physically or
  /// digitally.
  case optIn // = 18

  /// The user opted-out globally from communications related to Bloombox, their account, and so on, whether physically
  /// or digitally.
  case optOut // = 19
  case UNRECOGNIZED(Int)

  public init() {
    self = .engage
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .engage
    case 10: self = .enroll
    case 11: self = .activate
    case 12: self = .join
    case 13: self = .verify
    case 14: self = .checkin
    case 15: self = .preferences
    case 16: self = .purchase
    case 17: self = .order
    case 18: self = .optIn
    case 19: self = .optOut
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .engage: return 0
    case .enroll: return 10
    case .activate: return 11
    case .join: return 12
    case .verify: return 13
    case .checkin: return 14
    case .preferences: return 15
    case .purchase: return 16
    case .order: return 17
    case .optIn: return 18
    case .optOut: return 19
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Analytics_Identity_UserAction: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Analytics_Identity_UserAction] = [
    .engage,
    .enroll,
    .activate,
    .join,
    .verify,
    .checkin,
    .preferences,
    .purchase,
    .order,
    .optIn,
    .optOut,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a user action event, wherein a user has taken some affirmative action related to themselves, their identity
/// with regards to a particular system, or their account or preferences.
public struct Bloombox_Analytics_Identity_Action {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User identity being referenced.
  public var identity: String {
    get {return _storage._identity}
    set {_uniqueStorage()._identity = newValue}
  }

  /// Action that was taken upon or regarding the order.
  public var verb: Bloombox_Analytics_Identity_UserAction {
    get {return _storage._verb}
    set {_uniqueStorage()._verb = newValue}
  }

  /// Specifies when this view event occurred.
  public var occurred: Opencannabis_Temporal_Instant {
    get {return _storage._occurred ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._occurred = newValue}
  }
  /// Returns true if `occurred` has been explicitly set.
  public var hasOccurred: Bool {return _storage._occurred != nil}
  /// Clears the value of `occurred`. Subsequent reads from it will return its default value.
  public mutating func clearOccurred() {_uniqueStorage()._occurred = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.analytics.identity"

extension Bloombox_Analytics_Identity_UserAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENGAGE"),
    10: .same(proto: "ENROLL"),
    11: .same(proto: "ACTIVATE"),
    12: .same(proto: "JOIN"),
    13: .same(proto: "VERIFY"),
    14: .same(proto: "CHECKIN"),
    15: .same(proto: "PREFERENCES"),
    16: .same(proto: "PURCHASE"),
    17: .same(proto: "ORDER"),
    18: .same(proto: "OPT_IN"),
    19: .same(proto: "OPT_OUT"),
  ]
}

extension Bloombox_Analytics_Identity_Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "identity"),
    2: .same(proto: "verb"),
    3: .same(proto: "occurred"),
  ]

  fileprivate class _StorageClass {
    var _identity: String = String()
    var _verb: Bloombox_Analytics_Identity_UserAction = .engage
    var _occurred: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identity = source._identity
      _verb = source._verb
      _occurred = source._occurred
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._identity)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._verb)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._occurred)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._identity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._identity, fieldNumber: 1)
      }
      if _storage._verb != .engage {
        try visitor.visitSingularEnumField(value: _storage._verb, fieldNumber: 2)
      }
      if let v = _storage._occurred {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Analytics_Identity_Action, rhs: Bloombox_Analytics_Identity_Action) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identity != rhs_storage._identity {return false}
        if _storage._verb != rhs_storage._verb {return false}
        if _storage._occurred != rhs_storage._occurred {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
