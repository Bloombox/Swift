// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/ProductFlags.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Flags that may be applied to an entire product entry, that govern how an independent product and all of its variants
/// or sub-products are processed or treated.
public enum Opencannabis_Structs_ProductFlag: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Default flag value. Marks a product as 'VISIBLE,' meaning it is eligible to be displayed in public circumstances.
  /// In some cases, this is interpreted to mean 'IN STOCK.' Being that this flag is a default value, the absence of this
  /// flag does not designate an item as non-visible - this is accomplished by explicitly specifying the 'HIDDEN' flag.
  case visible // = 0

  /// Indicates that this entire product entry should be 'HIDDEN' from public view, or considered 'OUT-OF-STOCK' in back-
  /// office systems.
  case hidden // = 1

  /// Designates a product as 'PREMIUM,' indicating it is a top-shelf or super-high-quality product. In some cases, this
  /// flag is used to indicate items that are produced in-house.
  case premium // = 2

  /// Designates a product as 'FEATURED,' which makes it eligible for extra promotional display. Featured products are
  /// generally highlighted or displayed top-of-the-fold.
  case featured // = 3

  /// Designates a product as 'EXCLUSIVE,' meaning it is only carried or produced by the owning retailer or manufacturer.
  case exclusive // = 4

  /// Designates a product as 'IN-HOUSE,' indicating it is carried and produced by the same organization. In a retail
  /// context, this flag is used to indicate items manufactured by the retailer or the retailer's partners.
  case inHouse // = 5

  /// Indicates that a product will not be around long, or that it is running out. In retail contexts, this designates
  /// the product in a way that may trigger extra promotional UI.
  case lastChance // = 6

  /// Indicates that a particular product will only be available for a limited time, or is available only in limited
  /// batches.
  case limitedTime // = 7

  /// Indicates that a particular product is produced locally. In retail contexts, this may trigger extra promotional UI.
  case local // = 8

  /// Designates, in general, that a product is 'ON-SALE.' This designation SHOULD be propagated-to by implementing
  /// servers, from a product's weighted pricing sale flags. This means, if ANY product weight or variant is marked on
  /// sale, the 'ON-SALE' flag SHOULD be sent along with the top-level product information.
  case onSale // = 20
  case UNRECOGNIZED(Int)

  public init() {
    self = .visible
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .visible
    case 1: self = .hidden
    case 2: self = .premium
    case 3: self = .featured
    case 4: self = .exclusive
    case 5: self = .inHouse
    case 6: self = .lastChance
    case 7: self = .limitedTime
    case 8: self = .local
    case 20: self = .onSale
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .visible: return 0
    case .hidden: return 1
    case .premium: return 2
    case .featured: return 3
    case .exclusive: return 4
    case .inHouse: return 5
    case .lastChance: return 6
    case .limitedTime: return 7
    case .local: return 8
    case .onSale: return 20
    case .UNRECOGNIZED(let i): return i
    }
  }

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Opencannabis_Structs_ProductFlag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "VISIBLE"),
    1: .same(proto: "HIDDEN"),
    2: .same(proto: "PREMIUM"),
    3: .same(proto: "FEATURED"),
    4: .same(proto: "EXCLUSIVE"),
    5: .same(proto: "IN_HOUSE"),
    6: .same(proto: "LAST_CHANCE"),
    7: .same(proto: "LIMITED_TIME"),
    8: .same(proto: "LOCAL"),
    20: .same(proto: "ON_SALE"),
  ]
}
