// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: marketing/v1beta1/MarketingService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known errors that may be thrown by marketing operations.
public enum Bloombox_Schema_Services_Marketing_V1beta1_MarketingError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0

  /// The specified partner ID is invalid.
  case partnerInvalid // = 1

  /// The specified location ID is invalid.
  case locationInvalid // = 2

  /// The specified campaign ID was found to be invalid.
  case idInvalid // = 3

  /// The specified campaign name was found to be invalid.
  case nameInvalid // = 4

  /// The specified campaign could not be located.
  case campaignNotFound // = 5

  /// The configured access permissions do not allow the requested operation.
  case accessDenied // = 6

  /// The specified campaign settings were invalid.
  case settingsInvalid // = 7

  /// The specified channel was invalid.
  case channelInvalid // = 8

  /// The specified adgroup payload was found to be invalid.
  case adgroupInvalid // = 9

  /// Must provide settings payload to match the channel type specified.
  case settingsMismatch // = 10

  /// The specified adgroup creative was invalid for some reason.
  case creativeInvalid // = 11

  /// The specified adgroup SMS creative was invalid for some reason.
  case smsCreativeInvalid // = 12

  /// The specified adgroup email creative was invalid for some reason.
  case emailCreativeInvalid // = 13

  /// The specified update was invalid.
  case updateInvalid // = 14

  /// The server encountered some internal error.
  case internalError // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .partnerInvalid
    case 2: self = .locationInvalid
    case 3: self = .idInvalid
    case 4: self = .nameInvalid
    case 5: self = .campaignNotFound
    case 6: self = .accessDenied
    case 7: self = .settingsInvalid
    case 8: self = .channelInvalid
    case 9: self = .adgroupInvalid
    case 10: self = .settingsMismatch
    case 11: self = .creativeInvalid
    case 12: self = .smsCreativeInvalid
    case 13: self = .emailCreativeInvalid
    case 14: self = .updateInvalid
    case 99: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .partnerInvalid: return 1
    case .locationInvalid: return 2
    case .idInvalid: return 3
    case .nameInvalid: return 4
    case .campaignNotFound: return 5
    case .accessDenied: return 6
    case .settingsInvalid: return 7
    case .channelInvalid: return 8
    case .adgroupInvalid: return 9
    case .settingsMismatch: return 10
    case .creativeInvalid: return 11
    case .smsCreativeInvalid: return 12
    case .emailCreativeInvalid: return 13
    case .updateInvalid: return 14
    case .internalError: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Campaign summary payload for listing campaigns, given a particular scope.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignSummary: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignSummary"

  /// Key for the underlying campaign.
  public var key: Bloombox_Schema_Marketing_CampaignKey {
    get {return _storage._key ?? Bloombox_Schema_Marketing_CampaignKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_storage._key = nil}

  /// Name for the campaign object.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Description for the campaign object.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Whether the underlying campaign is live.
  public var live: Bool {
    get {return _storage._live}
    set {_uniqueStorage()._live = newValue}
  }

  /// Current status of the campaign.
  public var status: Bloombox_Schema_Marketing_CampaignStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Whether this campaign supports SMS.
  public var sms: Bool {
    get {return _storage._sms}
    set {_uniqueStorage()._sms = newValue}
  }

  /// Whether this campaign supports email.
  public var email: Bool {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  /// Tags for the campaign object.
  public var tag: [Bloombox_Schema_Marketing_CampaignTag] {
    get {return _storage._tag}
    set {_uniqueStorage()._tag = newValue}
  }

  /// When the subject campaign was last modified.
  public var modified: Opencannabis_Temporal_Instant {
    get {return _storage._modified ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._modified = newValue}
  }
  /// Returns true if `modified` has been explicitly set.
  public var hasModified: Bool {return _storage._modified != nil}
  /// Clears the value of `modified`. Subsequent reads from it will return its default value.
  public mutating func clearModified() {_storage._modified = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._live)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._sms)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._email)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._tag)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._modified)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if _storage._live != false {
        try visitor.visitSingularBoolField(value: _storage._live, fieldNumber: 4)
      }
      if _storage._status != .pending {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 5)
      }
      if _storage._sms != false {
        try visitor.visitSingularBoolField(value: _storage._sms, fieldNumber: 6)
      }
      if _storage._email != false {
        try visitor.visitSingularBoolField(value: _storage._email, fieldNumber: 7)
      }
      if !_storage._tag.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._tag, fieldNumber: 8)
      }
      if let v = _storage._modified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents an RPC operation to list marketing campaigns for a given partner/location context.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignList: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignList"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to list marketing campaigns.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignList.protoMessageName + ".Request"

    /// Partnership scope for the request.
    public var partner: String = String()

    /// Location scope for the request.
    public var location: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.partner)
        case 2: try decoder.decodeSingularStringField(value: &self.location)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.partner.isEmpty {
        try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
      }
      if !self.location.isEmpty {
        try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request to list marketing campaigns.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignList.protoMessageName + ".Response"

    /// Campaigns for a given partner/location pair.
    public var campaign: [Bloombox_Schema_Services_Marketing_V1beta1_CampaignSummary] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.campaign)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaign.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.campaign, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to retrieve campaign info by its ID.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignGet"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request for campaign info.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet.protoMessageName + ".Request"

    /// ID for the campaign to fetch.
    public var campaignID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request for campaign info.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet.protoMessageName + ".Response"

    /// Marketing campaign payload data.
    public var campaign: Bloombox_Schema_Marketing_Campaign {
      get {return _storage._campaign ?? Bloombox_Schema_Marketing_Campaign()}
      set {_uniqueStorage()._campaign = newValue}
    }
    /// Returns true if `campaign` has been explicitly set.
    public var hasCampaign: Bool {return _storage._campaign != nil}
    /// Clears the value of `campaign`. Subsequent reads from it will return its default value.
    public mutating func clearCampaign() {_storage._campaign = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._campaign)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._campaign {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to create a new marketing campaign from scratch.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignCreate"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to create a marketing campaign.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate.protoMessageName + ".Request"

    /// Partner ID under which to create the campaign.
    public var partner: String = String()

    /// Location ID under which to create the campaign.
    public var location: String = String()

    /// Name/label for the campaign.
    public var name: String = String()

    /// Description for the campaign.
    public var description_p: String = String()

    /// Distribution/channel settings for this campaign.
    public var channel: [Bloombox_Schema_Marketing_ChannelSettings] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.partner)
        case 2: try decoder.decodeSingularStringField(value: &self.location)
        case 3: try decoder.decodeSingularStringField(value: &self.name)
        case 4: try decoder.decodeSingularStringField(value: &self.description_p)
        case 5: try decoder.decodeRepeatedMessageField(value: &self.channel)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.partner.isEmpty {
        try visitor.visitSingularStringField(value: self.partner, fieldNumber: 1)
      }
      if !self.location.isEmpty {
        try visitor.visitSingularStringField(value: self.location, fieldNumber: 2)
      }
      if !self.name.isEmpty {
        try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
      }
      if !self.description_p.isEmpty {
        try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
      }
      if !self.channel.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.channel, fieldNumber: 5)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response containing the resulting campaign ID.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate.protoMessageName + ".Response"

    /// ID of the resulting campaign.
    public var id: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.id)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.id.isEmpty {
        try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to update underlying data for a marketing campaign, given its ID.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignUpdate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignUpdate"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to update a marketing campaign.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignUpdate.protoMessageName + ".Request"

    /// ID for the campaign to be updated.
    public var campaignID: String = String()

    /// Name/label for the campaign.
    public var name: String = String()

    /// Description for the campaign.
    public var description_p: String = String()

    /// Current status of the campaign.
    public var status: Bloombox_Schema_Marketing_CampaignStatus = .pending

    /// Distribution/channel settings for this campaign.
    public var channel: [Bloombox_Schema_Marketing_ChannelSettings] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        case 3: try decoder.decodeSingularStringField(value: &self.name)
        case 4: try decoder.decodeSingularStringField(value: &self.description_p)
        case 5: try decoder.decodeSingularEnumField(value: &self.status)
        case 6: try decoder.decodeRepeatedMessageField(value: &self.channel)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      if !self.name.isEmpty {
        try visitor.visitSingularStringField(value: self.name, fieldNumber: 3)
      }
      if !self.description_p.isEmpty {
        try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 4)
      }
      if self.status != .pending {
        try visitor.visitSingularEnumField(value: self.status, fieldNumber: 5)
      }
      if !self.channel.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.channel, fieldNumber: 6)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to perform a validation routine on a campaign, to check if it is ready to be sent.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignValidate"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to perform validation on a marketing campaign.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate.protoMessageName + ".Request"

    /// ID for the campaign to validate.
    public var campaignID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request to perform validation on a marketing campaign.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate.protoMessageName + ".Response"

    /// Error encountered during campaign validation, if any, or `NO_ERROR`.
    public var err: Bloombox_Schema_Services_Marketing_V1beta1_MarketingError = .noError

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &self.err)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.err != .noError {
        try visitor.visitSingularEnumField(value: self.err, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to trigger a marketing campaign to be sent, either now or at some point in the future.
public struct Bloombox_Schema_Services_Marketing_V1beta1_CampaignSend: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".CampaignSend"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to trigger a marketing campaign to be sent.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_CampaignSend.protoMessageName + ".Request"

    /// ID of the campaign to send.
    public var campaignID: String = String()

    /// Set to `true` to prevent actual sending operations.
    public var dryRun: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        case 2: try decoder.decodeSingularBoolField(value: &self.dryRun)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      if self.dryRun != false {
        try visitor.visitSingularBoolField(value: self.dryRun, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to list groups of ad parameters for a given marketing campaign.
public struct Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AdGroupList"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to list adgroups for a specific campaign.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList.protoMessageName + ".Request"

    /// ID of the campaign to send.
    public var campaignID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request to list adgroups for a specific campaign.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList.protoMessageName + ".Response"

    /// Ad groups attached to the specified campaign.
    public var adgroup: [Bloombox_Schema_Marketing_AdGroup] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &self.adgroup)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.adgroup.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.adgroup, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to create a new adgroup and attach it to a specific marketing campaign. An "ad group,"
/// in Bloombox, is a containing group of ad parameters. Individual ads are calculated from these parameters.
public struct Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AdGroupCreate"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to create a new adgroup and attach it to a specific campaign.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate.protoMessageName + ".Request"

    /// ID for the campaign.
    public var campaignID: String {
      get {return _storage._campaignID}
      set {_uniqueStorage()._campaignID = newValue}
    }

    /// Marketing communication channel to employ.
    public var channel: Bloombox_Schema_Comms_Channel {
      get {return _storage._channel}
      set {_uniqueStorage()._channel = newValue}
    }

    /// Initial creative record to use.
    public var creative: Bloombox_Schema_Marketing_Creative {
      get {return _storage._creative ?? Bloombox_Schema_Marketing_Creative()}
      set {_uniqueStorage()._creative = newValue}
    }
    /// Returns true if `creative` has been explicitly set.
    public var hasCreative: Bool {return _storage._creative != nil}
    /// Clears the value of `creative`. Subsequent reads from it will return its default value.
    public mutating func clearCreative() {_storage._creative = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._campaignID)
          case 2: try decoder.decodeSingularEnumField(value: &_storage._channel)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._creative)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if !_storage._campaignID.isEmpty {
          try visitor.visitSingularStringField(value: _storage._campaignID, fieldNumber: 1)
        }
        if _storage._channel != .unspecified {
          try visitor.visitSingularEnumField(value: _storage._channel, fieldNumber: 2)
        }
        if let v = _storage._creative {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to create a new adgroup and attach it to a specific campaign.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate.protoMessageName + ".Response"

    /// Resulting adgroup ID.
    public var adgroupID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.adgroupID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.adgroupID.isEmpty {
        try visitor.visitSingularStringField(value: self.adgroupID, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to retrieve an individual adgroup, addressed by its ID, under a specific marketing
/// campaign, also addressed by its ID.
public struct Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AdGroupGet"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to retrieve a particular adgroup's data.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet.protoMessageName + ".Request"

    /// ID for the campaign.
    public var campaignID: String = String()

    /// Adgroup ID to fetch.
    public var adgroupID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        case 2: try decoder.decodeSingularStringField(value: &self.adgroupID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      if !self.adgroupID.isEmpty {
        try visitor.visitSingularStringField(value: self.adgroupID, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  /// Response to a request to retrieve a particular adgroup's data.
  public struct Response: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet.protoMessageName + ".Response"

    /// Resulting adgroup, if it could be located.
    public var adgroup: Bloombox_Schema_Marketing_AdGroup {
      get {return _storage._adgroup ?? Bloombox_Schema_Marketing_AdGroup()}
      set {_uniqueStorage()._adgroup = newValue}
    }
    /// Returns true if `adgroup` has been explicitly set.
    public var hasAdgroup: Bool {return _storage._adgroup != nil}
    /// Clears the value of `adgroup`. Subsequent reads from it will return its default value.
    public mutating func clearAdgroup() {_storage._adgroup = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularMessageField(value: &_storage._adgroup)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if let v = _storage._adgroup {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Represents an RPC operation to update an individual ad group's configuration or content.
public struct Bloombox_Schema_Services_Marketing_V1beta1_AdGroupUpdate: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".AdGroupUpdate"

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to update an individual adgroup.
  public struct Request: SwiftProtobuf.Message {
    public static let protoMessageName: String = Bloombox_Schema_Services_Marketing_V1beta1_AdGroupUpdate.protoMessageName + ".Request"

    /// ID for the campaign.
    public var campaignID: String = String()

    /// Adgroup ID to update.
    public var adgroupID: String = String()

    /// Creative updates to apply.
    public var creative: [Bloombox_Schema_Marketing_Creative] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.campaignID)
        case 2: try decoder.decodeSingularStringField(value: &self.adgroupID)
        case 3: try decoder.decodeRepeatedMessageField(value: &self.creative)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.campaignID.isEmpty {
        try visitor.visitSingularStringField(value: self.campaignID, fieldNumber: 1)
      }
      if !self.adgroupID.isEmpty {
        try visitor.visitSingularStringField(value: self.adgroupID, fieldNumber: 2)
      }
      if !self.creative.isEmpty {
        try visitor.visitRepeatedMessageField(value: self.creative, fieldNumber: 3)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.services.marketing.v1beta1"

extension Bloombox_Schema_Services_Marketing_V1beta1_MarketingError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "PARTNER_INVALID"),
    2: .same(proto: "LOCATION_INVALID"),
    3: .same(proto: "ID_INVALID"),
    4: .same(proto: "NAME_INVALID"),
    5: .same(proto: "CAMPAIGN_NOT_FOUND"),
    6: .same(proto: "ACCESS_DENIED"),
    7: .same(proto: "SETTINGS_INVALID"),
    8: .same(proto: "CHANNEL_INVALID"),
    9: .same(proto: "ADGROUP_INVALID"),
    10: .same(proto: "SETTINGS_MISMATCH"),
    11: .same(proto: "CREATIVE_INVALID"),
    12: .same(proto: "SMS_CREATIVE_INVALID"),
    13: .same(proto: "EMAIL_CREATIVE_INVALID"),
    14: .same(proto: "UPDATE_INVALID"),
    99: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignSummary: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "name"),
    3: .same(proto: "description"),
    4: .same(proto: "live"),
    5: .same(proto: "status"),
    6: .same(proto: "sms"),
    7: .same(proto: "email"),
    8: .same(proto: "tag"),
    9: .same(proto: "modified"),
  ]

  fileprivate class _StorageClass {
    var _key: Bloombox_Schema_Marketing_CampaignKey? = nil
    var _name: String = String()
    var _description_p: String = String()
    var _live: Bool = false
    var _status: Bloombox_Schema_Marketing_CampaignStatus = .pending
    var _sms: Bool = false
    var _email: Bool = false
    var _tag: [Bloombox_Schema_Marketing_CampaignTag] = []
    var _modified: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _name = source._name
      _description_p = source._description_p
      _live = source._live
      _status = source._status
      _sms = source._sms
      _email = source._email
      _tag = source._tag
      _modified = source._modified
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignSummary) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._key != other_storage._key {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._description_p != other_storage._description_p {return false}
        if _storage._live != other_storage._live {return false}
        if _storage._status != other_storage._status {return false}
        if _storage._sms != other_storage._sms {return false}
        if _storage._email != other_storage._email {return false}
        if _storage._tag != other_storage._tag {return false}
        if _storage._modified != other_storage._modified {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignList) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignList.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignList.Request) -> Bool {
    if self.partner != other.partner {return false}
    if self.location != other.location {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignList.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "campaign"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignList.Response) -> Bool {
    if self.campaign != other.campaign {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "campaign"),
  ]

  fileprivate class _StorageClass {
    var _campaign: Bloombox_Schema_Marketing_Campaign? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _campaign = source._campaign
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignGet.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._campaign != other_storage._campaign {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "partner"),
    2: .same(proto: "location"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "channel"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate.Request) -> Bool {
    if self.partner != other.partner {return false}
    if self.location != other.location {return false}
    if self.name != other.name {return false}
    if self.description_p != other.description_p {return false}
    if self.channel != other.channel {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignCreate.Response) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignUpdate) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignUpdate.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    3: .same(proto: "name"),
    4: .same(proto: "description"),
    5: .same(proto: "status"),
    6: .same(proto: "channel"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignUpdate.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if self.name != other.name {return false}
    if self.description_p != other.description_p {return false}
    if self.status != other.status {return false}
    if self.channel != other.channel {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "err"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignValidate.Response) -> Bool {
    if self.err != other.err {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignSend: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignSend) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_CampaignSend.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "dry_run"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_CampaignSend.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if self.dryRun != other.dryRun {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adgroup"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupList.Response) -> Bool {
    if self.adgroup != other.adgroup {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .same(proto: "channel"),
    3: .same(proto: "creative"),
  ]

  fileprivate class _StorageClass {
    var _campaignID: String = String()
    var _channel: Bloombox_Schema_Comms_Channel = .unspecified
    var _creative: Bloombox_Schema_Marketing_Creative? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _campaignID = source._campaignID
      _channel = source._channel
      _creative = source._creative
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate.Request) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._campaignID != other_storage._campaignID {return false}
        if _storage._channel != other_storage._channel {return false}
        if _storage._creative != other_storage._creative {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "adgroup_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupCreate.Response) -> Bool {
    if self.adgroupID != other.adgroupID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "adgroup_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if self.adgroupID != other.adgroupID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet.Response: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adgroup"),
  ]

  fileprivate class _StorageClass {
    var _adgroup: Bloombox_Schema_Marketing_AdGroup? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _adgroup = source._adgroup
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupGet.Response) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._adgroup != other_storage._adgroup {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupUpdate: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupUpdate) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Services_Marketing_V1beta1_AdGroupUpdate.Request: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "campaign_id"),
    2: .standard(proto: "adgroup_id"),
    3: .same(proto: "creative"),
  ]

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Services_Marketing_V1beta1_AdGroupUpdate.Request) -> Bool {
    if self.campaignID != other.campaignID {return false}
    if self.adgroupID != other.adgroupID {return false}
    if self.creative != other.creative {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
