// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/User.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Types of media that may be attached to a user.
public enum Bloombox_Schema_Identity_UserMediaType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// A portrait image of the person that this user represents.
  case picture // = 0

  /// Picture of the user's driver's license.
  case driversLicense // = 1

  /// Picture of the user's doctor's rec.
  case doctorRec // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .picture
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .picture
    case 1: self = .driversLicense
    case 2: self = .doctorRec
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .picture: return 0
    case .driversLicense: return 1
    case .doctorRec: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Enumerates providers through which users may authenticate.
public enum Bloombox_Schema_Identity_IdentityProvider: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Email/password-based authentication.
  case email // = 0

  /// Authentication via Google OpenID/OAuth2.
  case google // = 1

  /// OAuth2 Graph authentication via Facebook.
  case facebook // = 2

  /// OAuth2 account authentication via Twitter.
  case twitter // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .email
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .email
    case 1: self = .google
    case 2: self = .facebook
    case 3: self = .twitter
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .email: return 0
    case .google: return 1
    case .facebook: return 2
    case .twitter: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Enumerates sources for user enrollments.
public enum Bloombox_Schema_Identity_EnrollmentSource: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown or unspecified enrollment source.
  case unspecified // = 0

  /// Online enrollment.
  case online // = 1

  /// Internal application to Bloombox.
  case internalApp // = 2

  /// Partner application integration.
  case partnerApp // = 3

  /// In-store physical sign up.
  case inStore // = 4

  /// Internally imported user.
  case `import` // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecified
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .online
    case 2: self = .internalApp
    case 3: self = .partnerApp
    case 4: self = .inStore
    case 5: self = .import
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .online: return 1
    case .internalApp: return 2
    case .partnerApp: return 3
    case .inStore: return 4
    case .import: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Enumerates sources for user referrals
public enum Bloombox_Schema_Identity_ReferralSource: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown or unspecified enrollment source.
  case unknown // = 0

  /// Outdoor, real-world advertising.
  case outdoor // = 1

  /// Digital advertising.
  case digital // = 2

  /// Social Media referral.
  case socialMedia // = 3

  /// Friend or Colleague.
  case friend // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .outdoor
    case 2: self = .digital
    case 3: self = .socialMedia
    case 4: self = .friend
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .outdoor: return 1
    case .digital: return 2
    case .socialMedia: return 3
    case .friend: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies the type of consumer profile in use for an account.
public enum Bloombox_Schema_Identity_ConsumerType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The consumer type is not yet determined.
  case unvalidated // = 0

  /// The consumer is a recreational user.
  case recreational // = 1

  /// The consumer is a validated medical user. Considered a superset of 'RECREATIONAL'.
  case medical // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unvalidated
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unvalidated
    case 1: self = .recreational
    case 2: self = .medical
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unvalidated: return 0
    case .recreational: return 1
    case .medical: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Represents a key that refers to a user account.
public struct Bloombox_Schema_Identity_UserKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique ID for the user.
  public var uid: String = String()

  /// Specific user identity in use.
  public var identity: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents an individual who uses software.
public struct Bloombox_Schema_Identity_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Unique ID for the user.
  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  /// Boolean flags for this user.
  public var flags: Bloombox_Schema_Identity_UserFlags {
    get {return _storage._flags ?? Bloombox_Schema_Identity_UserFlags()}
    set {_uniqueStorage()._flags = newValue}
  }
  /// Returns true if `flags` has been explicitly set.
  public var hasFlags: Bool {return _storage._flags != nil}
  /// Clears the value of `flags`. Subsequent reads from it will return its default value.
  public mutating func clearFlags() {_storage._flags = nil}

  /// Person's information that backs this user.
  public var person: Opencannabis_Person_Person {
    get {return _storage._person ?? Opencannabis_Person_Person()}
    set {_uniqueStorage()._person = newValue}
  }
  /// Returns true if `person` has been explicitly set.
  public var hasPerson: Bool {return _storage._person != nil}
  /// Clears the value of `person`. Subsequent reads from it will return its default value.
  public mutating func clearPerson() {_storage._person = nil}

  /// Government ID associated with this user.
  public var identification: [Bloombox_Schema_Identity_ID] {
    get {return _storage._identification}
    set {_uniqueStorage()._identification = newValue}
  }

  /// Doctor's recommendations associated with this user.
  public var doctorRec: [Bloombox_Schema_Identity_Ids_UserDoctorRec] {
    get {return _storage._doctorRec}
    set {_uniqueStorage()._doctorRec = newValue}
  }

  /// Last time this user was seen, via auth/login/enrollment etc.
  public var seen: Opencannabis_Temporal_Instant {
    get {return _storage._seen ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._seen = newValue}
  }
  /// Returns true if `seen` has been explicitly set.
  public var hasSeen: Bool {return _storage._seen != nil}
  /// Clears the value of `seen`. Subsequent reads from it will return its default value.
  public mutating func clearSeen() {_storage._seen = nil}

  /// Timestamp for when this user was created.
  public var signup: Opencannabis_Temporal_Instant {
    get {return _storage._signup ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._signup = newValue}
  }
  /// Returns true if `signup` has been explicitly set.
  public var hasSignup: Bool {return _storage._signup != nil}
  /// Clears the value of `signup`. Subsequent reads from it will return its default value.
  public mutating func clearSignup() {_storage._signup = nil}

  /// Identities associated with this user.
  public var identities: Dictionary<String,Bloombox_Schema_Identity_UserIdentity> {
    get {return _storage._identities}
    set {_uniqueStorage()._identities = newValue}
  }

  /// Media associated with this user.
  public var media: Dictionary<String,Opencannabis_Media_MediaItem> {
    get {return _storage._media}
    set {_uniqueStorage()._media = newValue}
  }

  /// Consumer profile for this user.
  public var consumer: Bloombox_Schema_Identity_ConsumerProfile {
    get {return _storage._consumer ?? Bloombox_Schema_Identity_ConsumerProfile()}
    set {_uniqueStorage()._consumer = newValue}
  }
  /// Returns true if `consumer` has been explicitly set.
  public var hasConsumer: Bool {return _storage._consumer != nil}
  /// Clears the value of `consumer`. Subsequent reads from it will return its default value.
  public mutating func clearConsumer() {_storage._consumer = nil}

  /// Industry profile for this user.
  public var industry: Bloombox_Schema_Identity_IndustryProfile {
    get {return _storage._industry ?? Bloombox_Schema_Identity_IndustryProfile()}
    set {_uniqueStorage()._industry = newValue}
  }
  /// Returns true if `industry` has been explicitly set.
  public var hasIndustry: Bool {return _storage._industry != nil}
  /// Clears the value of `industry`. Subsequent reads from it will return its default value.
  public mutating func clearIndustry() {_storage._industry = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Boolean flags that may be set on a user account.
public struct Bloombox_Schema_Identity_UserFlags {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Indicates that the account has been validated.
  public var validated: Bool = false

  /// Indicates that the account is currently suspended.
  public var suspended: Bool = false

  /// Indicates that the account has admin privileges.
  public var admin: Bool = false

  /// Indicates that the account has access to beta systems.
  public var beta: Bool = false

  /// Indicates that the account has access to sandbox systems.
  public var sandbox: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Represents an identity that may be associated with a user account.
public struct Bloombox_Schema_Identity_UserIdentity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Provider for this external/foreign account.
  public var provider: Bloombox_Schema_Identity_IdentityProvider {
    get {return _storage._provider}
    set {_uniqueStorage()._provider = newValue}
  }

  /// Unique ID for this account with the specified provider.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Timestamp for when this identity was last user to authenticate the underlying user.
  public var seen: Opencannabis_Temporal_Instant {
    get {return _storage._seen ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._seen = newValue}
  }
  /// Returns true if `seen` has been explicitly set.
  public var hasSeen: Bool {return _storage._seen != nil}
  /// Clears the value of `seen`. Subsequent reads from it will return its default value.
  public mutating func clearSeen() {_storage._seen = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// User profile information for a cannabis consumer.
public struct Bloombox_Schema_Identity_ConsumerProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Profile active/inactive flag.
  public var active: Bool {
    get {return _storage._active}
    set {_uniqueStorage()._active = newValue}
  }

  /// Enumerates favorite dispensaries for a user.
  public var favoriteDispensaries: [String] {
    get {return _storage._favoriteDispensaries}
    set {_uniqueStorage()._favoriteDispensaries = newValue}
  }

  /// Specifies enrollment source attribution information.
  public var enrollmentSource: Bloombox_Schema_Identity_EnrollmentSource {
    get {return _storage._enrollmentSource}
    set {_uniqueStorage()._enrollmentSource = newValue}
  }

  /// Arbitrary string for the channel through which this user enrolled.
  public var enrollmentChannel: String {
    get {return _storage._enrollmentChannel}
    set {_uniqueStorage()._enrollmentChannel = newValue}
  }

  /// Preferences attached to a consumer account.
  public var preferences: Bloombox_Schema_Identity_ConsumerPreferences {
    get {return _storage._preferences ?? Bloombox_Schema_Identity_ConsumerPreferences()}
    set {_uniqueStorage()._preferences = newValue}
  }
  /// Returns true if `preferences` has been explicitly set.
  public var hasPreferences: Bool {return _storage._preferences != nil}
  /// Clears the value of `preferences`. Subsequent reads from it will return its default value.
  public mutating func clearPreferences() {_storage._preferences = nil}

  /// Specifies the primary consumer type for this account.
  public var type: Bloombox_Schema_Identity_ConsumerType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Specifies referral source attribution information.
  public var referralSource: Bloombox_Schema_Identity_ReferralSource {
    get {return _storage._referralSource}
    set {_uniqueStorage()._referralSource = newValue}
  }

  /// Specifies the referrer's name.
  public var referralDetail: String {
    get {return _storage._referralDetail}
    set {_uniqueStorage()._referralDetail = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Consumer preferences related to menus and products.
public struct Bloombox_Schema_Identity_MenuPreferences {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Preferred menu sections or product types.
  public var section: [Opencannabis_Products_Menu_Section_Section] = []

  /// Preferred feelings or experiential states.
  public var feeling: [Opencannabis_Structs_Labtesting_Feeling] = []

  /// Preferred tasting notes.
  public var tasteNote: [Opencannabis_Structs_Labtesting_TasteNote] = []

  /// Desired potency level.
  public var desiredPotency: Opencannabis_Structs_Labtesting_PotencyEstimate = .light

  /// Desired cannabinoid ratio.
  public var cannabinoidRatio: Opencannabis_Structs_Labtesting_CannabinoidRatio = .noCannabinoidPreference

  /// Preferred species types.
  public var species: [Opencannabis_Structs_Species] = []

  /// Preferred grow types.
  public var grow: [Opencannabis_Structs_Grow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies preferences related to a user's profile as a cannabis consumer.
public struct Bloombox_Schema_Identity_ConsumerPreferences {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Preferred menu sections/product types, and so on.
  public var menu: Bloombox_Schema_Identity_MenuPreferences {
    get {return _storage._menu ?? Bloombox_Schema_Identity_MenuPreferences()}
    set {_uniqueStorage()._menu = newValue}
  }
  /// Returns true if `menu` has been explicitly set.
  public var hasMenu: Bool {return _storage._menu != nil}
  /// Clears the value of `menu`. Subsequent reads from it will return its default value.
  public mutating func clearMenu() {_storage._menu = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents a consumer's membership at a particular dispensary.
public struct Bloombox_Schema_Identity_ConsumerMembership {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Referral source for this enrollment.
  public var referralSource: Bloombox_Schema_Identity_EnrollmentSource {
    get {return _storage._referralSource}
    set {_uniqueStorage()._referralSource = newValue}
  }

  /// Referral channel token - an artbirary, end-system provided value.
  public var referralChannel: String {
    get {return _storage._referralChannel}
    set {_uniqueStorage()._referralChannel = newValue}
  }

  /// Timestamp for when this profile enrolled.
  public var signedUpAt: Opencannabis_Temporal_Instant {
    get {return _storage._signedUpAt ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._signedUpAt = newValue}
  }
  /// Returns true if `signedUpAt` has been explicitly set.
  public var hasSignedUpAt: Bool {return _storage._signedUpAt != nil}
  /// Clears the value of `signedUpAt`. Subsequent reads from it will return its default value.
  public mutating func clearSignedUpAt() {_storage._signedUpAt = nil}

  /// Timestamp for when this profile was last seen.
  public var seen: Opencannabis_Temporal_Instant {
    get {return _storage._seen ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._seen = newValue}
  }
  /// Returns true if `seen` has been explicitly set.
  public var hasSeen: Bool {return _storage._seen != nil}
  /// Clears the value of `seen`. Subsequent reads from it will return its default value.
  public mutating func clearSeen() {_storage._seen = nil}

  /// Foreign ID for this membership, in the partner-colocated membership system.
  public var foreignID: String {
    get {return _storage._foreignID}
    set {_uniqueStorage()._foreignID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Profile for a cannabis industry professional of some sort.
public struct Bloombox_Schema_Identity_IndustryProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Profile inactive/active status.
  public var active: Bool = false

  /// Map of partner accesses levels to partner codes.
  public var partners: Dictionary<String,Bloombox_Schema_Security_Access_PartnerAccess> = [:]

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.identity"

extension Bloombox_Schema_Identity_UserMediaType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PICTURE"),
    1: .same(proto: "DRIVERS_LICENSE"),
    2: .same(proto: "DOCTOR_REC"),
  ]
}

extension Bloombox_Schema_Identity_IdentityProvider: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EMAIL"),
    1: .same(proto: "GOOGLE"),
    2: .same(proto: "FACEBOOK"),
    3: .same(proto: "TWITTER"),
  ]
}

extension Bloombox_Schema_Identity_EnrollmentSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED"),
    1: .same(proto: "ONLINE"),
    2: .same(proto: "INTERNAL_APP"),
    3: .same(proto: "PARTNER_APP"),
    4: .same(proto: "IN_STORE"),
    5: .same(proto: "IMPORT"),
  ]
}

extension Bloombox_Schema_Identity_ReferralSource: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "OUTDOOR"),
    2: .same(proto: "DIGITAL"),
    3: .same(proto: "SOCIAL_MEDIA"),
    4: .same(proto: "FRIEND"),
  ]
}

extension Bloombox_Schema_Identity_ConsumerType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNVALIDATED"),
    1: .same(proto: "RECREATIONAL"),
    2: .same(proto: "MEDICAL"),
  ]
}

extension Bloombox_Schema_Identity_UserKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "identity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.uid)
      case 2: try decoder.decodeSingularStringField(value: &self.identity)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uid.isEmpty {
      try visitor.visitSingularStringField(value: self.uid, fieldNumber: 1)
    }
    if !self.identity.isEmpty {
      try visitor.visitSingularStringField(value: self.identity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_UserKey) -> Bool {
    if self.uid != other.uid {return false}
    if self.identity != other.identity {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uid"),
    2: .same(proto: "flags"),
    3: .same(proto: "person"),
    20: .same(proto: "identification"),
    21: .standard(proto: "doctor_rec"),
    30: .same(proto: "seen"),
    31: .same(proto: "signup"),
    40: .same(proto: "identities"),
    41: .same(proto: "media"),
    100: .same(proto: "consumer"),
    101: .same(proto: "industry"),
  ]

  fileprivate class _StorageClass {
    var _uid: String = String()
    var _flags: Bloombox_Schema_Identity_UserFlags? = nil
    var _person: Opencannabis_Person_Person? = nil
    var _identification: [Bloombox_Schema_Identity_ID] = []
    var _doctorRec: [Bloombox_Schema_Identity_Ids_UserDoctorRec] = []
    var _seen: Opencannabis_Temporal_Instant? = nil
    var _signup: Opencannabis_Temporal_Instant? = nil
    var _identities: Dictionary<String,Bloombox_Schema_Identity_UserIdentity> = [:]
    var _media: Dictionary<String,Opencannabis_Media_MediaItem> = [:]
    var _consumer: Bloombox_Schema_Identity_ConsumerProfile? = nil
    var _industry: Bloombox_Schema_Identity_IndustryProfile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uid = source._uid
      _flags = source._flags
      _person = source._person
      _identification = source._identification
      _doctorRec = source._doctorRec
      _seen = source._seen
      _signup = source._signup
      _identities = source._identities
      _media = source._media
      _consumer = source._consumer
      _industry = source._industry
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uid)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._flags)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._person)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._identification)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._doctorRec)
        case 30: try decoder.decodeSingularMessageField(value: &_storage._seen)
        case 31: try decoder.decodeSingularMessageField(value: &_storage._signup)
        case 40: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Identity_UserIdentity>.self, value: &_storage._identities)
        case 41: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Opencannabis_Media_MediaItem>.self, value: &_storage._media)
        case 100: try decoder.decodeSingularMessageField(value: &_storage._consumer)
        case 101: try decoder.decodeSingularMessageField(value: &_storage._industry)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 1)
      }
      if let v = _storage._flags {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._person {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._identification.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._identification, fieldNumber: 20)
      }
      if !_storage._doctorRec.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._doctorRec, fieldNumber: 21)
      }
      if let v = _storage._seen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      }
      if let v = _storage._signup {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      }
      if !_storage._identities.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Identity_UserIdentity>.self, value: _storage._identities, fieldNumber: 40)
      }
      if !_storage._media.isEmpty {
        try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Opencannabis_Media_MediaItem>.self, value: _storage._media, fieldNumber: 41)
      }
      if let v = _storage._consumer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 100)
      }
      if let v = _storage._industry {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_User) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._uid != other_storage._uid {return false}
        if _storage._flags != other_storage._flags {return false}
        if _storage._person != other_storage._person {return false}
        if _storage._identification != other_storage._identification {return false}
        if _storage._doctorRec != other_storage._doctorRec {return false}
        if _storage._seen != other_storage._seen {return false}
        if _storage._signup != other_storage._signup {return false}
        if _storage._identities != other_storage._identities {return false}
        if _storage._media != other_storage._media {return false}
        if _storage._consumer != other_storage._consumer {return false}
        if _storage._industry != other_storage._industry {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_UserFlags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserFlags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validated"),
    2: .same(proto: "suspended"),
    3: .same(proto: "admin"),
    4: .same(proto: "beta"),
    5: .same(proto: "sandbox"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.validated)
      case 2: try decoder.decodeSingularBoolField(value: &self.suspended)
      case 3: try decoder.decodeSingularBoolField(value: &self.admin)
      case 4: try decoder.decodeSingularBoolField(value: &self.beta)
      case 5: try decoder.decodeSingularBoolField(value: &self.sandbox)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.validated != false {
      try visitor.visitSingularBoolField(value: self.validated, fieldNumber: 1)
    }
    if self.suspended != false {
      try visitor.visitSingularBoolField(value: self.suspended, fieldNumber: 2)
    }
    if self.admin != false {
      try visitor.visitSingularBoolField(value: self.admin, fieldNumber: 3)
    }
    if self.beta != false {
      try visitor.visitSingularBoolField(value: self.beta, fieldNumber: 4)
    }
    if self.sandbox != false {
      try visitor.visitSingularBoolField(value: self.sandbox, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_UserFlags) -> Bool {
    if self.validated != other.validated {return false}
    if self.suspended != other.suspended {return false}
    if self.admin != other.admin {return false}
    if self.beta != other.beta {return false}
    if self.sandbox != other.sandbox {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_UserIdentity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserIdentity"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "provider"),
    2: .same(proto: "id"),
    3: .same(proto: "seen"),
  ]

  fileprivate class _StorageClass {
    var _provider: Bloombox_Schema_Identity_IdentityProvider = .email
    var _id: String = String()
    var _seen: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _provider = source._provider
      _id = source._id
      _seen = source._seen
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._provider)
        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._seen)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._provider != .email {
        try visitor.visitSingularEnumField(value: _storage._provider, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if let v = _storage._seen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_UserIdentity) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._provider != other_storage._provider {return false}
        if _storage._id != other_storage._id {return false}
        if _storage._seen != other_storage._seen {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_ConsumerProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConsumerProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "active"),
    2: .standard(proto: "favorite_dispensaries"),
    3: .standard(proto: "enrollment_source"),
    4: .standard(proto: "enrollment_channel"),
    5: .same(proto: "preferences"),
    6: .same(proto: "type"),
    7: .standard(proto: "referral_source"),
    8: .standard(proto: "referral_detail"),
  ]

  fileprivate class _StorageClass {
    var _active: Bool = false
    var _favoriteDispensaries: [String] = []
    var _enrollmentSource: Bloombox_Schema_Identity_EnrollmentSource = .unspecified
    var _enrollmentChannel: String = String()
    var _preferences: Bloombox_Schema_Identity_ConsumerPreferences? = nil
    var _type: Bloombox_Schema_Identity_ConsumerType = .unvalidated
    var _referralSource: Bloombox_Schema_Identity_ReferralSource = .unknown
    var _referralDetail: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _active = source._active
      _favoriteDispensaries = source._favoriteDispensaries
      _enrollmentSource = source._enrollmentSource
      _enrollmentChannel = source._enrollmentChannel
      _preferences = source._preferences
      _type = source._type
      _referralSource = source._referralSource
      _referralDetail = source._referralDetail
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._active)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._favoriteDispensaries)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._enrollmentSource)
        case 4: try decoder.decodeSingularStringField(value: &_storage._enrollmentChannel)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._preferences)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._referralSource)
        case 8: try decoder.decodeSingularStringField(value: &_storage._referralDetail)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._active != false {
        try visitor.visitSingularBoolField(value: _storage._active, fieldNumber: 1)
      }
      if !_storage._favoriteDispensaries.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._favoriteDispensaries, fieldNumber: 2)
      }
      if _storage._enrollmentSource != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._enrollmentSource, fieldNumber: 3)
      }
      if !_storage._enrollmentChannel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._enrollmentChannel, fieldNumber: 4)
      }
      if let v = _storage._preferences {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._type != .unvalidated {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 6)
      }
      if _storage._referralSource != .unknown {
        try visitor.visitSingularEnumField(value: _storage._referralSource, fieldNumber: 7)
      }
      if !_storage._referralDetail.isEmpty {
        try visitor.visitSingularStringField(value: _storage._referralDetail, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_ConsumerProfile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._active != other_storage._active {return false}
        if _storage._favoriteDispensaries != other_storage._favoriteDispensaries {return false}
        if _storage._enrollmentSource != other_storage._enrollmentSource {return false}
        if _storage._enrollmentChannel != other_storage._enrollmentChannel {return false}
        if _storage._preferences != other_storage._preferences {return false}
        if _storage._type != other_storage._type {return false}
        if _storage._referralSource != other_storage._referralSource {return false}
        if _storage._referralDetail != other_storage._referralDetail {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_MenuPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MenuPreferences"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "section"),
    2: .same(proto: "feeling"),
    3: .standard(proto: "taste_note"),
    4: .standard(proto: "desired_potency"),
    5: .standard(proto: "cannabinoid_ratio"),
    6: .same(proto: "species"),
    7: .same(proto: "grow"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.section)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.feeling)
      case 3: try decoder.decodeRepeatedEnumField(value: &self.tasteNote)
      case 4: try decoder.decodeSingularEnumField(value: &self.desiredPotency)
      case 5: try decoder.decodeSingularEnumField(value: &self.cannabinoidRatio)
      case 6: try decoder.decodeRepeatedEnumField(value: &self.species)
      case 7: try decoder.decodeRepeatedEnumField(value: &self.grow)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.section.isEmpty {
      try visitor.visitPackedEnumField(value: self.section, fieldNumber: 1)
    }
    if !self.feeling.isEmpty {
      try visitor.visitPackedEnumField(value: self.feeling, fieldNumber: 2)
    }
    if !self.tasteNote.isEmpty {
      try visitor.visitPackedEnumField(value: self.tasteNote, fieldNumber: 3)
    }
    if self.desiredPotency != .light {
      try visitor.visitSingularEnumField(value: self.desiredPotency, fieldNumber: 4)
    }
    if self.cannabinoidRatio != .noCannabinoidPreference {
      try visitor.visitSingularEnumField(value: self.cannabinoidRatio, fieldNumber: 5)
    }
    if !self.species.isEmpty {
      try visitor.visitPackedEnumField(value: self.species, fieldNumber: 6)
    }
    if !self.grow.isEmpty {
      try visitor.visitPackedEnumField(value: self.grow, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_MenuPreferences) -> Bool {
    if self.section != other.section {return false}
    if self.feeling != other.feeling {return false}
    if self.tasteNote != other.tasteNote {return false}
    if self.desiredPotency != other.desiredPotency {return false}
    if self.cannabinoidRatio != other.cannabinoidRatio {return false}
    if self.species != other.species {return false}
    if self.grow != other.grow {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_ConsumerPreferences: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConsumerPreferences"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "menu"),
  ]

  fileprivate class _StorageClass {
    var _menu: Bloombox_Schema_Identity_MenuPreferences? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _menu = source._menu
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 10: try decoder.decodeSingularMessageField(value: &_storage._menu)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._menu {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_ConsumerPreferences) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._menu != other_storage._menu {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_ConsumerMembership: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConsumerMembership"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "referral_source"),
    2: .standard(proto: "referral_channel"),
    3: .standard(proto: "signed_up_at"),
    4: .same(proto: "seen"),
    5: .standard(proto: "foreign_id"),
  ]

  fileprivate class _StorageClass {
    var _referralSource: Bloombox_Schema_Identity_EnrollmentSource = .unspecified
    var _referralChannel: String = String()
    var _signedUpAt: Opencannabis_Temporal_Instant? = nil
    var _seen: Opencannabis_Temporal_Instant? = nil
    var _foreignID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _referralSource = source._referralSource
      _referralChannel = source._referralChannel
      _signedUpAt = source._signedUpAt
      _seen = source._seen
      _foreignID = source._foreignID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._referralSource)
        case 2: try decoder.decodeSingularStringField(value: &_storage._referralChannel)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._signedUpAt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._seen)
        case 5: try decoder.decodeSingularStringField(value: &_storage._foreignID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._referralSource != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._referralSource, fieldNumber: 1)
      }
      if !_storage._referralChannel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._referralChannel, fieldNumber: 2)
      }
      if let v = _storage._signedUpAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._seen {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._foreignID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._foreignID, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_ConsumerMembership) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._referralSource != other_storage._referralSource {return false}
        if _storage._referralChannel != other_storage._referralChannel {return false}
        if _storage._signedUpAt != other_storage._signedUpAt {return false}
        if _storage._seen != other_storage._seen {return false}
        if _storage._foreignID != other_storage._foreignID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_IndustryProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IndustryProfile"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "active"),
    2: .same(proto: "partners"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.active)
      case 2: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Security_Access_PartnerAccess>.self, value: &self.partners)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.active != false {
      try visitor.visitSingularBoolField(value: self.active, fieldNumber: 1)
    }
    if !self.partners.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,Bloombox_Schema_Security_Access_PartnerAccess>.self, value: self.partners, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Identity_IndustryProfile) -> Bool {
    if self.active != other.active {return false}
    if self.partners != other.partners {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
