// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/Preroll.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies flags that may be specifically applied to pre-rolled cannabis products.
public enum Opencannabis_Products_PrerollFlag: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Specifies that no flags are set.
  case noPrerollFlags // = 0

  /// Specifies that this pre-rolled item is hash-infused.
  case hashInfused // = 1

  /// Specifies that this pre-rolled item is kief-infused.
  case kiefInfused // = 2

  /// Specifies that this pre-rolled item is fortified with extracted cannabis products in some manner.
  case fortified // = 3

  /// Specifies that this pre-rolled item is rolled with "full flower" buds, rather than trimmings, or other discarded
  /// cannabis from other production processes.
  case fullFlower // = 4

  /// Specifies that this product contains tobacco.
  case containsTobacco // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .noPrerollFlags
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noPrerollFlags
    case 1: self = .hashInfused
    case 2: self = .kiefInfused
    case 3: self = .fortified
    case 4: self = .fullFlower
    case 5: self = .containsTobacco
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noPrerollFlags: return 0
    case .hashInfused: return 1
    case .kiefInfused: return 2
    case .fortified: return 3
    case .fullFlower: return 4
    case .containsTobacco: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies a pre-rolled cannabis product, where a production process consumes cannabis plant material and produces
/// end-products that are already rolled into joints, marijuana cigarettes, blunts, and so on.
public struct Opencannabis_Products_Preroll {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Product key that uniquely identifies this pre-rolled cannabis product.
  public var key: Opencannabis_Base_ProductKey {
    get {return _storage._key ?? Opencannabis_Base_ProductKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_storage._key = nil}

  /// Specifies the flowers used to produce this product, if known.
  public var flower: Opencannabis_Base_ProductReference {
    get {return _storage._flower ?? Opencannabis_Base_ProductReference()}
    set {_uniqueStorage()._flower = newValue}
  }
  /// Returns true if `flower` has been explicitly set.
  public var hasFlower: Bool {return _storage._flower != nil}
  /// Clears the value of `flower`. Subsequent reads from it will return its default value.
  public mutating func clearFlower() {_storage._flower = nil}

  /// Specifies the measured length of this prerolled item, if known.
  public var length: Double {
    get {return _storage._length}
    set {_uniqueStorage()._length = newValue}
  }

  /// Specifies the measured thickness of this prerolled item, if known.
  public var thickness: Double {
    get {return _storage._thickness}
    set {_uniqueStorage()._thickness = newValue}
  }

  /// Specifies flags that may be applied specifically to this prerolled item.
  public var flags: [Opencannabis_Products_PrerollFlag] {
    get {return _storage._flags}
    set {_uniqueStorage()._flags = newValue}
  }

  /// Specifies product content attached to this prerolled item.
  public var product: Opencannabis_Content_ProductContent {
    get {return _storage._product ?? Opencannabis_Content_ProductContent()}
    set {_uniqueStorage()._product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return _storage._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {_storage._product = nil}

  /// Specifies handling and materials data associated with this prerolled item.
  public var material: Opencannabis_Content_MaterialsData {
    get {return _storage._material ?? Opencannabis_Content_MaterialsData()}
    set {_uniqueStorage()._material = newValue}
  }
  /// Returns true if `material` has been explicitly set.
  public var hasMaterial: Bool {return _storage._material != nil}
  /// Clears the value of `material`. Subsequent reads from it will return its default value.
  public mutating func clearMaterial() {_storage._material = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.products"

extension Opencannabis_Products_PrerollFlag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_PREROLL_FLAGS"),
    1: .same(proto: "HASH_INFUSED"),
    2: .same(proto: "KIEF_INFUSED"),
    3: .same(proto: "FORTIFIED"),
    4: .same(proto: "FULL_FLOWER"),
    5: .same(proto: "CONTAINS_TOBACCO"),
  ]
}

extension Opencannabis_Products_Preroll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Preroll"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "flower"),
    3: .same(proto: "length"),
    4: .same(proto: "thickness"),
    5: .same(proto: "flags"),
    6: .same(proto: "product"),
    7: .same(proto: "material"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Base_ProductKey? = nil
    var _flower: Opencannabis_Base_ProductReference? = nil
    var _length: Double = 0
    var _thickness: Double = 0
    var _flags: [Opencannabis_Products_PrerollFlag] = []
    var _product: Opencannabis_Content_ProductContent? = nil
    var _material: Opencannabis_Content_MaterialsData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _flower = source._flower
      _length = source._length
      _thickness = source._thickness
      _flags = source._flags
      _product = source._product
      _material = source._material
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._flower)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._length)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._thickness)
        case 5: try decoder.decodeRepeatedEnumField(value: &_storage._flags)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._product)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._material)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._flower {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._length != 0 {
        try visitor.visitSingularDoubleField(value: _storage._length, fieldNumber: 3)
      }
      if _storage._thickness != 0 {
        try visitor.visitSingularDoubleField(value: _storage._thickness, fieldNumber: 4)
      }
      if !_storage._flags.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._flags, fieldNumber: 5)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._material {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Products_Preroll) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._key != other_storage._key {return false}
        if _storage._flower != other_storage._flower {return false}
        if _storage._length != other_storage._length {return false}
        if _storage._thickness != other_storage._thickness {return false}
        if _storage._flags != other_storage._flags {return false}
        if _storage._product != other_storage._product {return false}
        if _storage._material != other_storage._material {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
