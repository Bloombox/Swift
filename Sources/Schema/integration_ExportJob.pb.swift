// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: integration/ExportJob.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides the definition of a model which tracks a job for exporting data from Bloombox. The output targets of export
/// jobs are stored on Cloud Storage, and referenced via the media framework.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Describes the concept of a bulk data job that exports data *from* the Bloombox platform, *to* some other system or
/// database, via an intermediate format. The desired data is exported from Bloombox in the desired format, to GCS, and
/// then made available to the requesting user via a signed download link.
public struct Bloombox_Integration_ExportJob {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key uniquely addressing this export job.
  public var key: Bloombox_Integration_ExportJob.Key {
    get {return _storage._key ?? Bloombox_Integration_ExportJob.Key()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Describes the kind of data being exported.
  public var query: Bloombox_Integration_ExportJob.Query {
    get {return _storage._query ?? Bloombox_Integration_ExportJob.Query()}
    set {_uniqueStorage()._query = newValue}
  }
  /// Returns true if `query` has been explicitly set.
  public var hasQuery: Bool {return _storage._query != nil}
  /// Clears the value of `query`. Subsequent reads from it will return its default value.
  public mutating func clearQuery() {_uniqueStorage()._query = nil}

  /// Information about the target, or result, of the export job.
  public var target: Bloombox_Integration_ExportJob.Target {
    get {return _storage._target ?? Bloombox_Integration_ExportJob.Target()}
    set {_uniqueStorage()._target = newValue}
  }
  /// Returns true if `target` has been explicitly set.
  public var hasTarget: Bool {return _storage._target != nil}
  /// Clears the value of `target`. Subsequent reads from it will return its default value.
  public mutating func clearTarget() {_uniqueStorage()._target = nil}

  /// User that launched this export job.
  public var owner: Bloombox_Identity_UserKey {
    get {return _storage._owner ?? Bloombox_Identity_UserKey()}
    set {_uniqueStorage()._owner = newValue}
  }
  /// Returns true if `owner` has been explicitly set.
  public var hasOwner: Bool {return _storage._owner != nil}
  /// Clears the value of `owner`. Subsequent reads from it will return its default value.
  public mutating func clearOwner() {_uniqueStorage()._owner = nil}

  /// Describes the last time this export record was updated.
  public var modified: Opencannabis_Temporal_Instant {
    get {return _storage._modified ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._modified = newValue}
  }
  /// Returns true if `modified` has been explicitly set.
  public var hasModified: Bool {return _storage._modified != nil}
  /// Clears the value of `modified`. Subsequent reads from it will return its default value.
  public mutating func clearModified() {_uniqueStorage()._modified = nil}

  /// Describes when this export job was created.
  public var created: Opencannabis_Temporal_Instant {
    get {return _storage._created ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._created = newValue}
  }
  /// Returns true if `created` has been explicitly set.
  public var hasCreated: Bool {return _storage._created != nil}
  /// Clears the value of `created`. Subsequent reads from it will return its default value.
  public mutating func clearCreated() {_uniqueStorage()._created = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Enumerates the supported types of export jobs that may be requested from the system.
  public enum ExportType: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Sentinel value describing an unknown type of export.
    case unknownExportType // = 0

    /// Export product data for a given scope.
    case catalog // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknownExportType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownExportType
      case 1: self = .catalog
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownExportType: return 0
      case .catalog: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Describes the key for a given export job, which lives under the scope that governs its existence. For most intents
  /// and purposes, this is the partner location under which the job was invoked, plus a UUID.
  public struct Key {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Generated ID for the referenced export job. Generally a Type 4 UUID.
    public var id: String {
      get {return _storage._id}
      set {_uniqueStorage()._id = newValue}
    }

    /// Describes the integration run that owns this job.
    public var run: String {
      get {return _storage._run}
      set {_uniqueStorage()._run = newValue}
    }

    /// Describes the scope of this export job, which can either be a partner, or a location.
    public var scope: OneOf_Scope? {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Partner key for a partner-scoped export job.
    public var partner: Bloombox_Partner_PartnerKey {
      get {
        if case .partner(let v)? = _storage._scope {return v}
        return Bloombox_Partner_PartnerKey()
      }
      set {_uniqueStorage()._scope = .partner(newValue)}
    }

    /// Location key for a location-scoped export job.
    public var location: Bloombox_Partner_LocationKey {
      get {
        if case .location(let v)? = _storage._scope {return v}
        return Bloombox_Partner_LocationKey()
      }
      set {_uniqueStorage()._scope = .location(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Describes the scope of this export job, which can either be a partner, or a location.
    public enum OneOf_Scope: Equatable {
      /// Partner key for a partner-scoped export job.
      case partner(Bloombox_Partner_PartnerKey)
      /// Location key for a location-scoped export job.
      case location(Bloombox_Partner_LocationKey)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Integration_ExportJob.Key.OneOf_Scope, rhs: Bloombox_Integration_ExportJob.Key.OneOf_Scope) -> Bool {
        switch (lhs, rhs) {
        case (.partner(let l), .partner(let r)): return l == r
        case (.location(let l), .location(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Describes information about the data being exported in this job - which kind of data it is, and any parameters
  /// related to filtering or otherwise transforming that data.
  public struct Query {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Describes the general type of data being exported.
    public var type: Bloombox_Integration_ExportJob.ExportType = .unknownExportType

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Describes information about the target of the export job - i.e., the data file that is desired, as the output, from
  /// the export operation.
  public struct Target {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Format that we should export the data in.
    public var format: Opencannabis_Content_DataFormat {
      get {return _storage._format}
      set {_uniqueStorage()._format = newValue}
    }

    /// Describes an allocated media reference where this export job is expected to place its results.
    public var output: Opencannabis_Media_MediaReference {
      get {return _storage._output ?? Opencannabis_Media_MediaReference()}
      set {_uniqueStorage()._output = newValue}
    }
    /// Returns true if `output` has been explicitly set.
    public var hasOutput: Bool {return _storage._output != nil}
    /// Clears the value of `output`. Subsequent reads from it will return its default value.
    public mutating func clearOutput() {_uniqueStorage()._output = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Integration_ExportJob.ExportType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Integration_ExportJob.ExportType] = [
    .unknownExportType,
    .catalog,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.integration"

extension Bloombox_Integration_ExportJob: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExportJob"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "query"),
    3: .same(proto: "target"),
    4: .same(proto: "owner"),
    5: .same(proto: "modified"),
    6: .same(proto: "created"),
  ]

  fileprivate class _StorageClass {
    var _key: Bloombox_Integration_ExportJob.Key? = nil
    var _query: Bloombox_Integration_ExportJob.Query? = nil
    var _target: Bloombox_Integration_ExportJob.Target? = nil
    var _owner: Bloombox_Identity_UserKey? = nil
    var _modified: Opencannabis_Temporal_Instant? = nil
    var _created: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _query = source._query
      _target = source._target
      _owner = source._owner
      _modified = source._modified
      _created = source._created
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._query)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._target)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._owner)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._modified)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._created)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._query {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._owner {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._modified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._created {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Integration_ExportJob, rhs: Bloombox_Integration_ExportJob) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._query != rhs_storage._query {return false}
        if _storage._target != rhs_storage._target {return false}
        if _storage._owner != rhs_storage._owner {return false}
        if _storage._modified != rhs_storage._modified {return false}
        if _storage._created != rhs_storage._created {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Integration_ExportJob.ExportType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_EXPORT_TYPE"),
    1: .same(proto: "CATALOG"),
  ]
}

extension Bloombox_Integration_ExportJob.Key: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Integration_ExportJob.protoMessageName + ".Key"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "run"),
    3: .same(proto: "partner"),
    4: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _run: String = String()
    var _scope: Bloombox_Integration_ExportJob.Key.OneOf_Scope?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _run = source._run
      _scope = source._scope
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._run)
        case 3:
          var v: Bloombox_Partner_PartnerKey?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .partner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .partner(v)}
        case 4:
          var v: Bloombox_Partner_LocationKey?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .location(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .location(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._run.isEmpty {
        try visitor.visitSingularStringField(value: _storage._run, fieldNumber: 2)
      }
      switch _storage._scope {
      case .partner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .location(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Integration_ExportJob.Key, rhs: Bloombox_Integration_ExportJob.Key) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._run != rhs_storage._run {return false}
        if _storage._scope != rhs_storage._scope {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Integration_ExportJob.Query: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Integration_ExportJob.protoMessageName + ".Query"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .unknownExportType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Integration_ExportJob.Query, rhs: Bloombox_Integration_ExportJob.Query) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Integration_ExportJob.Target: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Integration_ExportJob.protoMessageName + ".Target"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "format"),
    2: .same(proto: "output"),
  ]

  fileprivate class _StorageClass {
    var _format: Opencannabis_Content_DataFormat = .unknownFormat
    var _output: Opencannabis_Media_MediaReference? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _format = source._format
      _output = source._output
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._format)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._output)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._format != .unknownFormat {
        try visitor.visitSingularEnumField(value: _storage._format, fieldNumber: 1)
      }
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Integration_ExportJob.Target, rhs: Bloombox_Integration_ExportJob.Target) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._format != rhs_storage._format {return false}
        if _storage._output != rhs_storage._output {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
