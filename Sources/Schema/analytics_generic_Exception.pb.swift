// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics/generic/Exception.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// References a line and column number in a source file that is mentioned in an error report.
public struct Bloombox_Schema_Analytics_Generic_SourceLineReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Line number in a source code file.
  public var line: Int32 = 0

  /// Column number in a line in a source code file.
  public var column: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// References a location for source code that is mentioned in an error report.
public struct Bloombox_Schema_Analytics_Generic_SourceLocation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Arbitrary 'module' name for this source code. Usually the containing codebase.
  public var module: String {
    get {return _storage._module}
    set {_uniqueStorage()._module = newValue}
  }

  /// Full path to a source code file within that module or codebase.
  public var filepath: String {
    get {return _storage._filepath}
    set {_uniqueStorage()._filepath = newValue}
  }

  /// Exact location within that file, either by raw byte offset or a line/column pair.
  public var pinpoint: OneOf_Pinpoint? {
    get {return _storage._pinpoint}
    set {_uniqueStorage()._pinpoint = newValue}
  }

  /// Reference to a line/column in that file.
  public var lineref: Bloombox_Schema_Analytics_Generic_SourceLineReference {
    get {
      if case .lineref(let v)? = _storage._pinpoint {return v}
      return Bloombox_Schema_Analytics_Generic_SourceLineReference()
    }
    set {_uniqueStorage()._pinpoint = .lineref(newValue)}
  }

  /// Raw byte offset in a source code file.
  public var offset: Int64 {
    get {
      if case .offset(let v)? = _storage._pinpoint {return v}
      return 0
    }
    set {_uniqueStorage()._pinpoint = .offset(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Exact location within that file, either by raw byte offset or a line/column pair.
  public enum OneOf_Pinpoint: Equatable {
    /// Reference to a line/column in that file.
    case lineref(Bloombox_Schema_Analytics_Generic_SourceLineReference)
    /// Raw byte offset in a source code file.
    case offset(Int64)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Schema_Analytics_Generic_SourceLocation.OneOf_Pinpoint, rhs: Bloombox_Schema_Analytics_Generic_SourceLocation.OneOf_Pinpoint) -> Bool {
      switch (lhs, rhs) {
      case (.lineref(let l), .lineref(let r)): return l == r
      case (.offset(let l), .offset(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents an error event.
public struct Bloombox_Schema_Analytics_Generic_Exception {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// String domain value for this error, if any.
  public var domain: String {
    get {return _storage._domain}
    set {_uniqueStorage()._domain = newValue}
  }

  /// Code for this failure type, if any.
  public var code: Int32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  /// Source location context for this failure.
  public var location: Bloombox_Schema_Analytics_Generic_SourceLocation {
    get {return _storage._location ?? Bloombox_Schema_Analytics_Generic_SourceLocation()}
    set {_uniqueStorage()._location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  public var hasLocation: Bool {return _storage._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  public mutating func clearLocation() {_uniqueStorage()._location = nil}

  /// Occurrence timestamp.
  public var occurred: Opencannabis_Temporal_Instant {
    get {return _storage._occurred ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._occurred = newValue}
  }
  /// Returns true if `occurred` has been explicitly set.
  public var hasOccurred: Bool {return _storage._occurred != nil}
  /// Clears the value of `occurred`. Subsequent reads from it will return its default value.
  public mutating func clearOccurred() {_uniqueStorage()._occurred = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.analytics.generic"

extension Bloombox_Schema_Analytics_Generic_SourceLineReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceLineReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    3: .same(proto: "line"),
    4: .same(proto: "column"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 3: try decoder.decodeSingularInt32Field(value: &self.line)
      case 4: try decoder.decodeSingularInt32Field(value: &self.column)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.line != 0 {
      try visitor.visitSingularInt32Field(value: self.line, fieldNumber: 3)
    }
    if self.column != 0 {
      try visitor.visitSingularInt32Field(value: self.column, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Analytics_Generic_SourceLineReference, rhs: Bloombox_Schema_Analytics_Generic_SourceLineReference) -> Bool {
    if lhs.line != rhs.line {return false}
    if lhs.column != rhs.column {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Analytics_Generic_SourceLocation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SourceLocation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "module"),
    2: .same(proto: "filepath"),
    3: .same(proto: "lineref"),
    4: .same(proto: "offset"),
  ]

  fileprivate class _StorageClass {
    var _module: String = String()
    var _filepath: String = String()
    var _pinpoint: Bloombox_Schema_Analytics_Generic_SourceLocation.OneOf_Pinpoint?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _module = source._module
      _filepath = source._filepath
      _pinpoint = source._pinpoint
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._module)
        case 2: try decoder.decodeSingularStringField(value: &_storage._filepath)
        case 3:
          var v: Bloombox_Schema_Analytics_Generic_SourceLineReference?
          if let current = _storage._pinpoint {
            try decoder.handleConflictingOneOf()
            if case .lineref(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._pinpoint = .lineref(v)}
        case 4:
          if _storage._pinpoint != nil {try decoder.handleConflictingOneOf()}
          var v: Int64?
          try decoder.decodeSingularInt64Field(value: &v)
          if let v = v {_storage._pinpoint = .offset(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._module.isEmpty {
        try visitor.visitSingularStringField(value: _storage._module, fieldNumber: 1)
      }
      if !_storage._filepath.isEmpty {
        try visitor.visitSingularStringField(value: _storage._filepath, fieldNumber: 2)
      }
      switch _storage._pinpoint {
      case .lineref(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .offset(let v)?:
        try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Analytics_Generic_SourceLocation, rhs: Bloombox_Schema_Analytics_Generic_SourceLocation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._module != rhs_storage._module {return false}
        if _storage._filepath != rhs_storage._filepath {return false}
        if _storage._pinpoint != rhs_storage._pinpoint {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Analytics_Generic_Exception: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Exception"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "domain"),
    2: .same(proto: "code"),
    3: .same(proto: "location"),
    4: .same(proto: "occurred"),
  ]

  fileprivate class _StorageClass {
    var _domain: String = String()
    var _code: Int32 = 0
    var _location: Bloombox_Schema_Analytics_Generic_SourceLocation? = nil
    var _occurred: Opencannabis_Temporal_Instant? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _domain = source._domain
      _code = source._code
      _location = source._location
      _occurred = source._occurred
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._domain)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._occurred)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._domain.isEmpty {
        try visitor.visitSingularStringField(value: _storage._domain, fieldNumber: 1)
      }
      if _storage._code != 0 {
        try visitor.visitSingularInt32Field(value: _storage._code, fieldNumber: 2)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._occurred {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Analytics_Generic_Exception, rhs: Bloombox_Schema_Analytics_Generic_Exception) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._domain != rhs_storage._domain {return false}
        if _storage._code != rhs_storage._code {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._occurred != rhs_storage._occurred {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
