// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: contact/PhoneNumber.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides a structured record that specifies an E164-formatted telephone number.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Payload that specifies a phone number, and any additional information to be carried with it (including verification
/// state, if applicable).
public struct Opencannabis_Contact_PhoneNumber: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".PhoneNumber"

  /// E164-formatted telephone number.
  public var e164: String = String()

  /// Validation status. Usable by providers to indicate a phone number that has already been validated, or that a phone
  /// number remains unvalidated.
  public var validated: Bool = false

  /// Display text for this phone number, if applicable.
  public var display: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.e164)
      case 2: try decoder.decodeSingularBoolField(value: &self.validated)
      case 3: try decoder.decodeSingularStringField(value: &self.display)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.e164.isEmpty {
      try visitor.visitSingularStringField(value: self.e164, fieldNumber: 1)
    }
    if self.validated != false {
      try visitor.visitSingularBoolField(value: self.validated, fieldNumber: 2)
    }
    if !self.display.isEmpty {
      try visitor.visitSingularStringField(value: self.display, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.contact"

extension Opencannabis_Contact_PhoneNumber: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "e164"),
    2: .same(proto: "validated"),
    3: .same(proto: "display"),
  ]

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Contact_PhoneNumber) -> Bool {
    if self.e164 != other.e164 {return false}
    if self.validated != other.validated {return false}
    if self.display != other.display {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
