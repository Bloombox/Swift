// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: content/Colors.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Structures for dealing with colors in various forms (including hex, RGBA, etc), color schemes, and so on.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies standard colors.
public enum Opencannabis_Content_StandardColor: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified or unrecognized standard color.
  case unspecifiedColor // = 0

  /// The color red.
  case red // = 1

  /// The color green.
  case green // = 2

  /// The color blue.
  case blue // = 3

  /// The color yellow.
  case yellow // = 4

  /// The color purple.
  case purple // = 5

  /// The color orange.
  case orange // = 6

  /// The color pink.
  case pink // = 7

  /// The color gray.
  case gray // = 8

  /// The color brown.
  case brown // = 9
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedColor
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedColor
    case 1: self = .red
    case 2: self = .green
    case 3: self = .blue
    case 4: self = .yellow
    case 5: self = .purple
    case 6: self = .orange
    case 7: self = .pink
    case 8: self = .gray
    case 9: self = .brown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedColor: return 0
    case .red: return 1
    case .green: return 2
    case .blue: return 3
    case .yellow: return 4
    case .purple: return 5
    case .orange: return 6
    case .pink: return 7
    case .gray: return 8
    case .brown: return 9
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Content_StandardColor: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Content_StandardColor] = [
    .unspecifiedColor,
    .red,
    .green,
    .blue,
    .yellow,
    .purple,
    .orange,
    .pink,
    .gray,
    .brown,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a component of a high-res color specification.
public struct Opencannabis_Content_RGBAColorSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Red value for the color.
  public var r: UInt64 = 0

  /// Green value for the color.
  public var g: UInt64 = 0

  /// Blue value for the color.
  public var b: UInt64 = 0

  /// Alpha value for the color.
  public var a: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies a hue-saturation-brightness color specification.
public struct Opencannabis_Content_HSBColorSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Hue value for the color.
  public var h: UInt64 = 0

  /// Saturation value for the color.
  public var s: UInt64 = 0

  /// Brightness value for the color.
  public var b: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies a cyan-magenta-yellow-key color specification.
public struct Opencannabis_Content_CMYKColorSpec {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Cyan avalue for the color.
  public var c: UInt64 = 0

  /// Magenta value for the color.
  public var m: UInt64 = 0

  /// Yellow value for the color.
  public var y: UInt64 = 0

  /// Key value (or, black) for the color.
  public var k: UInt64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an individual color, via standard reference, or hex, or some other form.
public struct Opencannabis_Content_Color {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var spec: OneOf_Spec? {
    get {return _storage._spec}
    set {_uniqueStorage()._spec = newValue}
  }

  /// Specifies a reference to a standard, simple color.
  public var standard: Opencannabis_Content_StandardColor {
    get {
      if case .standard(let v)? = _storage._spec {return v}
      return .unspecifiedColor
    }
    set {_uniqueStorage()._spec = .standard(newValue)}
  }

  /// Specifies a reference to a color by RGB hex code.
  public var hex: String {
    get {
      if case .hex(let v)? = _storage._spec {return v}
      return String()
    }
    set {_uniqueStorage()._spec = .hex(newValue)}
  }

  /// Specifies a full RGBA color.
  public var rgba: Opencannabis_Content_RGBAColorSpec {
    get {
      if case .rgba(let v)? = _storage._spec {return v}
      return Opencannabis_Content_RGBAColorSpec()
    }
    set {_uniqueStorage()._spec = .rgba(newValue)}
  }

  /// Specifies an HSB-based color.
  public var hsb: Opencannabis_Content_HSBColorSpec {
    get {
      if case .hsb(let v)? = _storage._spec {return v}
      return Opencannabis_Content_HSBColorSpec()
    }
    set {_uniqueStorage()._spec = .hsb(newValue)}
  }

  /// Specifies a CMYK-based color.
  public var cmyk: Opencannabis_Content_CMYKColorSpec {
    get {
      if case .cmyk(let v)? = _storage._spec {return v}
      return Opencannabis_Content_CMYKColorSpec()
    }
    set {_uniqueStorage()._spec = .cmyk(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Spec: Equatable {
    /// Specifies a reference to a standard, simple color.
    case standard(Opencannabis_Content_StandardColor)
    /// Specifies a reference to a color by RGB hex code.
    case hex(String)
    /// Specifies a full RGBA color.
    case rgba(Opencannabis_Content_RGBAColorSpec)
    /// Specifies an HSB-based color.
    case hsb(Opencannabis_Content_HSBColorSpec)
    /// Specifies a CMYK-based color.
    case cmyk(Opencannabis_Content_CMYKColorSpec)

  #if !swift(>=4.1)
    public static func ==(lhs: Opencannabis_Content_Color.OneOf_Spec, rhs: Opencannabis_Content_Color.OneOf_Spec) -> Bool {
      switch (lhs, rhs) {
      case (.standard(let l), .standard(let r)): return l == r
      case (.hex(let l), .hex(let r)): return l == r
      case (.rgba(let l), .rgba(let r)): return l == r
      case (.hsb(let l), .hsb(let r)): return l == r
      case (.cmyk(let l), .cmyk(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a scheme of color selections, with primary and secondary colors and additional configurable color values.
public struct Opencannabis_Content_ColorScheme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Primary color for the color scheme.
  public var primary: Opencannabis_Content_Color {
    get {return _storage._primary ?? Opencannabis_Content_Color()}
    set {_uniqueStorage()._primary = newValue}
  }
  /// Returns true if `primary` has been explicitly set.
  public var hasPrimary: Bool {return _storage._primary != nil}
  /// Clears the value of `primary`. Subsequent reads from it will return its default value.
  public mutating func clearPrimary() {_uniqueStorage()._primary = nil}

  /// Secondary color for the color scheme.
  public var secondary: Opencannabis_Content_Color {
    get {return _storage._secondary ?? Opencannabis_Content_Color()}
    set {_uniqueStorage()._secondary = newValue}
  }
  /// Returns true if `secondary` has been explicitly set.
  public var hasSecondary: Bool {return _storage._secondary != nil}
  /// Clears the value of `secondary`. Subsequent reads from it will return its default value.
  public mutating func clearSecondary() {_uniqueStorage()._secondary = nil}

  /// Alert, or attention color, for the color scheme.
  public var alert: Opencannabis_Content_Color {
    get {return _storage._alert ?? Opencannabis_Content_Color()}
    set {_uniqueStorage()._alert = newValue}
  }
  /// Returns true if `alert` has been explicitly set.
  public var hasAlert: Bool {return _storage._alert != nil}
  /// Clears the value of `alert`. Subsequent reads from it will return its default value.
  public mutating func clearAlert() {_uniqueStorage()._alert = nil}

  /// Color shades to be used in various contexts.
  public var shades: [Opencannabis_Content_Color] {
    get {return _storage._shades}
    set {_uniqueStorage()._shades = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.content"

extension Opencannabis_Content_StandardColor: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_COLOR"),
    1: .same(proto: "RED"),
    2: .same(proto: "GREEN"),
    3: .same(proto: "BLUE"),
    4: .same(proto: "YELLOW"),
    5: .same(proto: "PURPLE"),
    6: .same(proto: "ORANGE"),
    7: .same(proto: "PINK"),
    8: .same(proto: "GRAY"),
    9: .same(proto: "BROWN"),
  ]
}

extension Opencannabis_Content_RGBAColorSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RGBAColorSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "r"),
    2: .same(proto: "g"),
    3: .same(proto: "b"),
    4: .same(proto: "a"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.r)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.g)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.b)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.a)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.r != 0 {
      try visitor.visitSingularUInt64Field(value: self.r, fieldNumber: 1)
    }
    if self.g != 0 {
      try visitor.visitSingularUInt64Field(value: self.g, fieldNumber: 2)
    }
    if self.b != 0 {
      try visitor.visitSingularUInt64Field(value: self.b, fieldNumber: 3)
    }
    if self.a != 0 {
      try visitor.visitSingularUInt64Field(value: self.a, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_RGBAColorSpec, rhs: Opencannabis_Content_RGBAColorSpec) -> Bool {
    if lhs.r != rhs.r {return false}
    if lhs.g != rhs.g {return false}
    if lhs.b != rhs.b {return false}
    if lhs.a != rhs.a {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Content_HSBColorSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HSBColorSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "h"),
    2: .same(proto: "s"),
    3: .same(proto: "b"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.h)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.s)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.b)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.h != 0 {
      try visitor.visitSingularUInt64Field(value: self.h, fieldNumber: 1)
    }
    if self.s != 0 {
      try visitor.visitSingularUInt64Field(value: self.s, fieldNumber: 2)
    }
    if self.b != 0 {
      try visitor.visitSingularUInt64Field(value: self.b, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_HSBColorSpec, rhs: Opencannabis_Content_HSBColorSpec) -> Bool {
    if lhs.h != rhs.h {return false}
    if lhs.s != rhs.s {return false}
    if lhs.b != rhs.b {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Content_CMYKColorSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CMYKColorSpec"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "c"),
    2: .same(proto: "m"),
    3: .same(proto: "y"),
    4: .same(proto: "k"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.c)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.m)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.y)
      case 4: try decoder.decodeSingularUInt64Field(value: &self.k)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.c != 0 {
      try visitor.visitSingularUInt64Field(value: self.c, fieldNumber: 1)
    }
    if self.m != 0 {
      try visitor.visitSingularUInt64Field(value: self.m, fieldNumber: 2)
    }
    if self.y != 0 {
      try visitor.visitSingularUInt64Field(value: self.y, fieldNumber: 3)
    }
    if self.k != 0 {
      try visitor.visitSingularUInt64Field(value: self.k, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_CMYKColorSpec, rhs: Opencannabis_Content_CMYKColorSpec) -> Bool {
    if lhs.c != rhs.c {return false}
    if lhs.m != rhs.m {return false}
    if lhs.y != rhs.y {return false}
    if lhs.k != rhs.k {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Content_Color: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Color"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "standard"),
    2: .same(proto: "hex"),
    3: .same(proto: "rgba"),
    4: .same(proto: "hsb"),
    5: .same(proto: "cmyk"),
  ]

  fileprivate class _StorageClass {
    var _spec: Opencannabis_Content_Color.OneOf_Spec?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _spec = source._spec
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: Opencannabis_Content_StandardColor?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._spec = .standard(v)}
        case 2:
          if _storage._spec != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._spec = .hex(v)}
        case 3:
          var v: Opencannabis_Content_RGBAColorSpec?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .rgba(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .rgba(v)}
        case 4:
          var v: Opencannabis_Content_HSBColorSpec?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .hsb(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .hsb(v)}
        case 5:
          var v: Opencannabis_Content_CMYKColorSpec?
          if let current = _storage._spec {
            try decoder.handleConflictingOneOf()
            if case .cmyk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._spec = .cmyk(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._spec {
      case .standard(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      case .hex(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      case .rgba(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .hsb(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .cmyk(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_Color, rhs: Opencannabis_Content_Color) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._spec != rhs_storage._spec {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Content_ColorScheme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ColorScheme"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "primary"),
    2: .same(proto: "secondary"),
    3: .same(proto: "alert"),
    4: .same(proto: "shades"),
  ]

  fileprivate class _StorageClass {
    var _primary: Opencannabis_Content_Color? = nil
    var _secondary: Opencannabis_Content_Color? = nil
    var _alert: Opencannabis_Content_Color? = nil
    var _shades: [Opencannabis_Content_Color] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _primary = source._primary
      _secondary = source._secondary
      _alert = source._alert
      _shades = source._shades
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._primary)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._secondary)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._alert)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._shades)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._primary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._secondary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._alert {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._shades.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._shades, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_ColorScheme, rhs: Opencannabis_Content_ColorScheme) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._primary != rhs_storage._primary {return false}
        if _storage._secondary != rhs_storage._secondary {return false}
        if _storage._alert != rhs_storage._alert {return false}
        if _storage._shades != rhs_storage._shades {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
