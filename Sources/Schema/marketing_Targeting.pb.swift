// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: marketing/Targeting.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies an age range as a targeting parameter.
public struct Bloombox_Schema_Marketing_AgeTargeting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether the age range must strictly apply to all users, rejecting users that cannot verifiably be included.
  public var strict: Bool = false

  /// Minimum age.
  public var minimum: UInt32 = 0

  /// Maximum age.
  public var maximum: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Target a specific gender.
public struct Bloombox_Schema_Marketing_GenderTargeting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specify a specific gender to target.
  public var target: Opencannabis_Person_Gender = .unspecified

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies menu preferences to target users by.
public struct Bloombox_Schema_Marketing_PreferenceTargeting {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Menu preferences, stated by a user, to target by a given campaign.
  public var menu: Bloombox_Schema_Identity_MenuPreferences {
    get {return _storage._menu ?? Bloombox_Schema_Identity_MenuPreferences()}
    set {_uniqueStorage()._menu = newValue}
  }
  /// Returns true if `menu` has been explicitly set.
  public var hasMenu: Bool {return _storage._menu != nil}
  /// Clears the value of `menu`. Subsequent reads from it will return its default value.
  public mutating func clearMenu() {_storage._menu = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Targeting policy block, that binds a targeting configuration to a campaign.
public struct Bloombox_Schema_Marketing_TargetingPolicy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this policy is enabled or not.
  public var enabled: Bool {
    get {return _storage._enabled}
    set {_uniqueStorage()._enabled = newValue}
  }

  /// Policy for a given type of user targeting.
  public var policy: OneOf_Policy? {
    get {return _storage._policy}
    set {_uniqueStorage()._policy = newValue}
  }

  /// Age-based user targeting.
  public var age: Bloombox_Schema_Marketing_AgeTargeting {
    get {
      if case .age(let v)? = _storage._policy {return v}
      return Bloombox_Schema_Marketing_AgeTargeting()
    }
    set {_uniqueStorage()._policy = .age(newValue)}
  }

  /// Gender-based user targeting.
  public var gender: Bloombox_Schema_Marketing_GenderTargeting {
    get {
      if case .gender(let v)? = _storage._policy {return v}
      return Bloombox_Schema_Marketing_GenderTargeting()
    }
    set {_uniqueStorage()._policy = .gender(newValue)}
  }

  /// Menu-preference-based targeting.
  public var preferences: Bloombox_Schema_Marketing_PreferenceTargeting {
    get {
      if case .preferences(let v)? = _storage._policy {return v}
      return Bloombox_Schema_Marketing_PreferenceTargeting()
    }
    set {_uniqueStorage()._policy = .preferences(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Policy for a given type of user targeting.
  public enum OneOf_Policy: Equatable {
    /// Age-based user targeting.
    case age(Bloombox_Schema_Marketing_AgeTargeting)
    /// Gender-based user targeting.
    case gender(Bloombox_Schema_Marketing_GenderTargeting)
    /// Menu-preference-based targeting.
    case preferences(Bloombox_Schema_Marketing_PreferenceTargeting)

    public static func ==(lhs: Bloombox_Schema_Marketing_TargetingPolicy.OneOf_Policy, rhs: Bloombox_Schema_Marketing_TargetingPolicy.OneOf_Policy) -> Bool {
      switch (lhs, rhs) {
      case (.age(let l), .age(let r)): return l == r
      case (.gender(let l), .gender(let r)): return l == r
      case (.preferences(let l), .preferences(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.marketing"

extension Bloombox_Schema_Marketing_AgeTargeting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AgeTargeting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "strict"),
    2: .same(proto: "minimum"),
    3: .same(proto: "maximum"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.strict)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.minimum)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.maximum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.strict != false {
      try visitor.visitSingularBoolField(value: self.strict, fieldNumber: 1)
    }
    if self.minimum != 0 {
      try visitor.visitSingularUInt32Field(value: self.minimum, fieldNumber: 2)
    }
    if self.maximum != 0 {
      try visitor.visitSingularUInt32Field(value: self.maximum, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Marketing_AgeTargeting) -> Bool {
    if self.strict != other.strict {return false}
    if self.minimum != other.minimum {return false}
    if self.maximum != other.maximum {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Marketing_GenderTargeting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenderTargeting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "target"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.target)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.target != .unspecified {
      try visitor.visitSingularEnumField(value: self.target, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Marketing_GenderTargeting) -> Bool {
    if self.target != other.target {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Marketing_PreferenceTargeting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PreferenceTargeting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "menu"),
  ]

  fileprivate class _StorageClass {
    var _menu: Bloombox_Schema_Identity_MenuPreferences? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _menu = source._menu
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._menu)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._menu {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Marketing_PreferenceTargeting) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._menu != other_storage._menu {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Marketing_TargetingPolicy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TargetingPolicy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .same(proto: "age"),
    3: .same(proto: "gender"),
    4: .same(proto: "preferences"),
  ]

  fileprivate class _StorageClass {
    var _enabled: Bool = false
    var _policy: Bloombox_Schema_Marketing_TargetingPolicy.OneOf_Policy?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _enabled = source._enabled
      _policy = source._policy
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._enabled)
        case 2:
          var v: Bloombox_Schema_Marketing_AgeTargeting?
          if let current = _storage._policy {
            try decoder.handleConflictingOneOf()
            if case .age(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._policy = .age(v)}
        case 3:
          var v: Bloombox_Schema_Marketing_GenderTargeting?
          if let current = _storage._policy {
            try decoder.handleConflictingOneOf()
            if case .gender(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._policy = .gender(v)}
        case 4:
          var v: Bloombox_Schema_Marketing_PreferenceTargeting?
          if let current = _storage._policy {
            try decoder.handleConflictingOneOf()
            if case .preferences(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._policy = .preferences(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._enabled != false {
        try visitor.visitSingularBoolField(value: _storage._enabled, fieldNumber: 1)
      }
      switch _storage._policy {
      case .age(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .gender(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .preferences(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Marketing_TargetingPolicy) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._enabled != other_storage._enabled {return false}
        if _storage._policy != other_storage._policy {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
