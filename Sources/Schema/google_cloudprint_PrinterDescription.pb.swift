// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloudprint/PrinterDescription.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Printer description definitions, which detail capabilities and settings for a given printer.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Section of a CDD that describes the capabilities and physical units of a cloud-connected printer.
public struct Google_Cloudprint_PrinterDescriptionSection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Content types (sometimes referred to as MIME types) that are supported by the printer.
  ///
  /// The order of these types determines which content type the document should be converted to. For example, if the
  /// types are ordered as:
  ///
  ///   [
  ///     {"content_type": "application/pdf"},
  ///     {"content_type": "image/pwg-raster"}
  ///   ]
  ///
  /// Then the document's content type will first be matched to any content type in the list. If there is a match, then
  /// the document will be sent to the printer as is. If there is no match, then the document will be converted to a
  /// content type which the server supports starting from the first option. In this example, if the document is sent as
  /// "text/html," and the printer supports "application/pdf" and "image/pwg-raster", then the document will be converted
  /// to "application/pdf" and not "image/pwg-raster", because "application/pdf" is declared earlier in this list.
  public var supportedContentType: [Google_Cloudprint_SupportedContentType] {
    get {return _storage._supportedContentType}
    set {_uniqueStorage()._supportedContentType = newValue}
  }

  /// Printing speeds that the printer can operate at.
  public var printingSpeed: Google_Cloudprint_PrintingSpeed {
    get {return _storage._printingSpeed ?? Google_Cloudprint_PrintingSpeed()}
    set {_uniqueStorage()._printingSpeed = newValue}
  }
  /// Returns true if `printingSpeed` has been explicitly set.
  public var hasPrintingSpeed: Bool {return _storage._printingSpeed != nil}
  /// Clears the value of `printingSpeed`. Subsequent reads from it will return its default value.
  public mutating func clearPrintingSpeed() {_uniqueStorage()._printingSpeed = nil}

  /// PWG raster configuration of the printer. Required if the printer supports image/pwg-raster content type, and it
  /// should be omitted otherwise. This allows a cloud service to understand how to rasterize a document in PWG-raster
  /// for the printer.
  public var pwgRasterConfig: Google_Cloudprint_PwgRasterConfig {
    get {return _storage._pwgRasterConfig ?? Google_Cloudprint_PwgRasterConfig()}
    set {_uniqueStorage()._pwgRasterConfig = newValue}
  }
  /// Returns true if `pwgRasterConfig` has been explicitly set.
  public var hasPwgRasterConfig: Bool {return _storage._pwgRasterConfig != nil}
  /// Clears the value of `pwgRasterConfig`. Subsequent reads from it will return its default value.
  public mutating func clearPwgRasterConfig() {_uniqueStorage()._pwgRasterConfig = nil}

  /// Physical model of the printer's input trays.
  public var inputTrayUnit: [Google_Cloudprint_InputTrayUnit] {
    get {return _storage._inputTrayUnit}
    set {_uniqueStorage()._inputTrayUnit = newValue}
  }

  /// Physical model of the printer's output bins.
  public var outputBinUnit: [Google_Cloudprint_OutputBinUnit] {
    get {return _storage._outputBinUnit}
    set {_uniqueStorage()._outputBinUnit = newValue}
  }

  /// Physical model of the printer's markers.
  public var marker: [Google_Cloudprint_Marker] {
    get {return _storage._marker}
    set {_uniqueStorage()._marker = newValue}
  }

  /// Physical model of the printer's covers.
  public var cover: [Google_Cloudprint_Cover] {
    get {return _storage._cover}
    set {_uniqueStorage()._cover = newValue}
  }

  /// Physical model of the printer's media paths.
  public var mediaPath: [Google_Cloudprint_MediaPath] {
    get {return _storage._mediaPath}
    set {_uniqueStorage()._mediaPath = newValue}
  }

  /// Vendor-provided printer capabilities.
  public var vendorCapability: [Google_Cloudprint_VendorCapability] {
    get {return _storage._vendorCapability}
    set {_uniqueStorage()._vendorCapability = newValue}
  }

  /// Color printing capabilities of the printer.
  public var color: Google_Cloudprint_Color {
    get {return _storage._color ?? Google_Cloudprint_Color()}
    set {_uniqueStorage()._color = newValue}
  }
  /// Returns true if `color` has been explicitly set.
  public var hasColor: Bool {return _storage._color != nil}
  /// Clears the value of `color`. Subsequent reads from it will return its default value.
  public mutating func clearColor() {_uniqueStorage()._color = nil}

  /// Duplexing capabilities of the printer.
  public var duplex: Google_Cloudprint_Duplex {
    get {return _storage._duplex ?? Google_Cloudprint_Duplex()}
    set {_uniqueStorage()._duplex = newValue}
  }
  /// Returns true if `duplex` has been explicitly set.
  public var hasDuplex: Bool {return _storage._duplex != nil}
  /// Clears the value of `duplex`. Subsequent reads from it will return its default value.
  public mutating func clearDuplex() {_uniqueStorage()._duplex = nil}

  /// Page/paper orientation capabilities of the printer.
  public var pageOrientation: Google_Cloudprint_PageOrientation {
    get {return _storage._pageOrientation ?? Google_Cloudprint_PageOrientation()}
    set {_uniqueStorage()._pageOrientation = newValue}
  }
  /// Returns true if `pageOrientation` has been explicitly set.
  public var hasPageOrientation: Bool {return _storage._pageOrientation != nil}
  /// Clears the value of `pageOrientation`. Subsequent reads from it will return its default value.
  public mutating func clearPageOrientation() {_uniqueStorage()._pageOrientation = nil}

  /// Multiple copy capability of the printer.
  public var copies: Google_Cloudprint_Copies {
    get {return _storage._copies ?? Google_Cloudprint_Copies()}
    set {_uniqueStorage()._copies = newValue}
  }
  /// Returns true if `copies` has been explicitly set.
  public var hasCopies: Bool {return _storage._copies != nil}
  /// Clears the value of `copies`. Subsequent reads from it will return its default value.
  public mutating func clearCopies() {_uniqueStorage()._copies = nil}

  /// Page margins capability of the printer.
  public var margins: Google_Cloudprint_Margins {
    get {return _storage._margins ?? Google_Cloudprint_Margins()}
    set {_uniqueStorage()._margins = newValue}
  }
  /// Returns true if `margins` has been explicitly set.
  public var hasMargins: Bool {return _storage._margins != nil}
  /// Clears the value of `margins`. Subsequent reads from it will return its default value.
  public mutating func clearMargins() {_uniqueStorage()._margins = nil}

  /// Printing quality or dots-per-inch (DPI) capabilities of the printer.
  public var dpi: Google_Cloudprint_Dpi {
    get {return _storage._dpi ?? Google_Cloudprint_Dpi()}
    set {_uniqueStorage()._dpi = newValue}
  }
  /// Returns true if `dpi` has been explicitly set.
  public var hasDpi: Bool {return _storage._dpi != nil}
  /// Clears the value of `dpi`. Subsequent reads from it will return its default value.
  public mutating func clearDpi() {_uniqueStorage()._dpi = nil}

  /// Page fitting capabilities of the printer.
  public var fitToPage: Google_Cloudprint_FitToPage {
    get {return _storage._fitToPage ?? Google_Cloudprint_FitToPage()}
    set {_uniqueStorage()._fitToPage = newValue}
  }
  /// Returns true if `fitToPage` has been explicitly set.
  public var hasFitToPage: Bool {return _storage._fitToPage != nil}
  /// Clears the value of `fitToPage`. Subsequent reads from it will return its default value.
  public mutating func clearFitToPage() {_uniqueStorage()._fitToPage = nil}

  /// Page range selection capability of the printer.
  public var pageRange: Google_Cloudprint_PageRange {
    get {return _storage._pageRange ?? Google_Cloudprint_PageRange()}
    set {_uniqueStorage()._pageRange = newValue}
  }
  /// Returns true if `pageRange` has been explicitly set.
  public var hasPageRange: Bool {return _storage._pageRange != nil}
  /// Clears the value of `pageRange`. Subsequent reads from it will return its default value.
  public mutating func clearPageRange() {_uniqueStorage()._pageRange = nil}

  /// Page or media size capabilities of the printer.
  public var mediaSize: Google_Cloudprint_MediaSize {
    get {return _storage._mediaSize ?? Google_Cloudprint_MediaSize()}
    set {_uniqueStorage()._mediaSize = newValue}
  }
  /// Returns true if `mediaSize` has been explicitly set.
  public var hasMediaSize: Bool {return _storage._mediaSize != nil}
  /// Clears the value of `mediaSize`. Subsequent reads from it will return its default value.
  public mutating func clearMediaSize() {_uniqueStorage()._mediaSize = nil}

  /// Paper collation capability of the printer.
  public var collate: Google_Cloudprint_Collate {
    get {return _storage._collate ?? Google_Cloudprint_Collate()}
    set {_uniqueStorage()._collate = newValue}
  }
  /// Returns true if `collate` has been explicitly set.
  public var hasCollate: Bool {return _storage._collate != nil}
  /// Clears the value of `collate`. Subsequent reads from it will return its default value.
  public mutating func clearCollate() {_uniqueStorage()._collate = nil}

  /// Reverse order printing capability of the printer.
  public var reverseOrder: Google_Cloudprint_ReverseOrder {
    get {return _storage._reverseOrder ?? Google_Cloudprint_ReverseOrder()}
    set {_uniqueStorage()._reverseOrder = newValue}
  }
  /// Returns true if `reverseOrder` has been explicitly set.
  public var hasReverseOrder: Bool {return _storage._reverseOrder != nil}
  /// Clears the value of `reverseOrder`. Subsequent reads from it will return its default value.
  public mutating func clearReverseOrder() {_uniqueStorage()._reverseOrder = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloudprint"

extension Google_Cloudprint_PrinterDescriptionSection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrinterDescriptionSection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "supported_content_type"),
    2: .standard(proto: "printing_speed"),
    3: .standard(proto: "pwg_raster_config"),
    4: .standard(proto: "input_tray_unit"),
    5: .standard(proto: "output_bin_unit"),
    6: .same(proto: "marker"),
    7: .same(proto: "cover"),
    8: .standard(proto: "media_path"),
    101: .standard(proto: "vendor_capability"),
    102: .same(proto: "color"),
    103: .same(proto: "duplex"),
    104: .standard(proto: "page_orientation"),
    105: .same(proto: "copies"),
    106: .same(proto: "margins"),
    107: .same(proto: "dpi"),
    108: .standard(proto: "fit_to_page"),
    109: .standard(proto: "page_range"),
    110: .standard(proto: "media_size"),
    111: .same(proto: "collate"),
    112: .standard(proto: "reverse_order"),
  ]

  fileprivate class _StorageClass {
    var _supportedContentType: [Google_Cloudprint_SupportedContentType] = []
    var _printingSpeed: Google_Cloudprint_PrintingSpeed? = nil
    var _pwgRasterConfig: Google_Cloudprint_PwgRasterConfig? = nil
    var _inputTrayUnit: [Google_Cloudprint_InputTrayUnit] = []
    var _outputBinUnit: [Google_Cloudprint_OutputBinUnit] = []
    var _marker: [Google_Cloudprint_Marker] = []
    var _cover: [Google_Cloudprint_Cover] = []
    var _mediaPath: [Google_Cloudprint_MediaPath] = []
    var _vendorCapability: [Google_Cloudprint_VendorCapability] = []
    var _color: Google_Cloudprint_Color? = nil
    var _duplex: Google_Cloudprint_Duplex? = nil
    var _pageOrientation: Google_Cloudprint_PageOrientation? = nil
    var _copies: Google_Cloudprint_Copies? = nil
    var _margins: Google_Cloudprint_Margins? = nil
    var _dpi: Google_Cloudprint_Dpi? = nil
    var _fitToPage: Google_Cloudprint_FitToPage? = nil
    var _pageRange: Google_Cloudprint_PageRange? = nil
    var _mediaSize: Google_Cloudprint_MediaSize? = nil
    var _collate: Google_Cloudprint_Collate? = nil
    var _reverseOrder: Google_Cloudprint_ReverseOrder? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _supportedContentType = source._supportedContentType
      _printingSpeed = source._printingSpeed
      _pwgRasterConfig = source._pwgRasterConfig
      _inputTrayUnit = source._inputTrayUnit
      _outputBinUnit = source._outputBinUnit
      _marker = source._marker
      _cover = source._cover
      _mediaPath = source._mediaPath
      _vendorCapability = source._vendorCapability
      _color = source._color
      _duplex = source._duplex
      _pageOrientation = source._pageOrientation
      _copies = source._copies
      _margins = source._margins
      _dpi = source._dpi
      _fitToPage = source._fitToPage
      _pageRange = source._pageRange
      _mediaSize = source._mediaSize
      _collate = source._collate
      _reverseOrder = source._reverseOrder
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._supportedContentType)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._printingSpeed)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._pwgRasterConfig)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._inputTrayUnit)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._outputBinUnit)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._marker)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._cover)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._mediaPath)
        case 101: try decoder.decodeRepeatedMessageField(value: &_storage._vendorCapability)
        case 102: try decoder.decodeSingularMessageField(value: &_storage._color)
        case 103: try decoder.decodeSingularMessageField(value: &_storage._duplex)
        case 104: try decoder.decodeSingularMessageField(value: &_storage._pageOrientation)
        case 105: try decoder.decodeSingularMessageField(value: &_storage._copies)
        case 106: try decoder.decodeSingularMessageField(value: &_storage._margins)
        case 107: try decoder.decodeSingularMessageField(value: &_storage._dpi)
        case 108: try decoder.decodeSingularMessageField(value: &_storage._fitToPage)
        case 109: try decoder.decodeSingularMessageField(value: &_storage._pageRange)
        case 110: try decoder.decodeSingularMessageField(value: &_storage._mediaSize)
        case 111: try decoder.decodeSingularMessageField(value: &_storage._collate)
        case 112: try decoder.decodeSingularMessageField(value: &_storage._reverseOrder)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._supportedContentType.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._supportedContentType, fieldNumber: 1)
      }
      if let v = _storage._printingSpeed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._pwgRasterConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._inputTrayUnit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inputTrayUnit, fieldNumber: 4)
      }
      if !_storage._outputBinUnit.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._outputBinUnit, fieldNumber: 5)
      }
      if !_storage._marker.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._marker, fieldNumber: 6)
      }
      if !_storage._cover.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._cover, fieldNumber: 7)
      }
      if !_storage._mediaPath.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._mediaPath, fieldNumber: 8)
      }
      if !_storage._vendorCapability.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vendorCapability, fieldNumber: 101)
      }
      if let v = _storage._color {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 102)
      }
      if let v = _storage._duplex {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 103)
      }
      if let v = _storage._pageOrientation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 104)
      }
      if let v = _storage._copies {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 105)
      }
      if let v = _storage._margins {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 106)
      }
      if let v = _storage._dpi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 107)
      }
      if let v = _storage._fitToPage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 108)
      }
      if let v = _storage._pageRange {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 109)
      }
      if let v = _storage._mediaSize {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 110)
      }
      if let v = _storage._collate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 111)
      }
      if let v = _storage._reverseOrder {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 112)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrinterDescriptionSection, rhs: Google_Cloudprint_PrinterDescriptionSection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._supportedContentType != rhs_storage._supportedContentType {return false}
        if _storage._printingSpeed != rhs_storage._printingSpeed {return false}
        if _storage._pwgRasterConfig != rhs_storage._pwgRasterConfig {return false}
        if _storage._inputTrayUnit != rhs_storage._inputTrayUnit {return false}
        if _storage._outputBinUnit != rhs_storage._outputBinUnit {return false}
        if _storage._marker != rhs_storage._marker {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._mediaPath != rhs_storage._mediaPath {return false}
        if _storage._vendorCapability != rhs_storage._vendorCapability {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._duplex != rhs_storage._duplex {return false}
        if _storage._pageOrientation != rhs_storage._pageOrientation {return false}
        if _storage._copies != rhs_storage._copies {return false}
        if _storage._margins != rhs_storage._margins {return false}
        if _storage._dpi != rhs_storage._dpi {return false}
        if _storage._fitToPage != rhs_storage._fitToPage {return false}
        if _storage._pageRange != rhs_storage._pageRange {return false}
        if _storage._mediaSize != rhs_storage._mediaSize {return false}
        if _storage._collate != rhs_storage._collate {return false}
        if _storage._reverseOrder != rhs_storage._reverseOrder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
