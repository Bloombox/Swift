// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/Flower.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides structures relating to flowers and enumerates various flower flags, and types.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies the model for a traditional 'flower'-style product, which involves the sale or consumption of the flower
/// or 'bud,' of a cannabis plant.
public struct Opencannabis_Products_Flower {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Key that uniquely identifies this flower product.
  public var key: Opencannabis_Base_ProductKey {
    get {return _storage._key ?? Opencannabis_Base_ProductKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Content about this product.
  public var product: Opencannabis_Content_ProductContent {
    get {return _storage._product ?? Opencannabis_Content_ProductContent()}
    set {_uniqueStorage()._product = newValue}
  }
  /// Returns true if `product` has been explicitly set.
  public var hasProduct: Bool {return _storage._product != nil}
  /// Clears the value of `product`. Subsequent reads from it will return its default value.
  public mutating func clearProduct() {_uniqueStorage()._product = nil}

  /// Materials and handling information about this product.
  public var material: Opencannabis_Content_MaterialsData {
    get {return _storage._material ?? Opencannabis_Content_MaterialsData()}
    set {_uniqueStorage()._material = newValue}
  }
  /// Returns true if `material` has been explicitly set.
  public var hasMaterial: Bool {return _storage._material != nil}
  /// Clears the value of `material`. Subsequent reads from it will return its default value.
  public mutating func clearMaterial() {_uniqueStorage()._material = nil}

  /// Specifies the specialized type of flower.
  public var type: Opencannabis_Products_Flower.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a main "flower type," which acts as a specialized sub-type to a flower record. Flower types roughly
  /// denote different major categories of flower.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// The flower is trimmed bud, or standard cannabis flower.
    case trimmed // = 0

    /// The flower is "shake," or, by-product from trim processing.
    case shake // = 1

    /// The flower from this entry is composed of small nugs.
    case smallNugs // = 2

    /// The flower from this entry is composed only of premium nugs.
    case premiumNugs // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .trimmed
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .trimmed
      case 1: self = .shake
      case 2: self = .smallNugs
      case 3: self = .premiumNugs
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .trimmed: return 0
      case .shake: return 1
      case .smallNugs: return 2
      case .premiumNugs: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Opencannabis_Products_Flower.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Products_Flower.TypeEnum] = [
    .trimmed,
    .shake,
    .smallNugs,
    .premiumNugs,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.products"

extension Opencannabis_Products_Flower: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Flower"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "product"),
    3: .same(proto: "material"),
    4: .same(proto: "type"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Base_ProductKey? = nil
    var _product: Opencannabis_Content_ProductContent? = nil
    var _material: Opencannabis_Content_MaterialsData? = nil
    var _type: Opencannabis_Products_Flower.TypeEnum = .trimmed

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _product = source._product
      _material = source._material
      _type = source._type
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._product)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._material)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._type)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._material {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._type != .trimmed {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Products_Flower, rhs: Opencannabis_Products_Flower) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._product != rhs_storage._product {return false}
        if _storage._material != rhs_storage._material {return false}
        if _storage._type != rhs_storage._type {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Products_Flower.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TRIMMED"),
    1: .same(proto: "SHAKE"),
    2: .same(proto: "SMALL_NUGS"),
    3: .same(proto: "PREMIUM_NUGS"),
  ]
}
