// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: commerce/payments/Payment.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies structures and enumerates related to payments, payment information, and so on.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates recognized payment methods.
public enum Opencannabis_Commerce_PaymentMethod: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Fiat or real-value cash currency.
  case cash // = 0

  /// Payment by check.
  case check // = 1

  /// Debit card payment.
  case debit // = 2

  /// Credit card payment.
  case credit // = 3

  /// Digital payment via something like Paypal or Venmo.
  case digital // = 4

  /// Bank account-based payment.
  case ach // = 5

  /// Payment by wire transfer.
  case wire // = 6

  /// Payment via Bitcoin or some other blockchain.
  case blockchain // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .cash
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cash
    case 1: self = .check
    case 2: self = .debit
    case 3: self = .credit
    case 4: self = .digital
    case 5: self = .ach
    case 6: self = .wire
    case 7: self = .blockchain
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .cash: return 0
    case .check: return 1
    case .debit: return 2
    case .credit: return 3
    case .digital: return 4
    case .ach: return 5
    case .wire: return 6
    case .blockchain: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Commerce_PaymentMethod: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Commerce_PaymentMethod] = [
    .cash,
    .check,
    .debit,
    .credit,
    .digital,
    .ach,
    .wire,
    .blockchain,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates recognized payment methods.
public enum Opencannabis_Commerce_PaymentCardType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Payment card type is not applicable.
  case noCardType // = 0

  /// Visa.
  case visa // = 1

  /// Mastercard.
  case mastercard // = 2

  /// Discover.
  case discover // = 3

  /// American Express.
  case amex // = 4

  /// Diners' Club.
  case dinersClub // = 5

  /// Maestro.
  case maestro // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .noCardType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noCardType
    case 1: self = .visa
    case 2: self = .mastercard
    case 3: self = .discover
    case 4: self = .amex
    case 5: self = .dinersClub
    case 6: self = .maestro
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noCardType: return 0
    case .visa: return 1
    case .mastercard: return 2
    case .discover: return 3
    case .amex: return 4
    case .dinersClub: return 5
    case .maestro: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Commerce_PaymentCardType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Commerce_PaymentCardType] = [
    .noCardType,
    .visa,
    .mastercard,
    .discover,
    .amex,
    .dinersClub,
    .maestro,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates types of digital payment networks.
public enum Opencannabis_Commerce_DigitalPaymentNetwork: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unspecified or unrecognized digital payment network.
  case unspecifiedNetwork // = 0

  /// Paypal.
  case paypal // = 1

  /// Venmo.
  case venmo // = 2

  /// Square or Square Cash.
  case square // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedNetwork
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedNetwork
    case 1: self = .paypal
    case 2: self = .venmo
    case 3: self = .square
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedNetwork: return 0
    case .paypal: return 1
    case .venmo: return 2
    case .square: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Commerce_DigitalPaymentNetwork: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Commerce_DigitalPaymentNetwork] = [
    .unspecifiedNetwork,
    .paypal,
    .venmo,
    .square,
  ]
}

#endif  // swift(>=4.2)

/// Enumeration for status of an individual payment portion.
public enum Opencannabis_Commerce_PaymentStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Payment information is not applicable to this order.
  case notApplicable // = 0

  /// Charge is pending fulfillment.
  case waiting // = 1

  /// The user's card has been pre-authorized, pending fulfillment.
  case preauthorized // = 2

  /// Payment for this order did not go through.
  case bounced // = 3

  /// Payment for this order did not go through, and was retried.
  case retried // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .notApplicable
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notApplicable
    case 1: self = .waiting
    case 2: self = .preauthorized
    case 3: self = .bounced
    case 4: self = .retried
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notApplicable: return 0
    case .waiting: return 1
    case .preauthorized: return 2
    case .bounced: return 3
    case .retried: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Commerce_PaymentStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Commerce_PaymentStatus] = [
    .notApplicable,
    .waiting,
    .preauthorized,
    .bounced,
    .retried,
  ]
}

#endif  // swift(>=4.2)

/// Enumeration for payment status of an order.
public enum Opencannabis_Commerce_BillStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The bill has not been paid, partially or in full.
  case suspense // = 0

  /// The user has paid partially for this order.
  case partial // = 3

  /// The user has settled payment for this order in full.
  case settled // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .suspense
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .suspense
    case 3: self = .partial
    case 4: self = .settled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .suspense: return 0
    case .partial: return 3
    case .settled: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Commerce_BillStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Commerce_BillStatus] = [
    .suspense,
    .partial,
    .settled,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Opencannabis_Commerce_PaymentMethod: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CASH"),
    1: .same(proto: "CHECK"),
    2: .same(proto: "DEBIT"),
    3: .same(proto: "CREDIT"),
    4: .same(proto: "DIGITAL"),
    5: .same(proto: "ACH"),
    6: .same(proto: "WIRE"),
    7: .same(proto: "BLOCKCHAIN"),
  ]
}

extension Opencannabis_Commerce_PaymentCardType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_CARD_TYPE"),
    1: .same(proto: "VISA"),
    2: .same(proto: "MASTERCARD"),
    3: .same(proto: "DISCOVER"),
    4: .same(proto: "AMEX"),
    5: .same(proto: "DINERS_CLUB"),
    6: .same(proto: "MAESTRO"),
  ]
}

extension Opencannabis_Commerce_DigitalPaymentNetwork: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_NETWORK"),
    1: .same(proto: "PAYPAL"),
    2: .same(proto: "VENMO"),
    3: .same(proto: "SQUARE"),
  ]
}

extension Opencannabis_Commerce_PaymentStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_APPLICABLE"),
    1: .same(proto: "WAITING"),
    2: .same(proto: "PREAUTHORIZED"),
    3: .same(proto: "BOUNCED"),
    4: .same(proto: "RETRIED"),
  ]
}

extension Opencannabis_Commerce_BillStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SUSPENSE"),
    3: .same(proto: "PARTIAL"),
    4: .same(proto: "SETTLED"),
  ]
}
