// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: partner/integrations/MailchimpSettings.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies a partner or partner location's settings for integrating with MailChimp.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies MailChimp integration features to enable or disable.
public struct Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpIntegrationFeatures {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Route user signups to MailChimp.
  public var signups: Bool = false

  /// Apply segments in MailChimp according to user preferences.
  public var segments: Bool = false

  /// Use MailChimp for ordering comms.
  public var ordering: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// MailChimp list mappings to use for signup integration.
public struct Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpLists {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Main comms list to use for user notifications.
  public var comms: String = String()

  /// List to use for opt-in, marketing-related comms.
  public var marketing: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies MailChimp integration settings.
public struct Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// API key for use with MailChimp.
  public var apiKey: String {
    get {return _storage._apiKey}
    set {_uniqueStorage()._apiKey = newValue}
  }

  /// Flags indicating features that should be enabled or disabled.
  public var features: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpIntegrationFeatures {
    get {return _storage._features ?? Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpIntegrationFeatures()}
    set {_uniqueStorage()._features = newValue}
  }
  /// Returns true if `features` has been explicitly set.
  public var hasFeatures: Bool {return _storage._features != nil}
  /// Clears the value of `features`. Subsequent reads from it will return its default value.
  public mutating func clearFeatures() {_storage._features = nil}

  /// Lists to use for various bindings in MailChimp.
  public var lists: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpLists {
    get {return _storage._lists ?? Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpLists()}
    set {_uniqueStorage()._lists = newValue}
  }
  /// Returns true if `lists` has been explicitly set.
  public var hasLists: Bool {return _storage._lists != nil}
  /// Clears the value of `lists`. Subsequent reads from it will return its default value.
  public mutating func clearLists() {_storage._lists = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.partner.integrations.mailchimp"

extension Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpIntegrationFeatures: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MailchimpIntegrationFeatures"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signups"),
    2: .same(proto: "segments"),
    3: .same(proto: "ordering"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.signups)
      case 2: try decoder.decodeSingularBoolField(value: &self.segments)
      case 3: try decoder.decodeSingularBoolField(value: &self.ordering)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.signups != false {
      try visitor.visitSingularBoolField(value: self.signups, fieldNumber: 1)
    }
    if self.segments != false {
      try visitor.visitSingularBoolField(value: self.segments, fieldNumber: 2)
    }
    if self.ordering != false {
      try visitor.visitSingularBoolField(value: self.ordering, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpIntegrationFeatures) -> Bool {
    if self.signups != other.signups {return false}
    if self.segments != other.segments {return false}
    if self.ordering != other.ordering {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpLists: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MailchimpLists"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "comms"),
    2: .same(proto: "marketing"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.comms)
      case 2: try decoder.decodeSingularStringField(value: &self.marketing)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.comms.isEmpty {
      try visitor.visitSingularStringField(value: self.comms, fieldNumber: 1)
    }
    if !self.marketing.isEmpty {
      try visitor.visitSingularStringField(value: self.marketing, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpLists) -> Bool {
    if self.comms != other.comms {return false}
    if self.marketing != other.marketing {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MailchimpSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "api_key"),
    10: .same(proto: "features"),
    11: .same(proto: "lists"),
  ]

  fileprivate class _StorageClass {
    var _apiKey: String = String()
    var _features: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpIntegrationFeatures? = nil
    var _lists: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpLists? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _apiKey = source._apiKey
      _features = source._features
      _lists = source._lists
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._apiKey)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._features)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._lists)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._apiKey.isEmpty {
        try visitor.visitSingularStringField(value: _storage._apiKey, fieldNumber: 1)
      }
      if let v = _storage._features {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._lists {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Bloombox_Schema_Partner_Integrations_Mailchimp_MailchimpSettings) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._apiKey != other_storage._apiKey {return false}
        if _storage._features != other_storage._features {return false}
        if _storage._lists != other_storage._lists {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
