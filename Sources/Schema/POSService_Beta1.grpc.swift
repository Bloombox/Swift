/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: pos/v1beta1/POSService_Beta1.proto
 *
 */

/*
 * Copyright 2018, gRPC Authors All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import Foundation
import Dispatch
import gRPC
import SwiftProtobuf

/// Type for errors thrown from generated client code.
public enum Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError : Error {
  case endOfStream
  case invalidMessageReceived
  case error(c: CallResult)
}

/// Authorize (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/Authorize")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// SessionOpen (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/SessionOpen")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// SessionClose (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/SessionClose")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// TicketOpen (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketOpen")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// TicketSave (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketSave")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// TicketLoad (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketLoad")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// TicketVoid (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketVoid")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// TicketFinalize (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketFinalize")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// SearchMembers (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/SearchMembers")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// InventoryRetrieve (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/InventoryRetrieve")
  }

  /// Run the call. Blocks until the reply is received.
  fileprivate func run(request: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request,
                       metadata: Metadata) throws -> Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response {
    let sem = DispatchSemaphore(value: 0)
    var returnCallResult : CallResult!
    var returnResponse : Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response?
    _ = try start(request:request, metadata:metadata) {response, callResult in
      returnResponse = response
      returnCallResult = callResult
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let returnResponse = returnResponse {
      return returnResponse
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.error(c: returnCallResult)
    }
  }

  /// Start the call. Nonblocking.
  fileprivate func start(request: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request,
                         metadata: Metadata,
                         completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response?, CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveCall {

      let requestData = try request.serializedData()
      try call.start(.unary,
                     metadata:metadata,
                     message:requestData)
      {(callResult) in
        if let responseData = callResult.resultData,
          let response = try? Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response(serializedData:responseData) {
          completion(response, callResult)
        } else {
          completion(nil, callResult)
        }
      }
      return self
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// InventoryStream (Bidirectional Streaming)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamCall {
  private var call : Call

  /// Create a call.
  fileprivate init(_ channel: Channel) {
    self.call = channel.makeCall("/bloombox.schema.services.pos.v1beta1.PointOfSale/InventoryStream")
  }

  /// Call this to start a call. Nonblocking.
  fileprivate func start(metadata:Metadata, completion:@escaping (CallResult)->())
    throws -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamCall {
      try self.call.start(.bidiStreaming, metadata:metadata, completion:completion)
      return self
  }

  /// Call this to wait for a result. Blocking.
  public func receive() throws -> Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload {
    var returnError : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError?
    var returnMessage : Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload!
    let sem = DispatchSemaphore(value: 0)
    do {
      try receive() {response, error in
        returnMessage = response
        returnError = error
        sem.signal()
      }
      _ = sem.wait(timeout: DispatchTime.distantFuture)
    }
    if let returnError = returnError {
      throw returnError
    }
    return returnMessage
  }

  /// Call this to wait for a result. Nonblocking.
  public func receive(completion:@escaping (Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload?, Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError?)->()) throws {
    do {
      try call.receiveMessage() {(data) in
        if let data = data {
          if let returnMessage = try? Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload(serializedData:data) {
            completion(returnMessage, nil)
          } else {
            completion(nil, Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.invalidMessageReceived)
          }
        } else {
          completion(nil, Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleClientError.endOfStream)
        }
      }
    }
  }

  /// Call this to send each message in the request stream.
  public func send(_ message:Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request, errorHandler:@escaping (Error)->()) throws {
    let messageData = try message.serializedData()
    try call.sendMessage(data:messageData, errorHandler:errorHandler)
  }

  /// Call this to close the sending connection. Blocking.
  public func closeSend() throws {
    let sem = DispatchSemaphore(value: 0)
    try closeSend() {
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
  }

  /// Call this to close the sending connection. Nonblocking.
  public func closeSend(completion:@escaping ()->()) throws {
    try call.close() {
      completion()
    }
  }

  /// Cancel the call.
  public func cancel() {
    call.cancel()
  }
}

/// Call methods of this class to make API calls.
public final class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleService {
  public var channel: Channel

  /// This metadata will be sent with all requests.
  public var metadata : Metadata

  /// This property allows the service host name to be overridden.
  /// For example, it can be used to make calls to "localhost:8080"
  /// appear to be to "example.com".
  public var host : String {
    get {
      return self.channel.host
    }
    set {
      self.channel.host = newValue
    }
  }

  /// Create a client.
  public init(address: String, secure: Bool = true) {
    gRPC.initialize()
    channel = Channel(address:address, secure:secure)
    metadata = Metadata()
  }

  /// Create a client that makes secure connections with a custom certificate and (optional) hostname.
  public init(address: String, certificates: String, host: String?) {
    gRPC.initialize()
    channel = Channel(address:address, certificates:certificates, host:host)
    metadata = Metadata()
  }

  /// Synchronous. Unary.
  public func authorize(_ request: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func authorize(_ request: Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func sessionopen(_ request: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func sessionopen(_ request: Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func sessionclose(_ request: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func sessionclose(_ request: Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func ticketopen(_ request: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func ticketopen(_ request: Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func ticketsave(_ request: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func ticketsave(_ request: Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func ticketload(_ request: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func ticketload(_ request: Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func ticketvoid(_ request: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func ticketvoid(_ request: Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func ticketfinalize(_ request: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func ticketfinalize(_ request: Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func searchmembers(_ request: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func searchmembers(_ request: Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Synchronous. Unary.
  public func inventoryretrieve(_ request: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request)
    throws
    -> Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveCall(channel).run(request:request, metadata:metadata)
  }
  /// Asynchronous. Unary.
  public func inventoryretrieve(_ request: Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request,
                  completion: @escaping (Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response?, CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveCall(channel).start(request:request,
                                                 metadata:metadata,
                                                 completion:completion)
  }
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  public func inventorystream(completion: @escaping (CallResult)->())
    throws
    -> Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamCall {
      return try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamCall(channel).start(metadata:metadata, completion:completion)
  }
}


/// Type for errors thrown from generated server code.
public enum Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleServerError : Error {
  case endOfStream
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider {
  func authorize(request : Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Response
  func sessionopen(request : Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Response
  func sessionclose(request : Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Response
  func ticketopen(request : Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Response
  func ticketsave(request : Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Response
  func ticketload(request : Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Response
  func ticketvoid(request : Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Response
  func ticketfinalize(request : Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Response
  func searchmembers(request : Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Response
  func inventoryretrieve(request : Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request, session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveSession) throws -> Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Response
  func inventorystream(session : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamSession) throws
}

/// Common properties available in each service session.
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  fileprivate var handler : gRPC.Handler
  public var requestMetadata : Metadata { return handler.requestMetadata }

  public var statusCode : Int = 0
  public var statusMessage : String = "OK"
  public var initialMetadata : Metadata = Metadata()
  public var trailingMetadata : Metadata = Metadata()

  fileprivate init(handler:gRPC.Handler) {
    self.handler = handler
  }
}

// Authorize (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_AuthorizeUser.Request(serializedData:requestData)
        let replyMessage = try self.provider.authorize(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SessionOpen (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_OpenSession.Request(serializedData:requestData)
        let replyMessage = try self.provider.sessionopen(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SessionClose (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_CloseSession.Request(serializedData:requestData)
        let replyMessage = try self.provider.sessionclose(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TicketOpen (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_OpenTicket.Request(serializedData:requestData)
        let replyMessage = try self.provider.ticketopen(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TicketSave (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_SaveTicket.Request(serializedData:requestData)
        let replyMessage = try self.provider.ticketsave(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TicketLoad (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_LoadTicket.Request(serializedData:requestData)
        let replyMessage = try self.provider.ticketload(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TicketVoid (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_VoidTicket.Request(serializedData:requestData)
        let replyMessage = try self.provider.ticketvoid(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// TicketFinalize (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_FinalizeTicket.Request(serializedData:requestData)
        let replyMessage = try self.provider.ticketfinalize(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// SearchMembers (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_MemberSearch.Request(serializedData:requestData)
        let replyMessage = try self.provider.searchmembers(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// InventoryRetrieve (Unary)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try handler.receiveMessage(initialMetadata:initialMetadata) {(requestData) in
      if let requestData = requestData {
        let requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_InventoryQuery.Request(serializedData:requestData)
        let replyMessage = try self.provider.inventoryretrieve(request:requestMessage, session: self)
        try self.handler.sendResponse(message:replyMessage.serializedData(),
                                      statusCode:self.statusCode,
                                      statusMessage:self.statusMessage,
                                      trailingMetadata:self.trailingMetadata)
      }
    }
  }
}

// InventoryStream (Bidirectional Streaming)
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamSession : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSession {
  private var provider : Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider

  /// Create a session.
  fileprivate init(handler:gRPC.Handler, provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    self.provider = provider
    super.init(handler:handler)
  }

  /// Receive a message. Blocks until a message is received or the client closes the connection.
  public func receive() throws -> Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request {
    let sem = DispatchSemaphore(value: 0)
    var requestMessage : Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request?
    try self.handler.receiveMessage() {(requestData) in
      if let requestData = requestData {
        do {
          requestMessage = try Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Request(serializedData:requestData)
        } catch (let error) {
          print("error \(error)")
        }
      }
      sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
    if let requestMessage = requestMessage {
      return requestMessage
    } else {
      throw Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleServerError.endOfStream
    }
  }

  /// Send a message. Nonblocking.
  public func send(_ response: Bloombox_Schema_Services_Pos_V1beta1_InventoryStream.Payload, completion: @escaping ()->()) throws {
    try handler.sendResponse(message:response.serializedData()) {completion()}
  }

  /// Close a connection. Blocks until the connection is closed.
  public func close() throws {
    let sem = DispatchSemaphore(value: 0)
    try self.handler.sendStatus(statusCode:self.statusCode,
                                statusMessage:self.statusMessage,
                                trailingMetadata:self.trailingMetadata) {
                                  sem.signal()
    }
    _ = sem.wait(timeout: DispatchTime.distantFuture)
  }

  /// Run the session. Internal.
  fileprivate func run(queue:DispatchQueue) throws {
    try self.handler.sendMetadata(initialMetadata:initialMetadata) {
      queue.async {
        do {
          try self.provider.inventorystream(session:self)
        } catch (let error) {
          print("error \(error)")
        }
      }
    }
  }
}


/// Main server for generated service
public class Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleServer {
  private var address: String
  private var server: gRPC.Server
  private var provider: Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider?

  /// Create a server that accepts insecure connections.
  public init(address:String,
              provider:Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    self.server = gRPC.Server(address:address)
  }

  /// Create a server that accepts secure connections.
  public init?(address:String,
               certificateURL:URL,
               keyURL:URL,
               provider:Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleProvider) {
    gRPC.initialize()
    self.address = address
    self.provider = provider
    guard
      let certificate = try? String(contentsOf: certificateURL, encoding: .utf8),
      let key = try? String(contentsOf: keyURL, encoding: .utf8)
      else {
        return nil
    }
    self.server = gRPC.Server(address:address, key:key, certs:certificate)
  }

  /// Start the server.
  public func start(queue:DispatchQueue = DispatchQueue.global()) {
    guard let provider = self.provider else {
      fatalError() // the server requires a provider
    }
    server.run {(handler) in
      print("Server received request to " + handler.host
        + " calling " + handler.method
        + " from " + handler.caller
        + " with " + String(describing:handler.requestMetadata) )

      do {
        switch handler.method {
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/Authorize":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleAuthorizeSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/SessionOpen":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionOpenSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/SessionClose":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSessionCloseSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketOpen":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketOpenSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketSave":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketSaveSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketLoad":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketLoadSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketVoid":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketVoidSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/TicketFinalize":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleTicketFinalizeSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/SearchMembers":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleSearchMembersSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/InventoryRetrieve":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryRetrieveSession(handler:handler, provider:provider).run(queue:queue)
        case "/bloombox.schema.services.pos.v1beta1.PointOfSale/InventoryStream":
          try Bloombox_Schema_Services_Pos_V1Beta1_PointOfSaleInventoryStreamSession(handler:handler, provider:provider).run(queue:queue)
        default:
          break // handle unknown requests
        }
      } catch (let error) {
        print("Server error: \(error)")
      }
    }
  }
}

