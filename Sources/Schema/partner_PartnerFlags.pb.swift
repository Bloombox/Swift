// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: partner/PartnerFlags.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies flags that may be applied to a partner account or partner location.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies flags that may be set on a partner organization account.
public struct Bloombox_Partner_PartnerFlags {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies that the subject partner organization is currently suspended, organization wide, and has had access
  /// revoked to Bloombox systems.
  public var suspended: Bool = false

  /// Specifies that the subject partner organiztaion is currently in a past-due state, where their organization and
  /// related access has been heavily restricted.
  public var pastdue: Bool = false

  /// Specifies that the subject partner organization has access to beta features, clusters, and systems.
  public var beta: Bool = false

  /// Specifies that the subject partner organization has internal sandbox access.
  public var sandbox: Bool = false

  /// Specifies that the subject partner organization is a testing account held and managed internally by Bloombox, or
  /// by selected partners.
  public var `internal`: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.partner"

extension Bloombox_Partner_PartnerFlags: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PartnerFlags"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "suspended"),
    2: .same(proto: "pastdue"),
    3: .same(proto: "beta"),
    4: .same(proto: "sandbox"),
    5: .same(proto: "internal"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.suspended)
      case 2: try decoder.decodeSingularBoolField(value: &self.pastdue)
      case 3: try decoder.decodeSingularBoolField(value: &self.beta)
      case 4: try decoder.decodeSingularBoolField(value: &self.sandbox)
      case 5: try decoder.decodeSingularBoolField(value: &self.`internal`)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.suspended != false {
      try visitor.visitSingularBoolField(value: self.suspended, fieldNumber: 1)
    }
    if self.pastdue != false {
      try visitor.visitSingularBoolField(value: self.pastdue, fieldNumber: 2)
    }
    if self.beta != false {
      try visitor.visitSingularBoolField(value: self.beta, fieldNumber: 3)
    }
    if self.sandbox != false {
      try visitor.visitSingularBoolField(value: self.sandbox, fieldNumber: 4)
    }
    if self.`internal` != false {
      try visitor.visitSingularBoolField(value: self.`internal`, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_PartnerFlags, rhs: Bloombox_Partner_PartnerFlags) -> Bool {
    if lhs.suspended != rhs.suspended {return false}
    if lhs.pastdue != rhs.pastdue {return false}
    if lhs.beta != rhs.beta {return false}
    if lhs.sandbox != rhs.sandbox {return false}
    if lhs.`internal` != rhs.`internal` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
