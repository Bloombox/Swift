// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/v1beta3/TelemetryEvent_Beta3.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Wrapper object that provides support for transporting telemetry data of any kind.
public struct Services_Telemetry_V1beta3_TelemetryEvent: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TelemetryEvent"

  /// UUID, as assigned by the server upon receiving this event.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Parent event that yielded this event, if applicable.
  public var parent: String {
    get {return _storage._parent}
    set {_uniqueStorage()._parent = newValue}
  }

  /// Flag indicating this event is internal, meaning, it is not to be re-processed or mirrored to internal event
  /// streams, where it could cause an infinite loop.
  public var `internal`: Bool {
    get {return _storage._internal}
    set {_uniqueStorage()._internal = newValue}
  }

  /// 'Position', or timing, of the event, in various circumstances.
  public var timing: Analytics_EventPosition {
    get {return _storage._timing ?? Analytics_EventPosition()}
    set {_uniqueStorage()._timing = newValue}
  }
  /// Returns true if `timing` has been explicitly set.
  public var hasTiming: Bool {return _storage._timing != nil}
  /// Clears the value of `timing`. Subsequent reads from it will return its default value.
  public mutating func clearTiming() {_storage._timing = nil}

  /// Event context.
  public var context: Analytics_Context {
    get {return _storage._context ?? Analytics_Context()}
    set {_uniqueStorage()._context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return _storage._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {_storage._context = nil}

  /// Full event actor records.
  public var actors: Analytics_EventActors {
    get {return _storage._actors ?? Analytics_EventActors()}
    set {_uniqueStorage()._actors = newValue}
  }
  /// Returns true if `actors` has been explicitly set.
  public var hasActors: Bool {return _storage._actors != nil}
  /// Clears the value of `actors`. Subsequent reads from it will return its default value.
  public mutating func clearActors() {_storage._actors = nil}

  /// Event data payload.
  public var event: OneOf_Event? {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  /// Generic: Event.
  public var generic: Analytics_Generic_Event {
    get {
      if case .generic(let v)? = _storage._event {return v}
      return Analytics_Generic_Event()
    }
    set {_uniqueStorage()._event = .generic(newValue)}
  }

  /// Generic: Exception.
  public var error: Analytics_Generic_Exception {
    get {
      if case .error(let v)? = _storage._event {return v}
      return Analytics_Generic_Exception()
    }
    set {_uniqueStorage()._event = .error(newValue)}
  }

  /// Sections: Impression.
  public var impression: Services_Telemetry_V1beta3_CommercialEvent.Impression {
    get {
      if case .impression(let v)? = _storage._event {return v}
      return Services_Telemetry_V1beta3_CommercialEvent.Impression()
    }
    set {_uniqueStorage()._event = .impression(newValue)}
  }

  /// Sections: View.
  public var view: Services_Telemetry_V1beta3_CommercialEvent.View {
    get {
      if case .view(let v)? = _storage._event {return v}
      return Services_Telemetry_V1beta3_CommercialEvent.View()
    }
    set {_uniqueStorage()._event = .view(newValue)}
  }

  /// Sections: Action.
  public var action: Services_Telemetry_V1beta3_CommercialEvent.Action {
    get {
      if case .action(let v)? = _storage._event {return v}
      return Services_Telemetry_V1beta3_CommercialEvent.Action()
    }
    set {_uniqueStorage()._event = .action(newValue)}
  }

  /// Users: Action.
  public var userAction: Services_Telemetry_V1beta3_IdentityEvent.Action {
    get {
      if case .userAction(let v)? = _storage._event {return v}
      return Services_Telemetry_V1beta3_IdentityEvent.Action()
    }
    set {_uniqueStorage()._event = .userAction(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Event data payload.
  public enum OneOf_Event: Equatable {
    /// Generic: Event.
    case generic(Analytics_Generic_Event)
    /// Generic: Exception.
    case error(Analytics_Generic_Exception)
    /// Sections: Impression.
    case impression(Services_Telemetry_V1beta3_CommercialEvent.Impression)
    /// Sections: View.
    case view(Services_Telemetry_V1beta3_CommercialEvent.View)
    /// Sections: Action.
    case action(Services_Telemetry_V1beta3_CommercialEvent.Action)
    /// Users: Action.
    case userAction(Services_Telemetry_V1beta3_IdentityEvent.Action)

    public static func ==(lhs: Services_Telemetry_V1beta3_TelemetryEvent.OneOf_Event, rhs: Services_Telemetry_V1beta3_TelemetryEvent.OneOf_Event) -> Bool {
      switch (lhs, rhs) {
      case (.generic(let l), .generic(let r)): return l == r
      case (.error(let l), .error(let r)): return l == r
      case (.impression(let l), .impression(let r)): return l == r
      case (.view(let l), .view(let r)): return l == r
      case (.action(let l), .action(let r)): return l == r
      case (.userAction(let l), .userAction(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularStringField(value: &_storage._parent)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._internal)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._timing)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._actors)
        case 10:
          var v: Analytics_Generic_Event?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .generic(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .generic(v)}
        case 11:
          var v: Analytics_Generic_Exception?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .error(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .error(v)}
        case 20:
          var v: Services_Telemetry_V1beta3_CommercialEvent.Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .impression(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .impression(v)}
        case 21:
          var v: Services_Telemetry_V1beta3_CommercialEvent.View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .view(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .view(v)}
        case 22:
          var v: Services_Telemetry_V1beta3_CommercialEvent.Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .action(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .action(v)}
        case 30:
          var v: Services_Telemetry_V1beta3_IdentityEvent.Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .userAction(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .userAction(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 2)
      }
      if _storage._internal != false {
        try visitor.visitSingularBoolField(value: _storage._internal, fieldNumber: 3)
      }
      if let v = _storage._timing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._actors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      switch _storage._event {
      case .generic(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .error(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .impression(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      case .view(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      case .action(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      case .userAction(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "services.telemetry.v1beta3"

extension Services_Telemetry_V1beta3_TelemetryEvent: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "parent"),
    3: .same(proto: "internal"),
    4: .same(proto: "timing"),
    5: .same(proto: "context"),
    6: .same(proto: "actors"),
    10: .same(proto: "generic"),
    11: .same(proto: "error"),
    20: .same(proto: "impression"),
    21: .same(proto: "view"),
    22: .same(proto: "action"),
    30: .standard(proto: "user_action"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _parent: String = String()
    var _internal: Bool = false
    var _timing: Analytics_EventPosition? = nil
    var _context: Analytics_Context? = nil
    var _actors: Analytics_EventActors? = nil
    var _event: Services_Telemetry_V1beta3_TelemetryEvent.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _parent = source._parent
      _internal = source._internal
      _timing = source._timing
      _context = source._context
      _actors = source._actors
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Services_Telemetry_V1beta3_TelemetryEvent) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._uuid != other_storage._uuid {return false}
        if _storage._parent != other_storage._parent {return false}
        if _storage._internal != other_storage._internal {return false}
        if _storage._timing != other_storage._timing {return false}
        if _storage._context != other_storage._context {return false}
        if _storage._actors != other_storage._actors {return false}
        if _storage._event != other_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
