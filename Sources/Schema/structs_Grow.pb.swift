// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: structs/Grow.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates common/known types or styles of cultivation that might produce a flower for sale, or resale after
/// manufacture.
public enum Opencannabis_Structs_Grow: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Generic, or unknown, grow circumstances.
  case generic // = 0

  /// Indoor grow circumstances, implying high-precision environment controls (temperature, humidity, light, and so on)
  /// and close monitoring and optimization.
  case indoor // = 1

  /// Greenhouse-based grow circumstances. This includes any indoor grow operation that makes use of natural light in any
  /// manner, augmenting replacing controlled indoor lighting.
  case greenhouse // = 2

  /// Outdoor-based grow circumstances, that use entirely natural light from the sun.
  case outdoor // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .generic
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .generic
    case 1: self = .indoor
    case 2: self = .greenhouse
    case 3: self = .outdoor
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .generic: return 0
    case .indoor: return 1
    case .greenhouse: return 2
    case .outdoor: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Opencannabis_Structs_Grow: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Opencannabis_Structs_Grow] = [
    .generic,
    .indoor,
    .greenhouse,
    .outdoor,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension Opencannabis_Structs_Grow: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC"),
    1: .same(proto: "INDOOR"),
    2: .same(proto: "GREENHOUSE"),
    3: .same(proto: "OUTDOOR"),
  ]
}
