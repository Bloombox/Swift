// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/bioprint/Weights.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines structures that allow a consumer to declare, or for us to infer for them, a proclivity for an arbitrary
/// cannabis use metric over or under others. That is to say, *Weights* allow a consumer to tune the Bioprint product
/// suggestion algorithm based on the metrics that matter most to them.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies signals from which significance may be tracked, or otherwise made addressable, by the user.
public enum Bloombox_Identity_Bioprint_SignificanceSignal: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// User-declared preferences and proclivities.
  case declared // = 0

  /// Machine-inferred, or history-inferred, preferences and proclivities.
  case inferred // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .declared
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .declared
    case 1: self = .inferred
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .declared: return 0
    case .inferred: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Identity_Bioprint_SignificanceSignal: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Identity_Bioprint_SignificanceSignal] = [
    .declared,
    .inferred,
  ]
}

#endif  // swift(>=4.2)

/// Describes the relative significance, to a user, of some cannabis use metric or affinity. Referenced from affinities
/// and affinity groups do apply consideration in a measured way according to the user's profile.
public struct Bloombox_Identity_Bioprint_MetricSignificance {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Signal from which this significance value is derived.
  public var signal: Bloombox_Identity_Bioprint_SignificanceSignal = .declared

  /// Weight value provided for a given metric, to indicate significance.
  public var weight: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.identity.bioprint"

extension Bloombox_Identity_Bioprint_SignificanceSignal: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DECLARED"),
    1: .same(proto: "INFERRED"),
  ]
}

extension Bloombox_Identity_Bioprint_MetricSignificance: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MetricSignificance"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "signal"),
    2: .same(proto: "weight"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.signal)
      case 2: try decoder.decodeSingularSFixed32Field(value: &self.weight)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.signal != .declared {
      try visitor.visitSingularEnumField(value: self.signal, fieldNumber: 1)
    }
    if self.weight != 0 {
      try visitor.visitSingularSFixed32Field(value: self.weight, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Identity_Bioprint_MetricSignificance, rhs: Bloombox_Identity_Bioprint_MetricSignificance) -> Bool {
    if lhs.signal != rhs.signal {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
