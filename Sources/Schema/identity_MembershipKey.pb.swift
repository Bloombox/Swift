// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: identity/MembershipKey.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies a referential key that points to a particular user identity within a given partner or location, i.e., a
/// user's membership within the scope of a given Bloombox partner organization.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a key that refers to a user account identity, as it is connected (if applicable) within a given partner or
/// location scope.
public struct Bloombox_Schema_Identity_MembershipKey {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies a unique ID identifying this user membership.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Key specifying the user for which this membership was established.
  public var user: Bloombox_Schema_Identity_UserKey {
    get {return _storage._user ?? Bloombox_Schema_Identity_UserKey()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var scope: OneOf_Scope? {
    get {return _storage._scope}
    set {_uniqueStorage()._scope = newValue}
  }

  /// Specifies the partner under which this membership applies.
  public var partner: Bloombox_Schema_Partner_PartnerKey {
    get {
      if case .partner(let v)? = _storage._scope {return v}
      return Bloombox_Schema_Partner_PartnerKey()
    }
    set {_uniqueStorage()._scope = .partner(newValue)}
  }

  /// Specifies the location under which this membership applies.
  public var location: Bloombox_Schema_Partner_LocationKey {
    get {
      if case .location(let v)? = _storage._scope {return v}
      return Bloombox_Schema_Partner_LocationKey()
    }
    set {_uniqueStorage()._scope = .location(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Scope: Equatable {
    /// Specifies the partner under which this membership applies.
    case partner(Bloombox_Schema_Partner_PartnerKey)
    /// Specifies the location under which this membership applies.
    case location(Bloombox_Schema_Partner_LocationKey)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Schema_Identity_MembershipKey.OneOf_Scope, rhs: Bloombox_Schema_Identity_MembershipKey.OneOf_Scope) -> Bool {
      switch (lhs, rhs) {
      case (.partner(let l), .partner(let r)): return l == r
      case (.location(let l), .location(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Makes reference to a user in a particular membership context.
public struct Bloombox_Schema_Identity_MembershipReference {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies a unique code identifying this user membership.
  public var key: Bloombox_Schema_Identity_MembershipKey {
    get {return _storage._key ?? Bloombox_Schema_Identity_MembershipKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// Display name for the logged-in user.
  public var name: Opencannabis_Person_Name {
    get {return _storage._name ?? Opencannabis_Person_Name()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  public var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  public mutating func clearName() {_uniqueStorage()._name = nil}

  /// Avatar/portrait for the logged-in user.
  public var portrait: Opencannabis_Media_MediaKey {
    get {return _storage._portrait ?? Opencannabis_Media_MediaKey()}
    set {_uniqueStorage()._portrait = newValue}
  }
  /// Returns true if `portrait` has been explicitly set.
  public var hasPortrait: Bool {return _storage._portrait != nil}
  /// Clears the value of `portrait`. Subsequent reads from it will return its default value.
  public mutating func clearPortrait() {_uniqueStorage()._portrait = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.identity"

extension Bloombox_Schema_Identity_MembershipKey: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MembershipKey"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "user"),
    3: .same(proto: "partner"),
    4: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _user: Bloombox_Schema_Identity_UserKey? = nil
    var _scope: Bloombox_Schema_Identity_MembershipKey.OneOf_Scope?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _user = source._user
      _scope = source._scope
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 3:
          var v: Bloombox_Schema_Partner_PartnerKey?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .partner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .partner(v)}
        case 4:
          var v: Bloombox_Schema_Partner_LocationKey?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .location(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .location(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._scope {
      case .partner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .location(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Identity_MembershipKey, rhs: Bloombox_Schema_Identity_MembershipKey) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._scope != rhs_storage._scope {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Identity_MembershipReference: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MembershipReference"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "name"),
    3: .same(proto: "portrait"),
  ]

  fileprivate class _StorageClass {
    var _key: Bloombox_Schema_Identity_MembershipKey? = nil
    var _name: Opencannabis_Person_Name? = nil
    var _portrait: Opencannabis_Media_MediaKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _name = source._name
      _portrait = source._portrait
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._name)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._portrait)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._name {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._portrait {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Identity_MembershipReference, rhs: Bloombox_Schema_Identity_MembershipReference) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._portrait != rhs_storage._portrait {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
