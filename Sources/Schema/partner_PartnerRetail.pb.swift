// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: partner/PartnerRetail.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Describes physical data and layout of a given partner retail location.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates common ways that cannabis retailers flow consumers into their location.
public enum Bloombox_Partner_RetailCheckinFlowStyle: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The flow style is unknown or unspecified.
  case unspecifiedCheckinFlow // = 0

  /// The flow style includes a vestibule, which lets one person in at a time.
  case vestibuleIndividual // = 1

  /// The flow style includes a vestibule, which, after validating a customer, simply lets them in to a communal space.
  case vestibuleCommunal // = 2

  /// The flow style has no vestibule or enforced check-in process.
  case `open` // = 3

  /// Some other type of flow that is not defined here.
  case otherCheckinFlow // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedCheckinFlow
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedCheckinFlow
    case 1: self = .vestibuleIndividual
    case 2: self = .vestibuleCommunal
    case 3: self = .open
    case 99: self = .otherCheckinFlow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedCheckinFlow: return 0
    case .vestibuleIndividual: return 1
    case .vestibuleCommunal: return 2
    case .open: return 3
    case .otherCheckinFlow: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Partner_RetailCheckinFlowStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_RetailCheckinFlowStyle] = [
    .unspecifiedCheckinFlow,
    .vestibuleIndividual,
    .vestibuleCommunal,
    .open,
    .otherCheckinFlow,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates common ways that cannabis retailers flow consumers out of their location.
public enum Bloombox_Partner_RetailCheckoutFlowStyle: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The flow style is unknown or unspecified.
  case unspecifiedCheckoutFlow // = 0

  /// Caliva-style, with a queue line(s) of customers, and a communal pool of registers.
  case queuedCommunal // = 1

  /// Abatin or 3CN style, with one-on-one budtender interaction.
  case oneOnOne // = 2

  /// Unattended payment or browsing for an order, and then pickup at a window or back area, with a line.
  case unattendedQueued // = 3

  /// Some other type of flow that is not defined here.
  case otherCheckoutFlow // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedCheckoutFlow
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedCheckoutFlow
    case 1: self = .queuedCommunal
    case 2: self = .oneOnOne
    case 3: self = .unattendedQueued
    case 99: self = .otherCheckoutFlow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedCheckoutFlow: return 0
    case .queuedCommunal: return 1
    case .oneOnOne: return 2
    case .unattendedQueued: return 3
    case .otherCheckoutFlow: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Partner_RetailCheckoutFlowStyle: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_RetailCheckoutFlowStyle] = [
    .unspecifiedCheckoutFlow,
    .queuedCommunal,
    .oneOnOne,
    .unattendedQueued,
    .otherCheckoutFlow,
  ]
}

#endif  // swift(>=4.2)

/// Specifies information about a retail location, with regard to its overlaid position on a map. Supports overlaying a
/// geographic box, with a particular rotation and scale, optionally with an indoor map (floor plan), too.
public struct Bloombox_Partner_RetailLocationMapOverlay {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Zoom level to apply when rendering this map overlay.
  public var zoom: UInt32 {
    get {return _storage._zoom}
    set {_uniqueStorage()._zoom = newValue}
  }

  /// Width of the overlay box at default zoom.
  public var width: UInt32 {
    get {return _storage._width}
    set {_uniqueStorage()._width = newValue}
  }

  /// Height of the overlay box at default zoom.
  public var height: UInt32 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  /// Rotation, in degrees clockwise from origin, for the box containing this map overlay.
  public var rotation: Double {
    get {return _storage._rotation}
    set {_uniqueStorage()._rotation = newValue}
  }

  /// Coordinate set for this overlay box.
  public var box: [Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate] {
    get {return _storage._box}
    set {_uniqueStorage()._box = newValue}
  }

  /// Floor plan image to overlay on the map.
  public var floorplan: Opencannabis_Media_MediaReference {
    get {return _storage._floorplan ?? Opencannabis_Media_MediaReference()}
    set {_uniqueStorage()._floorplan = newValue}
  }
  /// Returns true if `floorplan` has been explicitly set.
  public var hasFloorplan: Bool {return _storage._floorplan != nil}
  /// Clears the value of `floorplan`. Subsequent reads from it will return its default value.
  public mutating func clearFloorplan() {_uniqueStorage()._floorplan = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Describes an individual coordinate for use in a boxed map overlay for a retail location.
  public struct BoxCoordinate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// `x` coordinate for this item.
    public var x: UInt32 = 0

    /// `y` coordinate for this item.
    public var y: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Describes a physical point in the retail space, at which a customer can view menu details.
public struct Bloombox_Partner_MenuStation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this menu station is managed by Bloombox or not.
  public var managed: Bool {
    get {return _storage._managed}
    set {_uniqueStorage()._managed = newValue}
  }

  /// UUID for this device, if it is registered with Bloombox.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Type of menu station.
  public var type: Bloombox_Partner_MenuStation.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Attached printer, if applicable.
  public var printer: Bloombox_Devices_CloudPrinter.Key {
    get {return _storage._printer ?? Bloombox_Devices_CloudPrinter.Key()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies types of menu stations.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified type of menu station.
    case unspecifiedMenuStationType // = 0

    /// Tablet menu station.
    case tablet // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedMenuStationType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedMenuStationType
      case 1: self = .tablet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedMenuStationType: return 0
      case .tablet: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Partner_MenuStation.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_MenuStation.TypeEnum] = [
    .unspecifiedMenuStationType,
    .tablet,
  ]
}

#endif  // swift(>=4.2)

/// Describes a physical point in the retail space, at which a customer can view physical products.
public struct Bloombox_Partner_DisplayStation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Type of display station.
  public var type: Bloombox_Partner_DisplayStation.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Specifies the contents of this display, if known.
  public var contents: OneOf_Contents? {
    get {return _storage._contents}
    set {_uniqueStorage()._contents = newValue}
  }

  /// Contents are mixed or unknown.
  public var mixed: Bool {
    get {
      if case .mixed(let v)? = _storage._contents {return v}
      return false
    }
    set {_uniqueStorage()._contents = .mixed(newValue)}
  }

  /// Known, or simple, display station contents.
  public var known: Bloombox_Partner_DisplayStation.KnownContents {
    get {
      if case .known(let v)? = _storage._contents {return v}
      return Bloombox_Partner_DisplayStation.KnownContents()
    }
    set {_uniqueStorage()._contents = .known(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies the contents of this display, if known.
  public enum OneOf_Contents: Equatable {
    /// Contents are mixed or unknown.
    case mixed(Bool)
    /// Known, or simple, display station contents.
    case known(Bloombox_Partner_DisplayStation.KnownContents)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Partner_DisplayStation.OneOf_Contents, rhs: Bloombox_Partner_DisplayStation.OneOf_Contents) -> Bool {
      switch (lhs, rhs) {
      case (.mixed(let l), .mixed(let r)): return l == r
      case (.known(let l), .known(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Specifies types of display stations.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified type of display station.
    case unspecifiedDisplayStationType // = 0

    /// Display case station.
    case `case` // = 1

    /// Display shelf station.
    case shelf // = 2

    /// Display cabinet.
    case cabinet // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedDisplayStationType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedDisplayStationType
      case 1: self = .case
      case 2: self = .shelf
      case 3: self = .cabinet
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedDisplayStationType: return 0
      case .case: return 1
      case .shelf: return 2
      case .cabinet: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  /// Models the contents of this display station.
  public struct KnownContents {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies kinds of items assigned to this display.
    public var kind: [Opencannabis_Base_ProductKind] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Partner_DisplayStation.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_DisplayStation.TypeEnum] = [
    .unspecifiedDisplayStationType,
    .case,
    .shelf,
    .cabinet,
  ]
}

#endif  // swift(>=4.2)

/// Describes a physical point in the retail space, where a television is mounted for communal viewing of menu products
/// or featured content.
public struct Bloombox_Partner_TVStation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this TV station is managed by Bloombox or not.
  public var managed: Bool = false

  /// Type of TV station.
  public var type: Bloombox_Partner_TVStation.TypeEnum = .unspecifiedTvStationType

  /// UUID for this device, if it is registered with Bloombox.
  public var uuid: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies types of TV stations.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified type of TV station.
    case unspecifiedTvStationType // = 0

    /// Specifies a TV menu.
    case menu // = 1

    /// Specifies marketing content.
    case marketing // = 2

    /// Specifies music or music videos.
    case music // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedTvStationType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedTvStationType
      case 1: self = .menu
      case 2: self = .marketing
      case 3: self = .music
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedTvStationType: return 0
      case .menu: return 1
      case .marketing: return 2
      case .music: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}
}

#if swift(>=4.2)

extension Bloombox_Partner_TVStation.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_TVStation.TypeEnum] = [
    .unspecifiedTvStationType,
    .menu,
    .marketing,
    .music,
  ]
}

#endif  // swift(>=4.2)

/// Describes a physical point in the retail space, at which a customer can begin their experience (or, "check in," in
/// colloquial terms).
public struct Bloombox_Partner_CheckinStation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this check-in station is managed by Bloombox or not.
  public var managed: Bool {
    get {return _storage._managed}
    set {_uniqueStorage()._managed = newValue}
  }

  /// Type of check-in station.
  public var type: Bloombox_Partner_CheckinStation.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// UUID for this device, if it is registered with Bloombox.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Attached printer, if applicable.
  public var printer: Bloombox_Devices_CloudPrinter.Key {
    get {return _storage._printer ?? Bloombox_Devices_CloudPrinter.Key()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies types of check-in stations.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified type of check-in station.
    case unspecifiedCheckinStationType // = 0

    /// Required check-in station.
    case checkin // = 1

    /// Loyalty check-in station.
    case loyalty // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedCheckinStationType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedCheckinStationType
      case 1: self = .checkin
      case 2: self = .loyalty
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedCheckinStationType: return 0
      case .checkin: return 1
      case .loyalty: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Partner_CheckinStation.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_CheckinStation.TypeEnum] = [
    .unspecifiedCheckinStationType,
    .checkin,
    .loyalty,
  ]
}

#endif  // swift(>=4.2)

/// Describes a physical point in the retail space, at which a customer can complete their transaction (or, "check out,"
/// in colloquial terms).
public struct Bloombox_Partner_CheckoutStation {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether this check-out station is managed by Bloombox or not.
  public var managed: Bool {
    get {return _storage._managed}
    set {_uniqueStorage()._managed = newValue}
  }

  /// Type of check-out station.
  public var type: Bloombox_Partner_CheckoutStation.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Whether transactions occur here, or just pickup.
  public var pointOfSale: Bool {
    get {return _storage._pointOfSale}
    set {_uniqueStorage()._pointOfSale = newValue}
  }

  /// Hardware profile for this point-of-sale.
  public var hardware: Bloombox_Pos_POSHardware {
    get {return _storage._hardware ?? Bloombox_Pos_POSHardware()}
    set {_uniqueStorage()._hardware = newValue}
  }
  /// Returns true if `hardware` has been explicitly set.
  public var hasHardware: Bool {return _storage._hardware != nil}
  /// Clears the value of `hardware`. Subsequent reads from it will return its default value.
  public mutating func clearHardware() {_uniqueStorage()._hardware = nil}

  /// Software profile for this point-of-sale.
  public var software: Bloombox_Pos_POSSoftware {
    get {return _storage._software}
    set {_uniqueStorage()._software = newValue}
  }

  /// Foreign ID for this point-of-sale station, for correlating analytics.
  public var foreignID: String {
    get {return _storage._foreignID}
    set {_uniqueStorage()._foreignID = newValue}
  }

  /// Attached printer, if applicable.
  public var printer: Bloombox_Devices_CloudPrinter.Key {
    get {return _storage._printer ?? Bloombox_Devices_CloudPrinter.Key()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies types of check-out stations.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Unspecified type of check-out station.
    case unspecifiedCheckoutStationType // = 0

    /// Un-assisted, or kiosk-style, check-out station.
    case kiosk // = 1

    /// Assisted check-out station.
    case assisted // = 2

    /// Un-assisted check-out station.
    case unassisted // = 3

    /// In-store pickup location, for on-site orders.
    case pickupInstore // = 4

    /// In-store pickup location, for express/off-site orders.
    case pickupExpress // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unspecifiedCheckoutStationType
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unspecifiedCheckoutStationType
      case 1: self = .kiosk
      case 2: self = .assisted
      case 3: self = .unassisted
      case 4: self = .pickupInstore
      case 5: self = .pickupExpress
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unspecifiedCheckoutStationType: return 0
      case .kiosk: return 1
      case .assisted: return 2
      case .unassisted: return 3
      case .pickupInstore: return 4
      case .pickupExpress: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Partner_CheckoutStation.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_CheckoutStation.TypeEnum] = [
    .unspecifiedCheckoutStationType,
    .kiosk,
    .assisted,
    .unassisted,
    .pickupInstore,
    .pickupExpress,
  ]
}

#endif  // swift(>=4.2)

/// Specifies information about physical retail space components.
public struct Bloombox_Partner_RetailComponent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Generated ID to track this component.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Name of this retail component.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Label for this retail component.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Type of retail component.
  public var type: Bloombox_Partner_RetailComponent.TypeEnum {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Coordinates of the device in the retail location, as a pixel location.
  public var coordinate: Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate {
    get {return _storage._coordinate ?? Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate()}
    set {_uniqueStorage()._coordinate = newValue}
  }
  /// Returns true if `coordinate` has been explicitly set.
  public var hasCoordinate: Bool {return _storage._coordinate != nil}
  /// Clears the value of `coordinate`. Subsequent reads from it will return its default value.
  public mutating func clearCoordinate() {_uniqueStorage()._coordinate = nil}

  /// Details about this component.
  public var component: OneOf_Component? {
    get {return _storage._component}
    set {_uniqueStorage()._component = newValue}
  }

  /// Payload data about a menu component.
  public var menu: Bloombox_Partner_MenuStation {
    get {
      if case .menu(let v)? = _storage._component {return v}
      return Bloombox_Partner_MenuStation()
    }
    set {_uniqueStorage()._component = .menu(newValue)}
  }

  /// Payload data about a display station component.
  public var display: Bloombox_Partner_DisplayStation {
    get {
      if case .display(let v)? = _storage._component {return v}
      return Bloombox_Partner_DisplayStation()
    }
    set {_uniqueStorage()._component = .display(newValue)}
  }

  /// Payload data about a TV station component.
  public var tv: Bloombox_Partner_TVStation {
    get {
      if case .tv(let v)? = _storage._component {return v}
      return Bloombox_Partner_TVStation()
    }
    set {_uniqueStorage()._component = .tv(newValue)}
  }

  /// Payload data about a checkin station component.
  public var checkin: Bloombox_Partner_CheckinStation {
    get {
      if case .checkin(let v)? = _storage._component {return v}
      return Bloombox_Partner_CheckinStation()
    }
    set {_uniqueStorage()._component = .checkin(newValue)}
  }

  /// Payload data about a checkout station component.
  public var checkout: Bloombox_Partner_CheckoutStation {
    get {
      if case .checkout(let v)? = _storage._component {return v}
      return Bloombox_Partner_CheckoutStation()
    }
    set {_uniqueStorage()._component = .checkout(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Details about this component.
  public enum OneOf_Component: Equatable {
    /// Payload data about a menu component.
    case menu(Bloombox_Partner_MenuStation)
    /// Payload data about a display station component.
    case display(Bloombox_Partner_DisplayStation)
    /// Payload data about a TV station component.
    case tv(Bloombox_Partner_TVStation)
    /// Payload data about a checkin station component.
    case checkin(Bloombox_Partner_CheckinStation)
    /// Payload data about a checkout station component.
    case checkout(Bloombox_Partner_CheckoutStation)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Partner_RetailComponent.OneOf_Component, rhs: Bloombox_Partner_RetailComponent.OneOf_Component) -> Bool {
      switch (lhs, rhs) {
      case (.menu(let l), .menu(let r)): return l == r
      case (.display(let l), .display(let r)): return l == r
      case (.tv(let l), .tv(let r)): return l == r
      case (.checkin(let l), .checkin(let r)): return l == r
      case (.checkout(let l), .checkout(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Type of retail component.
  public enum TypeEnum: SwiftProtobuf.Enum {
    public typealias RawValue = Int

    /// Specifies an unknown retail component.
    case unknownRetailComponent // = 0

    /// Interactive menu station of some kind.
    case menu // = 1

    /// Display station or case.
    case display // = 2

    /// Non-interactive TV station of some kind.
    case tv // = 3

    /// Check-in station of some kind.
    case checkin // = 4

    /// Check-out station of some kind.
    case checkout // = 5
    case UNRECOGNIZED(Int)

    public init() {
      self = .unknownRetailComponent
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknownRetailComponent
      case 1: self = .menu
      case 2: self = .display
      case 3: self = .tv
      case 4: self = .checkin
      case 5: self = .checkout
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .unknownRetailComponent: return 0
      case .menu: return 1
      case .display: return 2
      case .tv: return 3
      case .checkin: return 4
      case .checkout: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

#if swift(>=4.2)

extension Bloombox_Partner_RetailComponent.TypeEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Partner_RetailComponent.TypeEnum] = [
    .unknownRetailComponent,
    .menu,
    .display,
    .tv,
    .checkin,
    .checkout,
  ]
}

#endif  // swift(>=4.2)

/// Specifies information about a location's retail storefront presence, as applicable.
public struct Bloombox_Partner_RetailStorefront {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Code abbreviating this location.
  public var code: String {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  /// Name to show in the dashboard, or publicly, for this retail storefront, if no more specific name is set.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Override label to show publicly for this retail location.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Position of this storefront on a map.
  public var geo: Opencannabis_Geo_MapPosition {
    get {return _storage._geo ?? Opencannabis_Geo_MapPosition()}
    set {_uniqueStorage()._geo = newValue}
  }
  /// Returns true if `geo` has been explicitly set.
  public var hasGeo: Bool {return _storage._geo != nil}
  /// Clears the value of `geo`. Subsequent reads from it will return its default value.
  public mutating func clearGeo() {_uniqueStorage()._geo = nil}

  /// Map overlay for this retail storefront.
  public var overlay: Bloombox_Partner_RetailLocationMapOverlay {
    get {return _storage._overlay ?? Bloombox_Partner_RetailLocationMapOverlay()}
    set {_uniqueStorage()._overlay = newValue}
  }
  /// Returns true if `overlay` has been explicitly set.
  public var hasOverlay: Bool {return _storage._overlay != nil}
  /// Clears the value of `overlay`. Subsequent reads from it will return its default value.
  public mutating func clearOverlay() {_uniqueStorage()._overlay = nil}

  /// Flow type for this retail location's checkin-in flow.
  public var checkinFlow: Bloombox_Partner_RetailCheckinFlowStyle {
    get {return _storage._checkinFlow}
    set {_uniqueStorage()._checkinFlow = newValue}
  }

  /// Flow type for this retail location's check-out flow.
  public var checkoutFlow: Bloombox_Partner_RetailCheckoutFlowStyle {
    get {return _storage._checkoutFlow}
    set {_uniqueStorage()._checkoutFlow = newValue}
  }

  /// Whether this record is ready for public view.
  public var readyForPublish: Bool {
    get {return _storage._readyForPublish}
    set {_uniqueStorage()._readyForPublish = newValue}
  }

  /// Whether this record is currently available for public view.
  public var published: Bool {
    get {return _storage._published}
    set {_uniqueStorage()._published = newValue}
  }

  /// Physical storefront hours for this location.
  public var hours: Bloombox_Partner_Settings_ShopHoursSettings {
    get {return _storage._hours ?? Bloombox_Partner_Settings_ShopHoursSettings()}
    set {_uniqueStorage()._hours = newValue}
  }
  /// Returns true if `hours` has been explicitly set.
  public var hasHours: Bool {return _storage._hours != nil}
  /// Clears the value of `hours`. Subsequent reads from it will return its default value.
  public mutating func clearHours() {_uniqueStorage()._hours = nil}

  /// Services offered by this retail storefront.
  public var services: Bloombox_Partner_Settings_ShopServiceSettings {
    get {return _storage._services ?? Bloombox_Partner_Settings_ShopServiceSettings()}
    set {_uniqueStorage()._services = newValue}
  }
  /// Returns true if `services` has been explicitly set.
  public var hasServices: Bool {return _storage._services != nil}
  /// Clears the value of `services`. Subsequent reads from it will return its default value.
  public mutating func clearServices() {_uniqueStorage()._services = nil}

  /// List of accepted payment methods at this location's physical storefront.
  public var acceptedMethod: [Opencannabis_Commerce_PaymentMethod] {
    get {return _storage._acceptedMethod}
    set {_uniqueStorage()._acceptedMethod = newValue}
  }

  /// List of accepted credit/debit card types at this location's physical storefront.
  public var acceptedCard: [Opencannabis_Commerce_PaymentCardType] {
    get {return _storage._acceptedCard}
    set {_uniqueStorage()._acceptedCard = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.partner"

extension Bloombox_Partner_RetailCheckinFlowStyle: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CHECKIN_FLOW"),
    1: .same(proto: "VESTIBULE_INDIVIDUAL"),
    2: .same(proto: "VESTIBULE_COMMUNAL"),
    3: .same(proto: "OPEN"),
    99: .same(proto: "OTHER_CHECKIN_FLOW"),
  ]
}

extension Bloombox_Partner_RetailCheckoutFlowStyle: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CHECKOUT_FLOW"),
    1: .same(proto: "QUEUED_COMMUNAL"),
    2: .same(proto: "ONE_ON_ONE"),
    3: .same(proto: "UNATTENDED_QUEUED"),
    99: .same(proto: "OTHER_CHECKOUT_FLOW"),
  ]
}

extension Bloombox_Partner_RetailLocationMapOverlay: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetailLocationMapOverlay"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zoom"),
    2: .same(proto: "width"),
    3: .same(proto: "height"),
    4: .same(proto: "rotation"),
    5: .same(proto: "box"),
    6: .same(proto: "floorplan"),
  ]

  fileprivate class _StorageClass {
    var _zoom: UInt32 = 0
    var _width: UInt32 = 0
    var _height: UInt32 = 0
    var _rotation: Double = 0
    var _box: [Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate] = []
    var _floorplan: Opencannabis_Media_MediaReference? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _zoom = source._zoom
      _width = source._width
      _height = source._height
      _rotation = source._rotation
      _box = source._box
      _floorplan = source._floorplan
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._zoom)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._width)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._height)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._rotation)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._box)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._floorplan)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._zoom != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._zoom, fieldNumber: 1)
      }
      if _storage._width != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._width, fieldNumber: 2)
      }
      if _storage._height != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._height, fieldNumber: 3)
      }
      if _storage._rotation != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rotation, fieldNumber: 4)
      }
      if !_storage._box.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._box, fieldNumber: 5)
      }
      if let v = _storage._floorplan {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_RetailLocationMapOverlay, rhs: Bloombox_Partner_RetailLocationMapOverlay) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._zoom != rhs_storage._zoom {return false}
        if _storage._width != rhs_storage._width {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._rotation != rhs_storage._rotation {return false}
        if _storage._box != rhs_storage._box {return false}
        if _storage._floorplan != rhs_storage._floorplan {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Partner_RetailLocationMapOverlay.protoMessageName + ".BoxCoordinate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "x"),
    2: .same(proto: "y"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.x)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.y)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.x != 0 {
      try visitor.visitSingularUInt32Field(value: self.x, fieldNumber: 1)
    }
    if self.y != 0 {
      try visitor.visitSingularUInt32Field(value: self.y, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate, rhs: Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate) -> Bool {
    if lhs.x != rhs.x {return false}
    if lhs.y != rhs.y {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_MenuStation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MenuStation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "managed"),
    2: .same(proto: "uuid"),
    3: .same(proto: "type"),
    4: .same(proto: "printer"),
  ]

  fileprivate class _StorageClass {
    var _managed: Bool = false
    var _uuid: String = String()
    var _type: Bloombox_Partner_MenuStation.TypeEnum = .unspecifiedMenuStationType
    var _printer: Bloombox_Devices_CloudPrinter.Key? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _managed = source._managed
      _uuid = source._uuid
      _type = source._type
      _printer = source._printer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._managed)
        case 2: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._printer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._managed != false {
        try visitor.visitSingularBoolField(value: _storage._managed, fieldNumber: 1)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 2)
      }
      if _storage._type != .unspecifiedMenuStationType {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 3)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_MenuStation, rhs: Bloombox_Partner_MenuStation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._managed != rhs_storage._managed {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._printer != rhs_storage._printer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_MenuStation.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_MENU_STATION_TYPE"),
    1: .same(proto: "TABLET"),
  ]
}

extension Bloombox_Partner_DisplayStation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DisplayStation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "mixed"),
    3: .same(proto: "known"),
  ]

  fileprivate class _StorageClass {
    var _type: Bloombox_Partner_DisplayStation.TypeEnum = .unspecifiedDisplayStationType
    var _contents: Bloombox_Partner_DisplayStation.OneOf_Contents?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _contents = source._contents
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2:
          if _storage._contents != nil {try decoder.handleConflictingOneOf()}
          var v: Bool?
          try decoder.decodeSingularBoolField(value: &v)
          if let v = v {_storage._contents = .mixed(v)}
        case 3:
          var v: Bloombox_Partner_DisplayStation.KnownContents?
          if let current = _storage._contents {
            try decoder.handleConflictingOneOf()
            if case .known(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._contents = .known(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .unspecifiedDisplayStationType {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      switch _storage._contents {
      case .mixed(let v)?:
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      case .known(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_DisplayStation, rhs: Bloombox_Partner_DisplayStation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._contents != rhs_storage._contents {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_DisplayStation.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_DISPLAY_STATION_TYPE"),
    1: .same(proto: "CASE"),
    2: .same(proto: "SHELF"),
    3: .same(proto: "CABINET"),
  ]
}

extension Bloombox_Partner_DisplayStation.KnownContents: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Partner_DisplayStation.protoMessageName + ".KnownContents"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kind"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.kind)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.kind.isEmpty {
      try visitor.visitPackedEnumField(value: self.kind, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_DisplayStation.KnownContents, rhs: Bloombox_Partner_DisplayStation.KnownContents) -> Bool {
    if lhs.kind != rhs.kind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_TVStation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TVStation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "managed"),
    2: .same(proto: "type"),
    3: .same(proto: "uuid"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.managed)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.uuid)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.managed != false {
      try visitor.visitSingularBoolField(value: self.managed, fieldNumber: 1)
    }
    if self.type != .unspecifiedTvStationType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_TVStation, rhs: Bloombox_Partner_TVStation) -> Bool {
    if lhs.managed != rhs.managed {return false}
    if lhs.type != rhs.type {return false}
    if lhs.uuid != rhs.uuid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_TVStation.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_TV_STATION_TYPE"),
    1: .same(proto: "MENU"),
    2: .same(proto: "MARKETING"),
    3: .same(proto: "MUSIC"),
  ]
}

extension Bloombox_Partner_CheckinStation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckinStation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "managed"),
    2: .same(proto: "type"),
    3: .same(proto: "uuid"),
    4: .same(proto: "printer"),
  ]

  fileprivate class _StorageClass {
    var _managed: Bool = false
    var _type: Bloombox_Partner_CheckinStation.TypeEnum = .unspecifiedCheckinStationType
    var _uuid: String = String()
    var _printer: Bloombox_Devices_CloudPrinter.Key? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _managed = source._managed
      _type = source._type
      _uuid = source._uuid
      _printer = source._printer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._managed)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._printer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._managed != false {
        try visitor.visitSingularBoolField(value: _storage._managed, fieldNumber: 1)
      }
      if _storage._type != .unspecifiedCheckinStationType {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 3)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_CheckinStation, rhs: Bloombox_Partner_CheckinStation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._managed != rhs_storage._managed {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._printer != rhs_storage._printer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_CheckinStation.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CHECKIN_STATION_TYPE"),
    1: .same(proto: "CHECKIN"),
    2: .same(proto: "LOYALTY"),
  ]
}

extension Bloombox_Partner_CheckoutStation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckoutStation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "managed"),
    2: .same(proto: "type"),
    3: .standard(proto: "point_of_sale"),
    4: .same(proto: "hardware"),
    5: .same(proto: "software"),
    6: .standard(proto: "foreign_id"),
    7: .same(proto: "printer"),
  ]

  fileprivate class _StorageClass {
    var _managed: Bool = false
    var _type: Bloombox_Partner_CheckoutStation.TypeEnum = .unspecifiedCheckoutStationType
    var _pointOfSale: Bool = false
    var _hardware: Bloombox_Pos_POSHardware? = nil
    var _software: Bloombox_Pos_POSSoftware = .unknownPosSoftware
    var _foreignID: String = String()
    var _printer: Bloombox_Devices_CloudPrinter.Key? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _managed = source._managed
      _type = source._type
      _pointOfSale = source._pointOfSale
      _hardware = source._hardware
      _software = source._software
      _foreignID = source._foreignID
      _printer = source._printer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._managed)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._pointOfSale)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._hardware)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._software)
        case 6: try decoder.decodeSingularStringField(value: &_storage._foreignID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._printer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._managed != false {
        try visitor.visitSingularBoolField(value: _storage._managed, fieldNumber: 1)
      }
      if _storage._type != .unspecifiedCheckoutStationType {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 2)
      }
      if _storage._pointOfSale != false {
        try visitor.visitSingularBoolField(value: _storage._pointOfSale, fieldNumber: 3)
      }
      if let v = _storage._hardware {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._software != .unknownPosSoftware {
        try visitor.visitSingularEnumField(value: _storage._software, fieldNumber: 5)
      }
      if !_storage._foreignID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._foreignID, fieldNumber: 6)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_CheckoutStation, rhs: Bloombox_Partner_CheckoutStation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._managed != rhs_storage._managed {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._pointOfSale != rhs_storage._pointOfSale {return false}
        if _storage._hardware != rhs_storage._hardware {return false}
        if _storage._software != rhs_storage._software {return false}
        if _storage._foreignID != rhs_storage._foreignID {return false}
        if _storage._printer != rhs_storage._printer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_CheckoutStation.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CHECKOUT_STATION_TYPE"),
    1: .same(proto: "KIOSK"),
    2: .same(proto: "ASSISTED"),
    3: .same(proto: "UNASSISTED"),
    4: .same(proto: "PICKUP_INSTORE"),
    5: .same(proto: "PICKUP_EXPRESS"),
  ]
}

extension Bloombox_Partner_RetailComponent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetailComponent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "name"),
    3: .same(proto: "label"),
    4: .same(proto: "type"),
    5: .same(proto: "coordinate"),
    10: .same(proto: "menu"),
    11: .same(proto: "display"),
    12: .same(proto: "tv"),
    13: .same(proto: "checkin"),
    14: .same(proto: "checkout"),
  ]

  fileprivate class _StorageClass {
    var _uuid: String = String()
    var _name: String = String()
    var _label: String = String()
    var _type: Bloombox_Partner_RetailComponent.TypeEnum = .unknownRetailComponent
    var _coordinate: Bloombox_Partner_RetailLocationMapOverlay.BoxCoordinate? = nil
    var _component: Bloombox_Partner_RetailComponent.OneOf_Component?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _name = source._name
      _label = source._label
      _type = source._type
      _coordinate = source._coordinate
      _component = source._component
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._label)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._coordinate)
        case 10:
          var v: Bloombox_Partner_MenuStation?
          if let current = _storage._component {
            try decoder.handleConflictingOneOf()
            if case .menu(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._component = .menu(v)}
        case 11:
          var v: Bloombox_Partner_DisplayStation?
          if let current = _storage._component {
            try decoder.handleConflictingOneOf()
            if case .display(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._component = .display(v)}
        case 12:
          var v: Bloombox_Partner_TVStation?
          if let current = _storage._component {
            try decoder.handleConflictingOneOf()
            if case .tv(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._component = .tv(v)}
        case 13:
          var v: Bloombox_Partner_CheckinStation?
          if let current = _storage._component {
            try decoder.handleConflictingOneOf()
            if case .checkin(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._component = .checkin(v)}
        case 14:
          var v: Bloombox_Partner_CheckoutStation?
          if let current = _storage._component {
            try decoder.handleConflictingOneOf()
            if case .checkout(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._component = .checkout(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 3)
      }
      if _storage._type != .unknownRetailComponent {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 4)
      }
      if let v = _storage._coordinate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      switch _storage._component {
      case .menu(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .display(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .tv(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .checkin(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .checkout(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_RetailComponent, rhs: Bloombox_Partner_RetailComponent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._coordinate != rhs_storage._coordinate {return false}
        if _storage._component != rhs_storage._component {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Partner_RetailComponent.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_RETAIL_COMPONENT"),
    1: .same(proto: "MENU"),
    2: .same(proto: "DISPLAY"),
    3: .same(proto: "TV"),
    4: .same(proto: "CHECKIN"),
    5: .same(proto: "CHECKOUT"),
  ]
}

extension Bloombox_Partner_RetailStorefront: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RetailStorefront"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "name"),
    3: .same(proto: "label"),
    4: .same(proto: "geo"),
    5: .same(proto: "overlay"),
    6: .standard(proto: "checkin_flow"),
    7: .standard(proto: "checkout_flow"),
    8: .standard(proto: "ready_for_publish"),
    9: .same(proto: "published"),
    10: .same(proto: "hours"),
    11: .same(proto: "services"),
    12: .standard(proto: "accepted_method"),
    13: .standard(proto: "accepted_card"),
  ]

  fileprivate class _StorageClass {
    var _code: String = String()
    var _name: String = String()
    var _label: String = String()
    var _geo: Opencannabis_Geo_MapPosition? = nil
    var _overlay: Bloombox_Partner_RetailLocationMapOverlay? = nil
    var _checkinFlow: Bloombox_Partner_RetailCheckinFlowStyle = .unspecifiedCheckinFlow
    var _checkoutFlow: Bloombox_Partner_RetailCheckoutFlowStyle = .unspecifiedCheckoutFlow
    var _readyForPublish: Bool = false
    var _published: Bool = false
    var _hours: Bloombox_Partner_Settings_ShopHoursSettings? = nil
    var _services: Bloombox_Partner_Settings_ShopServiceSettings? = nil
    var _acceptedMethod: [Opencannabis_Commerce_PaymentMethod] = []
    var _acceptedCard: [Opencannabis_Commerce_PaymentCardType] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _name = source._name
      _label = source._label
      _geo = source._geo
      _overlay = source._overlay
      _checkinFlow = source._checkinFlow
      _checkoutFlow = source._checkoutFlow
      _readyForPublish = source._readyForPublish
      _published = source._published
      _hours = source._hours
      _services = source._services
      _acceptedMethod = source._acceptedMethod
      _acceptedCard = source._acceptedCard
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._code)
        case 2: try decoder.decodeSingularStringField(value: &_storage._name)
        case 3: try decoder.decodeSingularStringField(value: &_storage._label)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._geo)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._overlay)
        case 6: try decoder.decodeSingularEnumField(value: &_storage._checkinFlow)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._checkoutFlow)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._readyForPublish)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._published)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._hours)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._services)
        case 12: try decoder.decodeRepeatedEnumField(value: &_storage._acceptedMethod)
        case 13: try decoder.decodeRepeatedEnumField(value: &_storage._acceptedCard)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._code.isEmpty {
        try visitor.visitSingularStringField(value: _storage._code, fieldNumber: 1)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 2)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 3)
      }
      if let v = _storage._geo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._overlay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._checkinFlow != .unspecifiedCheckinFlow {
        try visitor.visitSingularEnumField(value: _storage._checkinFlow, fieldNumber: 6)
      }
      if _storage._checkoutFlow != .unspecifiedCheckoutFlow {
        try visitor.visitSingularEnumField(value: _storage._checkoutFlow, fieldNumber: 7)
      }
      if _storage._readyForPublish != false {
        try visitor.visitSingularBoolField(value: _storage._readyForPublish, fieldNumber: 8)
      }
      if _storage._published != false {
        try visitor.visitSingularBoolField(value: _storage._published, fieldNumber: 9)
      }
      if let v = _storage._hours {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._services {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._acceptedMethod.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._acceptedMethod, fieldNumber: 12)
      }
      if !_storage._acceptedCard.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._acceptedCard, fieldNumber: 13)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Partner_RetailStorefront, rhs: Bloombox_Partner_RetailStorefront) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._label != rhs_storage._label {return false}
        if _storage._geo != rhs_storage._geo {return false}
        if _storage._overlay != rhs_storage._overlay {return false}
        if _storage._checkinFlow != rhs_storage._checkinFlow {return false}
        if _storage._checkoutFlow != rhs_storage._checkoutFlow {return false}
        if _storage._readyForPublish != rhs_storage._readyForPublish {return false}
        if _storage._published != rhs_storage._published {return false}
        if _storage._hours != rhs_storage._hours {return false}
        if _storage._services != rhs_storage._services {return false}
        if _storage._acceptedMethod != rhs_storage._acceptedMethod {return false}
        if _storage._acceptedCard != rhs_storage._acceptedCard {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
