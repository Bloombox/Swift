// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: accounting/Taxes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates the jurisdictions at which tax may be levied.
public enum Accounting_Taxes_TaxJurisdiction: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The tax is levied by a local municipality.
  case local // = 0

  /// The tax is levied by a provincial jurisdiction.
  case province // = 1

  /// The tax is levied by a national government.
  case federal // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .local
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .local
    case 1: self = .province
    case 2: self = .federal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .local: return 0
    case .province: return 1
    case .federal: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Enumerates the types of bases a tax may be calculated from.
public enum Accounting_Taxes_TaxBasis: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The tax is calculated per-item.
  case item // = 0

  /// The tax is calculated from the order subtotal.
  case orderSubtotal // = 1

  /// The tax is calculated in a second phase, applied to the subtotal which includes other taxes.
  case orderTotal // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .item
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .item
    case 1: self = .orderSubtotal
    case 2: self = .orderTotal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .item: return 0
    case .orderSubtotal: return 1
    case .orderTotal: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specification record for a type of taxes to apply.
public struct Accounting_Taxes_TaxSpec: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TaxSpec"

  /// The basis to calculate the tax value from.
  public var basis: Accounting_Taxes_TaxBasis = .item

  /// Jurisdiction that is levying the tax.
  public var jurisdiction: Accounting_Taxes_TaxJurisdiction = .local

  /// What to call this tax on receipts, and other end-user-visible materials.
  public var transactionLabel: String = String()

  /// Rate specified for the tax.
  public var rate: Accounting_Taxes_TaxSpec.OneOf_Rate? = nil

  /// Percentage rate for the tax.
  public var percentage: Double {
    get {
      if case .percentage(let v)? = rate {return v}
      return 0
    }
    set {rate = .percentage(newValue)}
  }

  /// Flat rate for the tax.
  public var staticValue: Double {
    get {
      if case .staticValue(let v)? = rate {return v}
      return 0
    }
    set {rate = .staticValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Rate specified for the tax.
  public enum OneOf_Rate: Equatable {
    /// Percentage rate for the tax.
    case percentage(Double)
    /// Flat rate for the tax.
    case staticValue(Double)

    public static func ==(lhs: Accounting_Taxes_TaxSpec.OneOf_Rate, rhs: Accounting_Taxes_TaxSpec.OneOf_Rate) -> Bool {
      switch (lhs, rhs) {
      case (.percentage(let l), .percentage(let r)): return l == r
      case (.staticValue(let l), .staticValue(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.basis)
      case 2: try decoder.decodeSingularEnumField(value: &self.jurisdiction)
      case 3: try decoder.decodeSingularStringField(value: &self.transactionLabel)
      case 4:
        if self.rate != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.rate = .percentage(v)}
      case 5:
        if self.rate != nil {try decoder.handleConflictingOneOf()}
        var v: Double?
        try decoder.decodeSingularDoubleField(value: &v)
        if let v = v {self.rate = .staticValue(v)}
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.basis != .item {
      try visitor.visitSingularEnumField(value: self.basis, fieldNumber: 1)
    }
    if self.jurisdiction != .local {
      try visitor.visitSingularEnumField(value: self.jurisdiction, fieldNumber: 2)
    }
    if !self.transactionLabel.isEmpty {
      try visitor.visitSingularStringField(value: self.transactionLabel, fieldNumber: 3)
    }
    switch self.rate {
    case .percentage(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    case .staticValue(let v)?:
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

/// Specifies a tax to be applied during a purchase.
public struct Accounting_Taxes_Tax: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Tax"

  /// ID code for this tax entry.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Specification for how the tax behaves.
  public var spec: Accounting_Taxes_TaxSpec {
    get {return _storage._spec ?? Accounting_Taxes_TaxSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_storage._spec = nil}

  /// Back-office name for this tax.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// User-visible name for this tax.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Narrative description for the tax, to be displayed to back-office and end-users in some
  /// special circumstances.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._label)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "accounting.taxes"

extension Accounting_Taxes_TaxJurisdiction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCAL"),
    1: .same(proto: "PROVINCE"),
    2: .same(proto: "FEDERAL"),
  ]
}

extension Accounting_Taxes_TaxBasis: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ITEM"),
    1: .same(proto: "ORDER_SUBTOTAL"),
    2: .same(proto: "ORDER_TOTAL"),
  ]
}

extension Accounting_Taxes_TaxSpec: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "basis"),
    2: .same(proto: "jurisdiction"),
    3: .standard(proto: "transaction_label"),
    4: .same(proto: "percentage"),
    5: .standard(proto: "static_value"),
  ]

  public func _protobuf_generated_isEqualTo(other: Accounting_Taxes_TaxSpec) -> Bool {
    if self.basis != other.basis {return false}
    if self.jurisdiction != other.jurisdiction {return false}
    if self.transactionLabel != other.transactionLabel {return false}
    if self.rate != other.rate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Accounting_Taxes_Tax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "spec"),
    3: .same(proto: "name"),
    4: .same(proto: "label"),
    5: .same(proto: "description"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _spec: Accounting_Taxes_TaxSpec? = nil
    var _name: String = String()
    var _label: String = String()
    var _description_p: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _spec = source._spec
      _name = source._name
      _label = source._label
      _description_p = source._description_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Accounting_Taxes_Tax) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._spec != other_storage._spec {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._label != other_storage._label {return false}
        if _storage._description_p != other_storage._description_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
