// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: accounting/Taxes.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides enumerations and messages that structure and specify jurisdictionally-imposed costs on goods sold (i.e.,
/// taxes). Support is included for taxes at the federal, provincial, and municipal levels.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates the jurisdictions at which tax may be levied.
public enum Opencannabis_Taxes_TaxJurisdictionMode: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The tax is levied by a local municipality.
  case local // = 0

  /// The tax is levied by a provincial jurisdiction.
  case province // = 1

  /// The tax is levied by a national government.
  case federal // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .local
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .local
    case 1: self = .province
    case 2: self = .federal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .local: return 0
    case .province: return 1
    case .federal: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Enumerates the types of bases a tax may be calculated from.
public enum Opencannabis_Taxes_TaxBasis: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The tax is calculated per-item.
  case item // = 0

  /// The tax is calculated from the order subtotal.
  case orderSubtotal // = 1

  /// The tax is calculated in a second phase, applied to the subtotal which includes other taxes.
  case orderTotal // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .item
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .item
    case 1: self = .orderSubtotal
    case 2: self = .orderTotal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .item: return 0
    case .orderSubtotal: return 1
    case .orderTotal: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies information about a municipally- or locally-imposed tax.
public struct Opencannabis_Taxes_LocalTax: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".LocalTax"

  /// Municipality imposing the tax.
  public var municipality: String {
    get {return _storage._municipality}
    set {_uniqueStorage()._municipality = newValue}
  }

  /// Province the municipality is in.
  public var province: Opencannabis_Geo_Province {
    get {return _storage._province ?? Opencannabis_Geo_Province()}
    set {_uniqueStorage()._province = newValue}
  }
  /// Returns true if `province` has been explicitly set.
  public var hasProvince: Bool {return _storage._province != nil}
  /// Clears the value of `province`. Subsequent reads from it will return its default value.
  public mutating func clearProvince() {_storage._province = nil}

  /// Country the province is in.
  public var country: Opencannabis_Geo_Country {
    get {return _storage._country ?? Opencannabis_Geo_Country()}
    set {_uniqueStorage()._country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  public var hasCountry: Bool {return _storage._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  public mutating func clearCountry() {_storage._country = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._municipality)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._province)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._country)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._municipality.isEmpty {
        try visitor.visitSingularStringField(value: _storage._municipality, fieldNumber: 1)
      }
      if let v = _storage._province {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._country {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies information about a provincially-imposed tax.
public struct Opencannabis_Taxes_ProvincialTax: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".ProvincialTax"

  /// Province the municipality is in.
  public var province: Opencannabis_Geo_Province {
    get {return _storage._province ?? Opencannabis_Geo_Province()}
    set {_uniqueStorage()._province = newValue}
  }
  /// Returns true if `province` has been explicitly set.
  public var hasProvince: Bool {return _storage._province != nil}
  /// Clears the value of `province`. Subsequent reads from it will return its default value.
  public mutating func clearProvince() {_storage._province = nil}

  /// Country the province is in.
  public var country: Opencannabis_Geo_Country {
    get {return _storage._country ?? Opencannabis_Geo_Country()}
    set {_uniqueStorage()._country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  public var hasCountry: Bool {return _storage._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  public mutating func clearCountry() {_storage._country = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._province)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._country)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._province {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._country {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies information about a federally-imposed tax.
public struct Opencannabis_Taxes_FederalTax: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".FederalTax"

  /// Province the municipality is in.
  public var country: Opencannabis_Geo_Country {
    get {return _storage._country ?? Opencannabis_Geo_Country()}
    set {_uniqueStorage()._country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  public var hasCountry: Bool {return _storage._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  public mutating func clearCountry() {_storage._country = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._country)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._country {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies information about a particular tax jurisdiction.
public struct Opencannabis_Taxes_TaxJurisdiction: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TaxJurisdiction"

  /// Operating mode of this tax jurisdiction.
  public var mode: Opencannabis_Taxes_TaxJurisdictionMode {
    get {return _storage._mode}
    set {_uniqueStorage()._mode = newValue}
  }

  /// Specifies information regarding the actual jurisdiction.
  public var jurisdiction: OneOf_Jurisdiction? {
    get {return _storage._jurisdiction}
    set {_uniqueStorage()._jurisdiction = newValue}
  }

  /// Local tax jurisdiction information.
  public var local: Opencannabis_Taxes_LocalTax {
    get {
      if case .local(let v)? = _storage._jurisdiction {return v}
      return Opencannabis_Taxes_LocalTax()
    }
    set {_uniqueStorage()._jurisdiction = .local(newValue)}
  }

  /// Provincial tax jurisdiction information.
  public var provincial: Opencannabis_Taxes_ProvincialTax {
    get {
      if case .provincial(let v)? = _storage._jurisdiction {return v}
      return Opencannabis_Taxes_ProvincialTax()
    }
    set {_uniqueStorage()._jurisdiction = .provincial(newValue)}
  }

  /// Federal tax jurisdiction information.
  public var federal: Opencannabis_Taxes_FederalTax {
    get {
      if case .federal(let v)? = _storage._jurisdiction {return v}
      return Opencannabis_Taxes_FederalTax()
    }
    set {_uniqueStorage()._jurisdiction = .federal(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies information regarding the actual jurisdiction.
  public enum OneOf_Jurisdiction: Equatable {
    /// Local tax jurisdiction information.
    case local(Opencannabis_Taxes_LocalTax)
    /// Provincial tax jurisdiction information.
    case provincial(Opencannabis_Taxes_ProvincialTax)
    /// Federal tax jurisdiction information.
    case federal(Opencannabis_Taxes_FederalTax)

    public static func ==(lhs: Opencannabis_Taxes_TaxJurisdiction.OneOf_Jurisdiction, rhs: Opencannabis_Taxes_TaxJurisdiction.OneOf_Jurisdiction) -> Bool {
      switch (lhs, rhs) {
      case (.local(let l), .local(let r)): return l == r
      case (.provincial(let l), .provincial(let r)): return l == r
      case (.federal(let l), .federal(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._mode)
        case 2:
          var v: Opencannabis_Taxes_LocalTax?
          if let current = _storage._jurisdiction {
            try decoder.handleConflictingOneOf()
            if case .local(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._jurisdiction = .local(v)}
        case 3:
          var v: Opencannabis_Taxes_ProvincialTax?
          if let current = _storage._jurisdiction {
            try decoder.handleConflictingOneOf()
            if case .provincial(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._jurisdiction = .provincial(v)}
        case 4:
          var v: Opencannabis_Taxes_FederalTax?
          if let current = _storage._jurisdiction {
            try decoder.handleConflictingOneOf()
            if case .federal(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._jurisdiction = .federal(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._mode != .local {
        try visitor.visitSingularEnumField(value: _storage._mode, fieldNumber: 1)
      }
      switch _storage._jurisdiction {
      case .local(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .provincial(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .federal(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specification record for a type of taxes to apply.
public struct Opencannabis_Taxes_TaxSpec: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".TaxSpec"

  /// The basis to calculate the tax value from.
  public var basis: Opencannabis_Taxes_TaxBasis {
    get {return _storage._basis}
    set {_uniqueStorage()._basis = newValue}
  }

  /// Jurisdiction that is levying the tax.
  public var jurisdiction: Opencannabis_Taxes_TaxJurisdiction {
    get {return _storage._jurisdiction ?? Opencannabis_Taxes_TaxJurisdiction()}
    set {_uniqueStorage()._jurisdiction = newValue}
  }
  /// Returns true if `jurisdiction` has been explicitly set.
  public var hasJurisdiction: Bool {return _storage._jurisdiction != nil}
  /// Clears the value of `jurisdiction`. Subsequent reads from it will return its default value.
  public mutating func clearJurisdiction() {_storage._jurisdiction = nil}

  /// What to call this tax on receipts, and other end-user-visible materials.
  public var transactionLabel: String {
    get {return _storage._transactionLabel}
    set {_uniqueStorage()._transactionLabel = newValue}
  }

  /// Rate specified for the tax.
  public var rate: OneOf_Rate? {
    get {return _storage._rate}
    set {_uniqueStorage()._rate = newValue}
  }

  /// Percentage rate for the tax.
  public var percentage: Double {
    get {
      if case .percentage(let v)? = _storage._rate {return v}
      return 0
    }
    set {_uniqueStorage()._rate = .percentage(newValue)}
  }

  /// Flat rate for the tax.
  public var staticValue: Double {
    get {
      if case .staticValue(let v)? = _storage._rate {return v}
      return 0
    }
    set {_uniqueStorage()._rate = .staticValue(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Rate specified for the tax.
  public enum OneOf_Rate: Equatable {
    /// Percentage rate for the tax.
    case percentage(Double)
    /// Flat rate for the tax.
    case staticValue(Double)

    public static func ==(lhs: Opencannabis_Taxes_TaxSpec.OneOf_Rate, rhs: Opencannabis_Taxes_TaxSpec.OneOf_Rate) -> Bool {
      switch (lhs, rhs) {
      case (.percentage(let l), .percentage(let r)): return l == r
      case (.staticValue(let l), .staticValue(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._basis)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._jurisdiction)
        case 3: try decoder.decodeSingularStringField(value: &_storage._transactionLabel)
        case 4:
          if _storage._rate != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._rate = .percentage(v)}
        case 5:
          if _storage._rate != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._rate = .staticValue(v)}
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._basis != .item {
        try visitor.visitSingularEnumField(value: _storage._basis, fieldNumber: 1)
      }
      if let v = _storage._jurisdiction {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._transactionLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transactionLabel, fieldNumber: 3)
      }
      switch _storage._rate {
      case .percentage(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      case .staticValue(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a tax to be applied during a purchase.
public struct Opencannabis_Taxes_Tax: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".Tax"

  /// ID code for this tax entry.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// Specification for how the tax behaves.
  public var spec: Opencannabis_Taxes_TaxSpec {
    get {return _storage._spec ?? Opencannabis_Taxes_TaxSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  public var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  public mutating func clearSpec() {_storage._spec = nil}

  /// Back-office name for this tax.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// User-visible name for this tax.
  public var label: String {
    get {return _storage._label}
    set {_uniqueStorage()._label = newValue}
  }

  /// Narrative description for the tax, to be displayed to back-office and end-users in some
  /// special circumstances.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._spec)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._label)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._label.isEmpty {
        try visitor.visitSingularStringField(value: _storage._label, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.taxes"

extension Opencannabis_Taxes_TaxJurisdictionMode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOCAL"),
    1: .same(proto: "PROVINCE"),
    2: .same(proto: "FEDERAL"),
  ]
}

extension Opencannabis_Taxes_TaxBasis: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ITEM"),
    1: .same(proto: "ORDER_SUBTOTAL"),
    2: .same(proto: "ORDER_TOTAL"),
  ]
}

extension Opencannabis_Taxes_LocalTax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "municipality"),
    2: .same(proto: "province"),
    3: .same(proto: "country"),
  ]

  fileprivate class _StorageClass {
    var _municipality: String = String()
    var _province: Opencannabis_Geo_Province? = nil
    var _country: Opencannabis_Geo_Country? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _municipality = source._municipality
      _province = source._province
      _country = source._country
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Taxes_LocalTax) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._municipality != other_storage._municipality {return false}
        if _storage._province != other_storage._province {return false}
        if _storage._country != other_storage._country {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Taxes_ProvincialTax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "province"),
    2: .same(proto: "country"),
  ]

  fileprivate class _StorageClass {
    var _province: Opencannabis_Geo_Province? = nil
    var _country: Opencannabis_Geo_Country? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _province = source._province
      _country = source._country
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Taxes_ProvincialTax) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._province != other_storage._province {return false}
        if _storage._country != other_storage._country {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Taxes_FederalTax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
  ]

  fileprivate class _StorageClass {
    var _country: Opencannabis_Geo_Country? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _country = source._country
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Taxes_FederalTax) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._country != other_storage._country {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Taxes_TaxJurisdiction: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .same(proto: "local"),
    3: .same(proto: "provincial"),
    4: .same(proto: "federal"),
  ]

  fileprivate class _StorageClass {
    var _mode: Opencannabis_Taxes_TaxJurisdictionMode = .local
    var _jurisdiction: Opencannabis_Taxes_TaxJurisdiction.OneOf_Jurisdiction?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mode = source._mode
      _jurisdiction = source._jurisdiction
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Taxes_TaxJurisdiction) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._mode != other_storage._mode {return false}
        if _storage._jurisdiction != other_storage._jurisdiction {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Taxes_TaxSpec: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "basis"),
    2: .same(proto: "jurisdiction"),
    3: .standard(proto: "transaction_label"),
    4: .same(proto: "percentage"),
    5: .standard(proto: "static_value"),
  ]

  fileprivate class _StorageClass {
    var _basis: Opencannabis_Taxes_TaxBasis = .item
    var _jurisdiction: Opencannabis_Taxes_TaxJurisdiction? = nil
    var _transactionLabel: String = String()
    var _rate: Opencannabis_Taxes_TaxSpec.OneOf_Rate?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _basis = source._basis
      _jurisdiction = source._jurisdiction
      _transactionLabel = source._transactionLabel
      _rate = source._rate
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Taxes_TaxSpec) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._basis != other_storage._basis {return false}
        if _storage._jurisdiction != other_storage._jurisdiction {return false}
        if _storage._transactionLabel != other_storage._transactionLabel {return false}
        if _storage._rate != other_storage._rate {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Opencannabis_Taxes_Tax: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "spec"),
    3: .same(proto: "name"),
    4: .same(proto: "label"),
    5: .same(proto: "description"),
  ]

  fileprivate class _StorageClass {
    var _id: String = String()
    var _spec: Opencannabis_Taxes_TaxSpec? = nil
    var _name: String = String()
    var _label: String = String()
    var _description_p: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _spec = source._spec
      _name = source._name
      _label = source._label
      _description_p = source._description_p
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: Opencannabis_Taxes_Tax) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._id != other_storage._id {return false}
        if _storage._spec != other_storage._spec {return false}
        if _storage._name != other_storage._name {return false}
        if _storage._label != other_storage._label {return false}
        if _storage._description_p != other_storage._description_p {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
