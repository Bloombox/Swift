// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: google/cloudprint/GoogleCloudPrint.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Google Cloud Print (GCP) enables any app (web, mobile, desktop) on any device to print to any cloud-connected
/// printer. This Protobuf definition provides structures documented for the GCP API, available from Google in their docs
/// at [Google Developers](https://developers.google.com/cloud-print/docs/overview). These protos have been translated to
/// `proto3` syntax during the process of copying them into this codebase.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates printer connection statuses.
public enum Google_Cloudprint_PrinterConnectionStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown connection status.
  case unknown // = 0

  /// The device is dormant.
  case dormant // = 1

  /// The device is offline.
  case offline // = 2

  /// The device is online.
  case online // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .dormant
    case 2: self = .offline
    case 3: self = .online
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .dormant: return 1
    case .offline: return 2
    case .online: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloudprint_PrinterConnectionStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_PrinterConnectionStatus] = [
    .unknown,
    .dormant,
    .offline,
    .online,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates extra fields that may be returned in the response.
public enum Google_Cloudprint_ExtraPrinterField: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown extra field.
  case unknownExtraFields // = 0

  /// Return connection status with response.
  case connectionStatus // = 1

  /// Return semantic state with response.
  case semanticState // = 2

  /// Return UI state with response.
  case uiState // = 3

  /// Return queued jobs count with response.
  case queuedJobsCount // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownExtraFields
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownExtraFields
    case 1: self = .connectionStatus
    case 2: self = .semanticState
    case 3: self = .uiState
    case 4: self = .queuedJobsCount
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownExtraFields: return 0
    case .connectionStatus: return 1
    case .semanticState: return 2
    case .uiState: return 3
    case .queuedJobsCount: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Google_Cloudprint_ExtraPrinterField: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Google_Cloudprint_ExtraPrinterField] = [
    .unknownExtraFields,
    .connectionStatus,
    .semanticState,
    .uiState,
    .queuedJobsCount,
  ]
}

#endif  // swift(>=4.2)

public struct Google_Cloudprint_SubmitJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_SubmitJobResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_DeleteJobRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_DeleteJobResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_ListJobsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_ListJobsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_GetPrinterRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Google_Cloudprint_GetPrinterResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Request to search for prints for the currently-authorized users. The /search interface returns a list of printers
/// accessible to the authenticated user, filtered by various search options. Note that by default, /search will not
/// include printers that have been offline for a long time (i.e. whose connectionStatus is DORMANT).
/// This behavior can be overridden if ALL or DORMANT is passed as the value of the optional connection_status parameter.
public struct Google_Cloudprint_SearchPrintersRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// If q is specified, then only printers whose name, display name, or tags contain the given query as a substring
  /// (case-insensitively) will be returned.
  ///
  /// - Setting `q=^recent` will return the list of recently used printers, which will have all fields including
  ///   capabilities.
  /// - Setting `q=^own` or `q=^shared` will return the list of printers owned by or shared with the user, respectively.
  ///
  /// If q is not specified, then all printers accessible to (owned by or shared with) the authenticated user will be
  /// returned.
  public var q: String = String()

  /// If type is specified, then only printers of the given type will be returned.
  public var type: Google_Cloudprint_PrinterType = .noPrinterTypeFilter

  /// Specifies a filter based on connection status. The special `all` flag returns printers of all types/statuses,
  /// including printers marked as `DORMANT`.
  public var connectionStatusFilter: Google_Cloudprint_SearchPrintersRequest.OneOf_ConnectionStatusFilter? = nil

  /// Return all printers, including printers marked as `DORMANT`.
  public var allConnectionStatuses: Bool {
    get {
      if case .allConnectionStatuses(let v)? = connectionStatusFilter {return v}
      return false
    }
    set {connectionStatusFilter = .allConnectionStatuses(newValue)}
  }

  /// Return only printers of the specified connection status.
  public var connectionStatus: Google_Cloudprint_PrinterConnectionStatus {
    get {
      if case .connectionStatus(let v)? = connectionStatusFilter {return v}
      return .unknown
    }
    set {connectionStatusFilter = .connectionStatus(newValue)}
  }

  /// If q contains the substring "^recent", then providing use_cdd=true will cause the capabilities of the returned
  /// printers to be in CDD format; if q does not contain "^recent" then this parameter has no effect.
  public var useCdd: Bool = false

  /// Comma-separated list of extra fields to include in the returned printer objects, see Extra Fields for Printers for
  /// more information. For backward compatibility, connectionStatus is always returned when the extra_fields parameter
  /// is omitted.
  public var extraFields: [Google_Cloudprint_ExtraPrinterField] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a filter based on connection status. The special `all` flag returns printers of all types/statuses,
  /// including printers marked as `DORMANT`.
  public enum OneOf_ConnectionStatusFilter: Equatable {
    /// Return all printers, including printers marked as `DORMANT`.
    case allConnectionStatuses(Bool)
    /// Return only printers of the specified connection status.
    case connectionStatus(Google_Cloudprint_PrinterConnectionStatus)

  #if !swift(>=4.1)
    public static func ==(lhs: Google_Cloudprint_SearchPrintersRequest.OneOf_ConnectionStatusFilter, rhs: Google_Cloudprint_SearchPrintersRequest.OneOf_ConnectionStatusFilter) -> Bool {
      switch (lhs, rhs) {
      case (.allConnectionStatuses(let l), .allConnectionStatuses(let r)): return l == r
      case (.connectionStatus(let l), .connectionStatus(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}
}

/// Describes a Google Cloud Print printer.
public struct Google_Cloudprint_CloudPrinter {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Google Cloud Print response payload version.
  public var gcpVersion: String {
    get {return _storage._gcpVersion}
    set {_uniqueStorage()._gcpVersion = newValue}
  }

  /// ID assigned to this GCP device.
  public var id: String {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  /// UUID assigned to this GCP device.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  /// Type of printer this payload represents.
  public var type: Google_Cloudprint_PrinterType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// Name assigned to this device.
  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  /// Display name for this device.
  public var displayName: String {
    get {return _storage._displayName}
    set {_uniqueStorage()._displayName = newValue}
  }

  /// Default display name for this device.
  public var defaultDisplayName: String {
    get {return _storage._defaultDisplayName}
    set {_uniqueStorage()._defaultDisplayName = newValue}
  }

  /// Description of this device.
  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  /// Email of the account that owns this device.
  public var ownerID: String {
    get {return _storage._ownerID}
    set {_uniqueStorage()._ownerID = newValue}
  }

  /// Display name of the account that owns this device.
  public var ownerName: String {
    get {return _storage._ownerName}
    set {_uniqueStorage()._ownerName = newValue}
  }

  /// Proxy ID through which communication occurs with this device.
  public var proxy: String {
    get {return _storage._proxy}
    set {_uniqueStorage()._proxy = newValue}
  }

  /// Current status detected for this device.
  public var status: Google_Cloudprint_PrinterConnectionStatus {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  /// Current set of tags affixed to this device.
  public var tags: [String] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  /// Hash/fingerprint of this device's capabilities.
  public var capsHash: String {
    get {return _storage._capsHash}
    set {_uniqueStorage()._capsHash = newValue}
  }

  /// Flag indicating whether the user has accepted TOS.
  public var isTosAccepted: Bool {
    get {return _storage._isTosAccepted}
    set {_uniqueStorage()._isTosAccepted = newValue}
  }

  /// Set of supported content types on this device.
  public var supportedContentTypes: String {
    get {return _storage._supportedContentTypes}
    set {_uniqueStorage()._supportedContentTypes = newValue}
  }

  /// Locally-applied settings for this device.
  public var localSettings: Google_Cloudprint_LocalSettings {
    get {return _storage._localSettings ?? Google_Cloudprint_LocalSettings()}
    set {_uniqueStorage()._localSettings = newValue}
  }
  /// Returns true if `localSettings` has been explicitly set.
  public var hasLocalSettings: Bool {return _storage._localSettings != nil}
  /// Clears the value of `localSettings`. Subsequent reads from it will return its default value.
  public mutating func clearLocalSettings() {_uniqueStorage()._localSettings = nil}

  /// Notification channel mode for this device.
  public var notificationChannel: Google_Cloudprint_NotificationChannel {
    get {return _storage._notificationChannel}
    set {_uniqueStorage()._notificationChannel = newValue}
  }

  /// Name of the manufacturer for this device.
  public var manufacturer: String {
    get {return _storage._manufacturer}
    set {_uniqueStorage()._manufacturer = newValue}
  }

  /// Name of this printer's model.
  public var model: String {
    get {return _storage._model}
    set {_uniqueStorage()._model = newValue}
  }

  /// URL to find support for this printer device.
  public var supportURL: String {
    get {return _storage._supportURL}
    set {_uniqueStorage()._supportURL = newValue}
  }

  /// URL to find updates for this device's software or drivers.
  public var updateURL: String {
    get {return _storage._updateURL}
    set {_uniqueStorage()._updateURL = newValue}
  }

  /// URL to find setup help for this device.
  public var setupURL: String {
    get {return _storage._setupURL}
    set {_uniqueStorage()._setupURL = newValue}
  }

  /// ID for this device's certification.
  public var certificationID: String {
    get {return _storage._certificationID}
    set {_uniqueStorage()._certificationID = newValue}
  }

  /// Version of this device's firmware, if known.
  public var firmware: String {
    get {return _storage._firmware}
    set {_uniqueStorage()._firmware = newValue}
  }

  /// Last time this device was accessed.
  public var accessTime: String {
    get {return _storage._accessTime}
    set {_uniqueStorage()._accessTime = newValue}
  }

  /// Last time this device was updated.
  public var updateTime: String {
    get {return _storage._updateTime}
    set {_uniqueStorage()._updateTime = newValue}
  }

  /// When this device was originally created.
  public var createTime: String {
    get {return _storage._createTime}
    set {_uniqueStorage()._createTime = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// The JSON response object contains a Boolean success indicator, a listing of the request parameters, and a list of
/// printers. All fields are listed, except for capabilities which must be retrieved using a call to `/printer` (unless
/// `q` contains the substring "^recent", in which case the recent printers are returned with their capabilities).
public struct Google_Cloudprint_SearchPrintersResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether the request succeeded or failed.
  public var success: Bool = false

  /// XSRF token issued for the invoking client.
  public var xsrfToken: String = String()

  /// Printers being returned in this response.
  public var printers: [Google_Cloudprint_CloudPrinter] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Contains current and pending local settings.
public struct Google_Cloudprint_LocalSettings {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Current local settings.
  /// Required (for GCP 2.0) to be provided by the device via the /register interface. Should be provided or confirmed by
  /// the device via the /update interface as necessary. Prohibited to be provided by clients. Always present in the
  /// local_settings field returned by the /printer interface.
  public var current: Google_Cloudprint_LocalSettings.Settings {
    get {return _storage._current ?? Google_Cloudprint_LocalSettings.Settings()}
    set {_uniqueStorage()._current = newValue}
  }
  /// Returns true if `current` has been explicitly set.
  public var hasCurrent: Bool {return _storage._current != nil}
  /// Clears the value of `current`. Subsequent reads from it will return its default value.
  public mutating func clearCurrent() {_uniqueStorage()._current = nil}

  /// Pending local settings.
  /// Prohibited to be provided by the device. Provided by clients via the /update interface. Present in the
  /// local_settings field returned by the /printer interface if a client has provided pending local settings but the
  /// device has not yet confirmed them as current.
  public var pending: Google_Cloudprint_LocalSettings.Settings {
    get {return _storage._pending ?? Google_Cloudprint_LocalSettings.Settings()}
    set {_uniqueStorage()._pending = newValue}
  }
  /// Returns true if `pending` has been explicitly set.
  public var hasPending: Bool {return _storage._pending != nil}
  /// Clears the value of `pending`. Subsequent reads from it will return its default value.
  public mutating func clearPending() {_uniqueStorage()._pending = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Contains settings that do not change with normal use of the device.
  public struct Settings {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether Privet local discovery is enabled (required).
    public var localDiscovery: Bool = false

    /// Whether Privet access token API should be exposed on the local network.
    public var accessTokenEnabled: Bool = false

    /// Whether Privet local printing API should be exposed on the local network.
    public var localPrintingEnabled: Bool = false

    /// Whether Privet local printing may send jobs to the server for conversion.
    public var conversionPrintingEnabled: Bool = false

    /// Number of seconds between XMPP channel pings.
    public var xmppTimeoutValue: Int32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Description of how a cloud job (e.g. print job, scan job) should be handled by the cloud device. Also known as CJT.
public struct Google_Cloudprint_CloudJobTicket {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the CJT in the form "X.Y" where changes to Y are backwards compatible, and changes to X are not.
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Section of CJT pertaining to cloud printer ticket items.
  public var print: Google_Cloudprint_PrintTicketSection {
    get {return _storage._print ?? Google_Cloudprint_PrintTicketSection()}
    set {_uniqueStorage()._print = newValue}
  }
  /// Returns true if `print` has been explicitly set.
  public var hasPrint: Bool {return _storage._print != nil}
  /// Clears the value of `print`. Subsequent reads from it will return its default value.
  public mutating func clearPrint() {_uniqueStorage()._print = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Description of a cloud-enabled device's capabilities and properties. Also known as CDD.
public struct Google_Cloudprint_CloudDeviceDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the CDD in the form "X.Y" where changes to Y are backwards compatible, and changes to X are not.
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Section of the CDD that specifically describes printers.
  public var printer: Google_Cloudprint_PrinterDescriptionSection {
    get {return _storage._printer ?? Google_Cloudprint_PrinterDescriptionSection()}
    set {_uniqueStorage()._printer = newValue}
  }
  /// Returns true if `printer` has been explicitly set.
  public var hasPrinter: Bool {return _storage._printer != nil}
  /// Clears the value of `printer`. Subsequent reads from it will return its default value.
  public mutating func clearPrinter() {_uniqueStorage()._printer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Represents the current state of a print job on a cloud device.
public struct Google_Cloudprint_PrintJobState {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Version of the PJS in the form "X.Y" where changes to Y are backwards compatible, and changes to X are not.
  public var version: String {
    get {return _storage._version}
    set {_uniqueStorage()._version = newValue}
  }

  /// Current state of the job (required).
  public var state: Google_Cloudprint_JobState {
    get {return _storage._state ?? Google_Cloudprint_JobState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  /// Number of successfully printed pages. Printer should use this value to restart interrupted/suspended print jobs
  /// from the next page. Printer can only increase the number of pages printed.
  public var pagesPrinted: Int32 {
    get {return _storage._pagesPrinted}
    set {_uniqueStorage()._pagesPrinted = newValue}
  }

  /// Number of attempts to deliver the print job.
  public var deliveryAttempts: Int32 {
    get {return _storage._deliveryAttempts}
    set {_uniqueStorage()._deliveryAttempts = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Diff that can be applied to a PrintJobState message. Any omitted field will not be changed.
public struct Google_Cloudprint_PrintJobStateDiff {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// New job state.
  public var state: Google_Cloudprint_JobState {
    get {return _storage._state ?? Google_Cloudprint_JobState()}
    set {_uniqueStorage()._state = newValue}
  }
  /// Returns true if `state` has been explicitly set.
  public var hasState: Bool {return _storage._state != nil}
  /// Clears the value of `state`. Subsequent reads from it will return its default value.
  public mutating func clearState() {_uniqueStorage()._state = nil}

  /// New number of pages printed.
  public var pagesPrinted: Int32 {
    get {return _storage._pagesPrinted}
    set {_uniqueStorage()._pagesPrinted = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "google.cloudprint"

extension Google_Cloudprint_PrinterConnectionStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "DORMANT"),
    2: .same(proto: "OFFLINE"),
    3: .same(proto: "ONLINE"),
  ]
}

extension Google_Cloudprint_ExtraPrinterField: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_EXTRA_FIELDS"),
    1: .same(proto: "CONNECTION_STATUS"),
    2: .same(proto: "SEMANTIC_STATE"),
    3: .same(proto: "UI_STATE"),
    4: .same(proto: "QUEUED_JOBS_COUNT"),
  ]
}

extension Google_Cloudprint_SubmitJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitJobRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_SubmitJobRequest, rhs: Google_Cloudprint_SubmitJobRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_SubmitJobResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitJobResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_SubmitJobResponse, rhs: Google_Cloudprint_SubmitJobResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_DeleteJobRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteJobRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_DeleteJobRequest, rhs: Google_Cloudprint_DeleteJobRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_DeleteJobResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteJobResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_DeleteJobResponse, rhs: Google_Cloudprint_DeleteJobResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_ListJobsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListJobsRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_ListJobsRequest, rhs: Google_Cloudprint_ListJobsRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_ListJobsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListJobsResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_ListJobsResponse, rhs: Google_Cloudprint_ListJobsResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_GetPrinterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPrinterRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_GetPrinterRequest, rhs: Google_Cloudprint_GetPrinterRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_GetPrinterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPrinterResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_GetPrinterResponse, rhs: Google_Cloudprint_GetPrinterResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_SearchPrintersRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchPrintersRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "q"),
    2: .same(proto: "type"),
    3: .standard(proto: "all_connection_statuses"),
    4: .standard(proto: "connection_status"),
    5: .standard(proto: "use_cdd"),
    6: .standard(proto: "extra_fields"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.q)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      case 3:
        if self.connectionStatusFilter != nil {try decoder.handleConflictingOneOf()}
        var v: Bool?
        try decoder.decodeSingularBoolField(value: &v)
        if let v = v {self.connectionStatusFilter = .allConnectionStatuses(v)}
      case 4:
        if self.connectionStatusFilter != nil {try decoder.handleConflictingOneOf()}
        var v: Google_Cloudprint_PrinterConnectionStatus?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.connectionStatusFilter = .connectionStatus(v)}
      case 5: try decoder.decodeSingularBoolField(value: &self.useCdd)
      case 6: try decoder.decodeRepeatedEnumField(value: &self.extraFields)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.q.isEmpty {
      try visitor.visitSingularStringField(value: self.q, fieldNumber: 1)
    }
    if self.type != .noPrinterTypeFilter {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    switch self.connectionStatusFilter {
    case .allConnectionStatuses(let v)?:
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    case .connectionStatus(let v)?:
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    case nil: break
    }
    if self.useCdd != false {
      try visitor.visitSingularBoolField(value: self.useCdd, fieldNumber: 5)
    }
    if !self.extraFields.isEmpty {
      try visitor.visitPackedEnumField(value: self.extraFields, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_SearchPrintersRequest, rhs: Google_Cloudprint_SearchPrintersRequest) -> Bool {
    if lhs.q != rhs.q {return false}
    if lhs.type != rhs.type {return false}
    if lhs.connectionStatusFilter != rhs.connectionStatusFilter {return false}
    if lhs.useCdd != rhs.useCdd {return false}
    if lhs.extraFields != rhs.extraFields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CloudPrinter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudPrinter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gcp_version"),
    2: .same(proto: "id"),
    3: .same(proto: "uuid"),
    4: .same(proto: "type"),
    5: .same(proto: "name"),
    6: .standard(proto: "display_name"),
    7: .standard(proto: "default_display_name"),
    8: .same(proto: "description"),
    9: .standard(proto: "owner_id"),
    10: .standard(proto: "owner_name"),
    11: .same(proto: "proxy"),
    12: .same(proto: "status"),
    13: .same(proto: "tags"),
    14: .standard(proto: "caps_hash"),
    15: .standard(proto: "is_tos_accepted"),
    16: .standard(proto: "supported_content_types"),
    17: .standard(proto: "local_settings"),
    18: .standard(proto: "notification_channel"),
    19: .same(proto: "manufacturer"),
    20: .same(proto: "model"),
    21: .standard(proto: "support_url"),
    22: .standard(proto: "update_url"),
    23: .standard(proto: "setup_url"),
    24: .standard(proto: "certification_id"),
    25: .same(proto: "firmware"),
    97: .standard(proto: "access_time"),
    98: .standard(proto: "update_time"),
    99: .standard(proto: "create_time"),
  ]

  fileprivate class _StorageClass {
    var _gcpVersion: String = String()
    var _id: String = String()
    var _uuid: String = String()
    var _type: Google_Cloudprint_PrinterType = .noPrinterTypeFilter
    var _name: String = String()
    var _displayName: String = String()
    var _defaultDisplayName: String = String()
    var _description_p: String = String()
    var _ownerID: String = String()
    var _ownerName: String = String()
    var _proxy: String = String()
    var _status: Google_Cloudprint_PrinterConnectionStatus = .unknown
    var _tags: [String] = []
    var _capsHash: String = String()
    var _isTosAccepted: Bool = false
    var _supportedContentTypes: String = String()
    var _localSettings: Google_Cloudprint_LocalSettings? = nil
    var _notificationChannel: Google_Cloudprint_NotificationChannel = .unrecognizedChannel
    var _manufacturer: String = String()
    var _model: String = String()
    var _supportURL: String = String()
    var _updateURL: String = String()
    var _setupURL: String = String()
    var _certificationID: String = String()
    var _firmware: String = String()
    var _accessTime: String = String()
    var _updateTime: String = String()
    var _createTime: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _gcpVersion = source._gcpVersion
      _id = source._id
      _uuid = source._uuid
      _type = source._type
      _name = source._name
      _displayName = source._displayName
      _defaultDisplayName = source._defaultDisplayName
      _description_p = source._description_p
      _ownerID = source._ownerID
      _ownerName = source._ownerName
      _proxy = source._proxy
      _status = source._status
      _tags = source._tags
      _capsHash = source._capsHash
      _isTosAccepted = source._isTosAccepted
      _supportedContentTypes = source._supportedContentTypes
      _localSettings = source._localSettings
      _notificationChannel = source._notificationChannel
      _manufacturer = source._manufacturer
      _model = source._model
      _supportURL = source._supportURL
      _updateURL = source._updateURL
      _setupURL = source._setupURL
      _certificationID = source._certificationID
      _firmware = source._firmware
      _accessTime = source._accessTime
      _updateTime = source._updateTime
      _createTime = source._createTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._gcpVersion)
        case 2: try decoder.decodeSingularStringField(value: &_storage._id)
        case 3: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 5: try decoder.decodeSingularStringField(value: &_storage._name)
        case 6: try decoder.decodeSingularStringField(value: &_storage._displayName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._defaultDisplayName)
        case 8: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 9: try decoder.decodeSingularStringField(value: &_storage._ownerID)
        case 10: try decoder.decodeSingularStringField(value: &_storage._ownerName)
        case 11: try decoder.decodeSingularStringField(value: &_storage._proxy)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 13: try decoder.decodeRepeatedStringField(value: &_storage._tags)
        case 14: try decoder.decodeSingularStringField(value: &_storage._capsHash)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._isTosAccepted)
        case 16: try decoder.decodeSingularStringField(value: &_storage._supportedContentTypes)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._localSettings)
        case 18: try decoder.decodeSingularEnumField(value: &_storage._notificationChannel)
        case 19: try decoder.decodeSingularStringField(value: &_storage._manufacturer)
        case 20: try decoder.decodeSingularStringField(value: &_storage._model)
        case 21: try decoder.decodeSingularStringField(value: &_storage._supportURL)
        case 22: try decoder.decodeSingularStringField(value: &_storage._updateURL)
        case 23: try decoder.decodeSingularStringField(value: &_storage._setupURL)
        case 24: try decoder.decodeSingularStringField(value: &_storage._certificationID)
        case 25: try decoder.decodeSingularStringField(value: &_storage._firmware)
        case 97: try decoder.decodeSingularStringField(value: &_storage._accessTime)
        case 98: try decoder.decodeSingularStringField(value: &_storage._updateTime)
        case 99: try decoder.decodeSingularStringField(value: &_storage._createTime)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._gcpVersion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._gcpVersion, fieldNumber: 1)
      }
      if !_storage._id.isEmpty {
        try visitor.visitSingularStringField(value: _storage._id, fieldNumber: 2)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 3)
      }
      if _storage._type != .noPrinterTypeFilter {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 4)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
      if !_storage._displayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._displayName, fieldNumber: 6)
      }
      if !_storage._defaultDisplayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._defaultDisplayName, fieldNumber: 7)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 8)
      }
      if !_storage._ownerID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerID, fieldNumber: 9)
      }
      if !_storage._ownerName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._ownerName, fieldNumber: 10)
      }
      if !_storage._proxy.isEmpty {
        try visitor.visitSingularStringField(value: _storage._proxy, fieldNumber: 11)
      }
      if _storage._status != .unknown {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 12)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._tags, fieldNumber: 13)
      }
      if !_storage._capsHash.isEmpty {
        try visitor.visitSingularStringField(value: _storage._capsHash, fieldNumber: 14)
      }
      if _storage._isTosAccepted != false {
        try visitor.visitSingularBoolField(value: _storage._isTosAccepted, fieldNumber: 15)
      }
      if !_storage._supportedContentTypes.isEmpty {
        try visitor.visitSingularStringField(value: _storage._supportedContentTypes, fieldNumber: 16)
      }
      if let v = _storage._localSettings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if _storage._notificationChannel != .unrecognizedChannel {
        try visitor.visitSingularEnumField(value: _storage._notificationChannel, fieldNumber: 18)
      }
      if !_storage._manufacturer.isEmpty {
        try visitor.visitSingularStringField(value: _storage._manufacturer, fieldNumber: 19)
      }
      if !_storage._model.isEmpty {
        try visitor.visitSingularStringField(value: _storage._model, fieldNumber: 20)
      }
      if !_storage._supportURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._supportURL, fieldNumber: 21)
      }
      if !_storage._updateURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updateURL, fieldNumber: 22)
      }
      if !_storage._setupURL.isEmpty {
        try visitor.visitSingularStringField(value: _storage._setupURL, fieldNumber: 23)
      }
      if !_storage._certificationID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._certificationID, fieldNumber: 24)
      }
      if !_storage._firmware.isEmpty {
        try visitor.visitSingularStringField(value: _storage._firmware, fieldNumber: 25)
      }
      if !_storage._accessTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._accessTime, fieldNumber: 97)
      }
      if !_storage._updateTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._updateTime, fieldNumber: 98)
      }
      if !_storage._createTime.isEmpty {
        try visitor.visitSingularStringField(value: _storage._createTime, fieldNumber: 99)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CloudPrinter, rhs: Google_Cloudprint_CloudPrinter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._gcpVersion != rhs_storage._gcpVersion {return false}
        if _storage._id != rhs_storage._id {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._type != rhs_storage._type {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._displayName != rhs_storage._displayName {return false}
        if _storage._defaultDisplayName != rhs_storage._defaultDisplayName {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._ownerID != rhs_storage._ownerID {return false}
        if _storage._ownerName != rhs_storage._ownerName {return false}
        if _storage._proxy != rhs_storage._proxy {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._capsHash != rhs_storage._capsHash {return false}
        if _storage._isTosAccepted != rhs_storage._isTosAccepted {return false}
        if _storage._supportedContentTypes != rhs_storage._supportedContentTypes {return false}
        if _storage._localSettings != rhs_storage._localSettings {return false}
        if _storage._notificationChannel != rhs_storage._notificationChannel {return false}
        if _storage._manufacturer != rhs_storage._manufacturer {return false}
        if _storage._model != rhs_storage._model {return false}
        if _storage._supportURL != rhs_storage._supportURL {return false}
        if _storage._updateURL != rhs_storage._updateURL {return false}
        if _storage._setupURL != rhs_storage._setupURL {return false}
        if _storage._certificationID != rhs_storage._certificationID {return false}
        if _storage._firmware != rhs_storage._firmware {return false}
        if _storage._accessTime != rhs_storage._accessTime {return false}
        if _storage._updateTime != rhs_storage._updateTime {return false}
        if _storage._createTime != rhs_storage._createTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_SearchPrintersResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchPrintersResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .standard(proto: "xsrf_token"),
    3: .same(proto: "printers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.success)
      case 2: try decoder.decodeSingularStringField(value: &self.xsrfToken)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.printers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.success != false {
      try visitor.visitSingularBoolField(value: self.success, fieldNumber: 1)
    }
    if !self.xsrfToken.isEmpty {
      try visitor.visitSingularStringField(value: self.xsrfToken, fieldNumber: 2)
    }
    if !self.printers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.printers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_SearchPrintersResponse, rhs: Google_Cloudprint_SearchPrintersResponse) -> Bool {
    if lhs.success != rhs.success {return false}
    if lhs.xsrfToken != rhs.xsrfToken {return false}
    if lhs.printers != rhs.printers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_LocalSettings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocalSettings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "current"),
    2: .same(proto: "pending"),
  ]

  fileprivate class _StorageClass {
    var _current: Google_Cloudprint_LocalSettings.Settings? = nil
    var _pending: Google_Cloudprint_LocalSettings.Settings? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _current = source._current
      _pending = source._pending
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._current)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pending)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._current {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._pending {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_LocalSettings, rhs: Google_Cloudprint_LocalSettings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._current != rhs_storage._current {return false}
        if _storage._pending != rhs_storage._pending {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_LocalSettings.Settings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Google_Cloudprint_LocalSettings.protoMessageName + ".Settings"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "local_discovery"),
    2: .standard(proto: "access_token_enabled"),
    3: .standard(proto: "local_printing_enabled"),
    4: .standard(proto: "conversion_printing_enabled"),
    5: .standard(proto: "xmpp_timeout_value"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.localDiscovery)
      case 2: try decoder.decodeSingularBoolField(value: &self.accessTokenEnabled)
      case 3: try decoder.decodeSingularBoolField(value: &self.localPrintingEnabled)
      case 4: try decoder.decodeSingularBoolField(value: &self.conversionPrintingEnabled)
      case 5: try decoder.decodeSingularInt32Field(value: &self.xmppTimeoutValue)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.localDiscovery != false {
      try visitor.visitSingularBoolField(value: self.localDiscovery, fieldNumber: 1)
    }
    if self.accessTokenEnabled != false {
      try visitor.visitSingularBoolField(value: self.accessTokenEnabled, fieldNumber: 2)
    }
    if self.localPrintingEnabled != false {
      try visitor.visitSingularBoolField(value: self.localPrintingEnabled, fieldNumber: 3)
    }
    if self.conversionPrintingEnabled != false {
      try visitor.visitSingularBoolField(value: self.conversionPrintingEnabled, fieldNumber: 4)
    }
    if self.xmppTimeoutValue != 0 {
      try visitor.visitSingularInt32Field(value: self.xmppTimeoutValue, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_LocalSettings.Settings, rhs: Google_Cloudprint_LocalSettings.Settings) -> Bool {
    if lhs.localDiscovery != rhs.localDiscovery {return false}
    if lhs.accessTokenEnabled != rhs.accessTokenEnabled {return false}
    if lhs.localPrintingEnabled != rhs.localPrintingEnabled {return false}
    if lhs.conversionPrintingEnabled != rhs.conversionPrintingEnabled {return false}
    if lhs.xmppTimeoutValue != rhs.xmppTimeoutValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CloudJobTicket: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudJobTicket"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    101: .same(proto: "print"),
  ]

  fileprivate class _StorageClass {
    var _version: String = String()
    var _print: Google_Cloudprint_PrintTicketSection? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _print = source._print
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._version)
        case 101: try decoder.decodeSingularMessageField(value: &_storage._print)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 1)
      }
      if let v = _storage._print {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CloudJobTicket, rhs: Google_Cloudprint_CloudJobTicket) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._print != rhs_storage._print {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_CloudDeviceDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CloudDeviceDescription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    101: .same(proto: "printer"),
  ]

  fileprivate class _StorageClass {
    var _version: String = String()
    var _printer: Google_Cloudprint_PrinterDescriptionSection? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _printer = source._printer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._version)
        case 101: try decoder.decodeSingularMessageField(value: &_storage._printer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 1)
      }
      if let v = _storage._printer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 101)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_CloudDeviceDescription, rhs: Google_Cloudprint_CloudDeviceDescription) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._printer != rhs_storage._printer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_PrintJobState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrintJobState"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .same(proto: "state"),
    3: .standard(proto: "pages_printed"),
    4: .standard(proto: "delivery_attempts"),
  ]

  fileprivate class _StorageClass {
    var _version: String = String()
    var _state: Google_Cloudprint_JobState? = nil
    var _pagesPrinted: Int32 = 0
    var _deliveryAttempts: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _state = source._state
      _pagesPrinted = source._pagesPrinted
      _deliveryAttempts = source._deliveryAttempts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._version)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._pagesPrinted)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._deliveryAttempts)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._version.isEmpty {
        try visitor.visitSingularStringField(value: _storage._version, fieldNumber: 1)
      }
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._pagesPrinted != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pagesPrinted, fieldNumber: 3)
      }
      if _storage._deliveryAttempts != 0 {
        try visitor.visitSingularInt32Field(value: _storage._deliveryAttempts, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrintJobState, rhs: Google_Cloudprint_PrintJobState) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._state != rhs_storage._state {return false}
        if _storage._pagesPrinted != rhs_storage._pagesPrinted {return false}
        if _storage._deliveryAttempts != rhs_storage._deliveryAttempts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Google_Cloudprint_PrintJobStateDiff: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PrintJobStateDiff"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .standard(proto: "pages_printed"),
  ]

  fileprivate class _StorageClass {
    var _state: Google_Cloudprint_JobState? = nil
    var _pagesPrinted: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _pagesPrinted = source._pagesPrinted
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._state)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._pagesPrinted)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._state {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._pagesPrinted != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pagesPrinted, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Google_Cloudprint_PrintJobStateDiff, rhs: Google_Cloudprint_PrintJobStateDiff) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._pagesPrinted != rhs_storage._pagesPrinted {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
