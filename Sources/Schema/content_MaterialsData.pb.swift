// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: content/MaterialsData.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Quantitative or empirical content regarding the substance or material of a given product.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies materials-related data about a product that contains cannabis.
public struct Opencannabis_Content_MaterialsData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Species of an item, if known.
  public var species: Opencannabis_Structs_Species {
    get {return _storage._species}
    set {_uniqueStorage()._species = newValue}
  }

  /// Specifies the genetics of an item, if known.
  public var genetics: Opencannabis_Structs_Genetics {
    get {return _storage._genetics ?? Opencannabis_Structs_Genetics()}
    set {_uniqueStorage()._genetics = newValue}
  }
  /// Returns true if `genetics` has been explicitly set.
  public var hasGenetics: Bool {return _storage._genetics != nil}
  /// Clears the value of `genetics`. Subsequent reads from it will return its default value.
  public mutating func clearGenetics() {_uniqueStorage()._genetics = nil}

  /// Specifies how this item was grown.
  public var grow: Opencannabis_Structs_Grow {
    get {return _storage._grow}
    set {_uniqueStorage()._grow = newValue}
  }

  /// Shelf status of this product.
  public var shelf: Opencannabis_Structs_Shelf {
    get {return _storage._shelf}
    set {_uniqueStorage()._shelf = newValue}
  }

  /// Specifies distribution policy for this particular subject material.
  public var channel: [Opencannabis_Products_Distribution_DistributionPolicy] {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "opencannabis.content"

extension Opencannabis_Content_MaterialsData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MaterialsData"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "species"),
    2: .same(proto: "genetics"),
    3: .same(proto: "grow"),
    4: .same(proto: "shelf"),
    5: .same(proto: "channel"),
  ]

  fileprivate class _StorageClass {
    var _species: Opencannabis_Structs_Species = .unspecified
    var _genetics: Opencannabis_Structs_Genetics? = nil
    var _grow: Opencannabis_Structs_Grow = .generic
    var _shelf: Opencannabis_Structs_Shelf = .genericShelf
    var _channel: [Opencannabis_Products_Distribution_DistributionPolicy] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _species = source._species
      _genetics = source._genetics
      _grow = source._grow
      _shelf = source._shelf
      _channel = source._channel
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._species)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._genetics)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._grow)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._shelf)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._channel)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._species != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._species, fieldNumber: 1)
      }
      if let v = _storage._genetics {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._grow != .generic {
        try visitor.visitSingularEnumField(value: _storage._grow, fieldNumber: 3)
      }
      if _storage._shelf != .genericShelf {
        try visitor.visitSingularEnumField(value: _storage._shelf, fieldNumber: 4)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._channel, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Opencannabis_Content_MaterialsData, rhs: Opencannabis_Content_MaterialsData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._species != rhs_storage._species {return false}
        if _storage._genetics != rhs_storage._genetics {return false}
        if _storage._grow != rhs_storage._grow {return false}
        if _storage._shelf != rhs_storage._shelf {return false}
        if _storage._channel != rhs_storage._channel {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
