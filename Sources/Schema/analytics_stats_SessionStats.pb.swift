// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: analytics/stats/SessionStats.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides a structure for generating statistics based on a single user session.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a set of basic calculated statistics, computed at the level of an entire user session.
public struct Bloombox_Analytics_Stats_SessionStats {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Original ID of the session.
  public var sid: String {
    get {return _storage._sid}
    set {_uniqueStorage()._sid = newValue}
  }

  /// Partner scope seen as associated with this session.
  public var partnerScope: String {
    get {return _storage._partnerScope}
    set {_uniqueStorage()._partnerScope = newValue}
  }

  /// Count of total events seen in this session.
  public var eventCount: UInt32 {
    get {return _storage._eventCount}
    set {_uniqueStorage()._eventCount = newValue}
  }

  /// Timestamp representing the first event seen in this session.
  public var begin: Opencannabis_Temporal_Instant {
    get {return _storage._begin ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._begin = newValue}
  }
  /// Returns true if `begin` has been explicitly set.
  public var hasBegin: Bool {return _storage._begin != nil}
  /// Clears the value of `begin`. Subsequent reads from it will return its default value.
  public mutating func clearBegin() {_uniqueStorage()._begin = nil}

  /// Timestamp representing the last event seen in this session.
  public var end: Opencannabis_Temporal_Instant {
    get {return _storage._end ?? Opencannabis_Temporal_Instant()}
    set {_uniqueStorage()._end = newValue}
  }
  /// Returns true if `end` has been explicitly set.
  public var hasEnd: Bool {return _storage._end != nil}
  /// Clears the value of `end`. Subsequent reads from it will return its default value.
  public mutating func clearEnd() {_uniqueStorage()._end = nil}

  /// Device ID seen as associated with this session.
  public var deviceID: String {
    get {return _storage._deviceID}
    set {_uniqueStorage()._deviceID = newValue}
  }

  /// User ID seen as associated with this session.
  public var userID: String {
    get {return _storage._userID}
    set {_uniqueStorage()._userID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.analytics.stats"

extension Bloombox_Analytics_Stats_SessionStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SessionStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sid"),
    2: .standard(proto: "partner_scope"),
    3: .standard(proto: "event_count"),
    4: .same(proto: "begin"),
    5: .same(proto: "end"),
    6: .standard(proto: "device_id"),
    7: .standard(proto: "user_id"),
  ]

  fileprivate class _StorageClass {
    var _sid: String = String()
    var _partnerScope: String = String()
    var _eventCount: UInt32 = 0
    var _begin: Opencannabis_Temporal_Instant? = nil
    var _end: Opencannabis_Temporal_Instant? = nil
    var _deviceID: String = String()
    var _userID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sid = source._sid
      _partnerScope = source._partnerScope
      _eventCount = source._eventCount
      _begin = source._begin
      _end = source._end
      _deviceID = source._deviceID
      _userID = source._userID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._sid)
        case 2: try decoder.decodeSingularStringField(value: &_storage._partnerScope)
        case 3: try decoder.decodeSingularUInt32Field(value: &_storage._eventCount)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._begin)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._end)
        case 6: try decoder.decodeSingularStringField(value: &_storage._deviceID)
        case 7: try decoder.decodeSingularStringField(value: &_storage._userID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._sid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sid, fieldNumber: 1)
      }
      if !_storage._partnerScope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._partnerScope, fieldNumber: 2)
      }
      if _storage._eventCount != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._eventCount, fieldNumber: 3)
      }
      if let v = _storage._begin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._end {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._deviceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._deviceID, fieldNumber: 6)
      }
      if !_storage._userID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._userID, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Analytics_Stats_SessionStats, rhs: Bloombox_Analytics_Stats_SessionStats) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sid != rhs_storage._sid {return false}
        if _storage._partnerScope != rhs_storage._partnerScope {return false}
        if _storage._eventCount != rhs_storage._eventCount {return false}
        if _storage._begin != rhs_storage._begin {return false}
        if _storage._end != rhs_storage._end {return false}
        if _storage._deviceID != rhs_storage._deviceID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
