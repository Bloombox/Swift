// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: search/SearchResult.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the concept of individual, and aggregate, search results.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies a product that matched a search.
public struct Bloombox_Schema_Search_ProductSearchResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies the menu item that matched the result.
  public var item: Opencannabis_Products_Menu_MenuProduct {
    get {return _storage._item ?? Opencannabis_Products_Menu_MenuProduct()}
    set {_uniqueStorage()._item = newValue}
  }
  /// Returns true if `item` has been explicitly set.
  public var hasItem: Bool {return _storage._item != nil}
  /// Clears the value of `item`. Subsequent reads from it will return its default value.
  public mutating func clearItem() {_uniqueStorage()._item = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a user or user profile that matched a search.
public struct Bloombox_Schema_Search_UserSearchResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// User profile key.
  public var key: Bloombox_Schema_Identity_UserKey {
    get {return _storage._key ?? Bloombox_Schema_Identity_UserKey()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  public var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  public mutating func clearKey() {_uniqueStorage()._key = nil}

  /// User profile record.
  public var user: Bloombox_Schema_Identity_User {
    get {return _storage._user ?? Bloombox_Schema_Identity_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies a partner or partner location profile that matched a search.
public struct Bloombox_Schema_Search_PartnerSearchResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Path-style scope for this partner result, specifying a partner, location, and even a specific device, in the form
  /// of a URL path like: 'partners/%/locations/%/devices/%', with unset properties left out of the path.
  public var scope: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an individual matching result to a search operation, regardless of type.
public struct Bloombox_Schema_Search_SearchResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Rank of this item in the search result set.
  public var rank: UInt32 {
    get {return _storage._rank}
    set {_uniqueStorage()._rank = newValue}
  }

  /// Relevance score of this item as it relates to the specifies search terms.
  public var relevance: Double {
    get {return _storage._relevance}
    set {_uniqueStorage()._relevance = newValue}
  }

  /// Fields that matched the provided search query.
  public var fields: SwiftProtobuf.Google_Protobuf_FieldMask {
    get {return _storage._fields ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
    set {_uniqueStorage()._fields = newValue}
  }
  /// Returns true if `fields` has been explicitly set.
  public var hasFields: Bool {return _storage._fields != nil}
  /// Clears the value of `fields`. Subsequent reads from it will return its default value.
  public mutating func clearFields() {_uniqueStorage()._fields = nil}

  /// Result data, according to its categorical type.
  public var result: OneOf_Result? {
    get {return _storage._result}
    set {_uniqueStorage()._result = newValue}
  }

  /// Resulting data that is a catalog product.
  public var product: Bloombox_Schema_Search_ProductSearchResult {
    get {
      if case .product(let v)? = _storage._result {return v}
      return Bloombox_Schema_Search_ProductSearchResult()
    }
    set {_uniqueStorage()._result = .product(newValue)}
  }

  /// Resulting data that is a user or user profile.
  public var profile: Bloombox_Schema_Search_UserSearchResult {
    get {
      if case .profile(let v)? = _storage._result {return v}
      return Bloombox_Schema_Search_UserSearchResult()
    }
    set {_uniqueStorage()._result = .profile(newValue)}
  }

  /// Resulting data that is a partner or partner location profile.
  public var partner: Bloombox_Schema_Search_PartnerSearchResult {
    get {
      if case .partner(let v)? = _storage._result {return v}
      return Bloombox_Schema_Search_PartnerSearchResult()
    }
    set {_uniqueStorage()._result = .partner(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Result data, according to its categorical type.
  public enum OneOf_Result: Equatable {
    /// Resulting data that is a catalog product.
    case product(Bloombox_Schema_Search_ProductSearchResult)
    /// Resulting data that is a user or user profile.
    case profile(Bloombox_Schema_Search_UserSearchResult)
    /// Resulting data that is a partner or partner location profile.
    case partner(Bloombox_Schema_Search_PartnerSearchResult)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Schema_Search_SearchResult.OneOf_Result, rhs: Bloombox_Schema_Search_SearchResult.OneOf_Result) -> Bool {
      switch (lhs, rhs) {
      case (.product(let l), .product(let r)): return l == r
      case (.profile(let l), .profile(let r)): return l == r
      case (.partner(let l), .partner(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.schema.search"

extension Bloombox_Schema_Search_ProductSearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductSearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "item"),
  ]

  fileprivate class _StorageClass {
    var _item: Opencannabis_Products_Menu_MenuProduct? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _item = source._item
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._item)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._item {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Search_ProductSearchResult, rhs: Bloombox_Schema_Search_ProductSearchResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._item != rhs_storage._item {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Search_UserSearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserSearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _key: Bloombox_Schema_Identity_UserKey? = nil
    var _user: Bloombox_Schema_Identity_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Search_UserSearchResult, rhs: Bloombox_Schema_Search_UserSearchResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Search_PartnerSearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PartnerSearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.scope)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Search_PartnerSearchResult, rhs: Bloombox_Schema_Search_PartnerSearchResult) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Schema_Search_SearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rank"),
    2: .same(proto: "relevance"),
    3: .same(proto: "fields"),
    10: .same(proto: "product"),
    11: .same(proto: "profile"),
    12: .same(proto: "partner"),
  ]

  fileprivate class _StorageClass {
    var _rank: UInt32 = 0
    var _relevance: Double = 0
    var _fields: SwiftProtobuf.Google_Protobuf_FieldMask? = nil
    var _result: Bloombox_Schema_Search_SearchResult.OneOf_Result?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rank = source._rank
      _relevance = source._relevance
      _fields = source._fields
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._rank)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._relevance)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._fields)
        case 10:
          var v: Bloombox_Schema_Search_ProductSearchResult?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .product(v)}
        case 11:
          var v: Bloombox_Schema_Search_UserSearchResult?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .profile(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .profile(v)}
        case 12:
          var v: Bloombox_Schema_Search_PartnerSearchResult?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .partner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .partner(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._rank != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._rank, fieldNumber: 1)
      }
      if _storage._relevance != 0 {
        try visitor.visitSingularDoubleField(value: _storage._relevance, fieldNumber: 2)
      }
      if let v = _storage._fields {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      switch _storage._result {
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .profile(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .partner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Schema_Search_SearchResult, rhs: Bloombox_Schema_Search_SearchResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rank != rhs_storage._rank {return false}
        if _storage._relevance != rhs_storage._relevance {return false}
        if _storage._fields != rhs_storage._fields {return false}
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
