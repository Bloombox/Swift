// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: products/distribution/DistributionChannel.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies kinds of channels that may be used or specified for product distribution policies.
public enum Products_Distribution_Channel: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown, unrecognized, or otherwise unspecified distribution channel.
  case unspecifiedChannel // = 0

  /// Retail distribution channel, with direct sales to consumers.
  case retail // = 1

  /// Wholesale distribution channel, with sales to entities that re-sell.
  case wholesale // = 2

  /// Bulk distribution channel, with large-quantity sales to wholesalers, distributors or manufacturers.
  case bulk // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedChannel
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedChannel
    case 1: self = .retail
    case 2: self = .wholesale
    case 3: self = .bulk
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedChannel: return 0
    case .retail: return 1
    case .wholesale: return 2
    case .bulk: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies the supertypes of channels that may be used to categorize channels applied to product distribution
/// policies.
public enum Products_Distribution_ChannelType: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Unknown, unrecognized, or otherwise unspecified channel type.
  case unspecifiedChannelType // = 0

  /// Direct consumption of channel data, i.e., "direct retail" would be the standard retail dispensary.
  case direct // = 1

  /// Distribution through a second-party partner marketplace system. "Marketplace retail" would refer to digital or
  /// physical aggregators or clearinghouses that work directly with consumers.
  case marketplace // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedChannelType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedChannelType
    case 1: self = .direct
    case 2: self = .marketplace
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedChannelType: return 0
    case .direct: return 1
    case .marketplace: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

/// Specifies information required to note a channel and its settings for a given datapoint. Presence of this record
/// indicates an affirmative setting to distribute it to the specified channel, unless `suppress` is set.
public struct Products_Distribution_DistributionPolicy: SwiftProtobuf.Message {
  public static let protoMessageName: String = _protobuf_package + ".DistributionPolicy"

  /// Whether this policy is enabled.
  public var enabled: Bool = false

  /// Channel setting.
  public var channel: Products_Distribution_Channel = .unspecifiedChannel

  /// Channel distribution type.
  public var type: Products_Distribution_ChannelType = .unspecifiedChannelType

  /// The mere presence of a DistributionPolicy on a particular datapoint makes it eligible for distribution. This flag
  /// may be set to suppress distribution of the datapoint temporarily or explicitly.
  public var suppress: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.enabled)
      case 2: try decoder.decodeSingularEnumField(value: &self.channel)
      case 3: try decoder.decodeSingularEnumField(value: &self.type)
      case 4: try decoder.decodeSingularBoolField(value: &self.suppress)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.enabled != false {
      try visitor.visitSingularBoolField(value: self.enabled, fieldNumber: 1)
    }
    if self.channel != .unspecifiedChannel {
      try visitor.visitSingularEnumField(value: self.channel, fieldNumber: 2)
    }
    if self.type != .unspecifiedChannelType {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.suppress != false {
      try visitor.visitSingularBoolField(value: self.suppress, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "products.distribution"

extension Products_Distribution_Channel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CHANNEL"),
    1: .same(proto: "RETAIL"),
    2: .same(proto: "WHOLESALE"),
    3: .same(proto: "BULK"),
  ]
}

extension Products_Distribution_ChannelType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CHANNEL_TYPE"),
    1: .same(proto: "DIRECT"),
    2: .same(proto: "MARKETPLACE"),
  ]
}

extension Products_Distribution_DistributionPolicy: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "enabled"),
    2: .same(proto: "channel"),
    3: .same(proto: "type"),
    4: .same(proto: "suppress"),
  ]

  public func _protobuf_generated_isEqualTo(other: Products_Distribution_DistributionPolicy) -> Bool {
    if self.enabled != other.enabled {return false}
    if self.channel != other.channel {return false}
    if self.type != other.type {return false}
    if self.suppress != other.suppress {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
