// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/v1beta4/SearchTelemetryService_Beta4.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

/**
* Copyright 2019, Momentum Ideas, Co. All rights reserved.
* Source and object computer code contained herein is the private intellectual
* property of Momentum Ideas Co., a Delaware Corporation. Use of this
* code in source form requires permission in writing before use or the
* assembly, distribution, or publishing of derivative works, for commercial
* purposes or any other purpose, from a duly authorized officer of Momentum
* Ideas Co.
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

///*
/// Provides specialized telemetry services tailored for search operations. Searches and search result-sets can be
/// instrumented via this interface.

import Foundation
import SwiftProtobuf
import OpenCannabis

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies events that deal with user-submitted searches, including the query itself, the resultset, and any response
/// the user makes based upon that resultset.
public struct Bloombox_Services_Telemetry_V1beta4_SearchEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Event constituting a fulltext search submitted by an end user.
  public struct Query {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Term string for the search, encoded in Base64.
    public var term: String {
      get {return _storage._term}
      set {_uniqueStorage()._term = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Digital property from which this search originated.
    public var property: Bloombox_Analytics_Search_SearchProperty {
      get {return _storage._property}
      set {_uniqueStorage()._property = newValue}
    }

    /// Number of results.
    public var totalResults: UInt32 {
      get {return _storage._totalResults}
      set {_uniqueStorage()._totalResults = newValue}
    }

    /// Explicit event UUID.
    public var uuid: String {
      get {return _storage._uuid}
      set {_uniqueStorage()._uuid = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Result selection event by a user, after performing a search.
  public struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Term string for the search, encoded in Base64.
    public var term: String {
      get {return _storage._term}
      set {_uniqueStorage()._term = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Digital property from which this search originated.
    public var property: Bloombox_Analytics_Search_SearchProperty {
      get {return _storage._property}
      set {_uniqueStorage()._property = newValue}
    }

    /// Number of results.
    public var totalResults: UInt32 {
      get {return _storage._totalResults}
      set {_uniqueStorage()._totalResults = newValue}
    }

    /// Index of the tapped result in the set.
    public var selectedResult: UInt32 {
      get {return _storage._selectedResult}
      set {_uniqueStorage()._selectedResult = newValue}
    }

    /// Product key that was selected as a result of this tap.
    public var key: Opencannabis_Base_ProductKey {
      get {return _storage._key ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    /// Explicit event UUID.
    public var uuid: String {
      get {return _storage._uuid}
      set {_uniqueStorage()._uuid = newValue}
    }

    /// Lists each field that matched the search, as a dotted-generic-path.
    public var field: [String] {
      get {return _storage._field}
      set {_uniqueStorage()._field = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.services.telemetry.v1beta4"

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_SearchEvent.protoMessageName + ".Query"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "context"),
    3: .same(proto: "property"),
    4: .standard(proto: "total_results"),
    5: .same(proto: "uuid"),
  ]

  fileprivate class _StorageClass {
    var _term: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _property: Bloombox_Analytics_Search_SearchProperty = .propertyUnspecified
    var _totalResults: UInt32 = 0
    var _uuid: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _term = source._term
      _context = source._context
      _property = source._property
      _totalResults = source._totalResults
      _uuid = source._uuid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._term)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._property)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._totalResults)
        case 5: try decoder.decodeSingularStringField(value: &_storage._uuid)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._term.isEmpty {
        try visitor.visitSingularStringField(value: _storage._term, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._property != .propertyUnspecified {
        try visitor.visitSingularEnumField(value: _storage._property, fieldNumber: 3)
      }
      if _storage._totalResults != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._totalResults, fieldNumber: 4)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._term != rhs_storage._term {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._totalResults != rhs_storage._totalResults {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_SearchEvent.protoMessageName + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "context"),
    3: .same(proto: "property"),
    4: .standard(proto: "total_results"),
    5: .standard(proto: "selected_result"),
    6: .same(proto: "key"),
    7: .same(proto: "uuid"),
    8: .same(proto: "field"),
  ]

  fileprivate class _StorageClass {
    var _term: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _property: Bloombox_Analytics_Search_SearchProperty = .propertyUnspecified
    var _totalResults: UInt32 = 0
    var _selectedResult: UInt32 = 0
    var _key: Opencannabis_Base_ProductKey? = nil
    var _uuid: String = String()
    var _field: [String] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _term = source._term
      _context = source._context
      _property = source._property
      _totalResults = source._totalResults
      _selectedResult = source._selectedResult
      _key = source._key
      _uuid = source._uuid
      _field = source._field
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._term)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._property)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._totalResults)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._selectedResult)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 7: try decoder.decodeSingularStringField(value: &_storage._uuid)
        case 8: try decoder.decodeRepeatedStringField(value: &_storage._field)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._term.isEmpty {
        try visitor.visitSingularStringField(value: _storage._term, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._property != .propertyUnspecified {
        try visitor.visitSingularEnumField(value: _storage._property, fieldNumber: 3)
      }
      if _storage._totalResults != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._totalResults, fieldNumber: 4)
      }
      if _storage._selectedResult != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._selectedResult, fieldNumber: 5)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 7)
      }
      if !_storage._field.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._field, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._term != rhs_storage._term {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._totalResults != rhs_storage._totalResults {return false}
        if _storage._selectedResult != rhs_storage._selectedResult {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._field != rhs_storage._field {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
