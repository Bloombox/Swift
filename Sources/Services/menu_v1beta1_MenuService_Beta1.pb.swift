// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: menu/v1beta1/MenuService_Beta1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Specifies the Menu API, which provides synthesized product catalog information from available inventory/stock data.
/// This interface is specifically designed to showcase products that are currently available for sale.

import Foundation
import OpenCannabis
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates known errors that may be thrown by menu operations.
public enum Bloombox_Services_Menu_V1beta1_MenuError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error was encountered.
  case noError // = 0

  /// The specified partner ID is invalid.
  case partnerInvalid // = 1

  /// The specified location ID is invalid.
  case locationInvalid // = 2

  /// The specified section value was invalid.
  case sectionInvalid // = 3

  /// The specified section could not be found.
  case sectionNotFound // = 4

  /// The specified partner/location pair was valid, but menu data could not be resolved.
  case menuNotFound // = 5

  /// Search services are currently unavailable.
  case searchUnavailable // = 6

  /// Failed to locate a product by key.
  case productNotFound // = 7

  /// The configured access permissions do not allow the requested operation.
  case accessDenied // = 8

  /// The specified product key was found to be invalid.
  case keyInvalid // = 9

  /// The provided update was rejected.
  case updateInvalid // = 10

  /// The provided update was rejected due to a conflict.
  case conflict // = 11

  /// The server encountered some internal error.
  case internalError // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .partnerInvalid
    case 2: self = .locationInvalid
    case 3: self = .sectionInvalid
    case 4: self = .sectionNotFound
    case 5: self = .menuNotFound
    case 6: self = .searchUnavailable
    case 7: self = .productNotFound
    case 8: self = .accessDenied
    case 9: self = .keyInvalid
    case 10: self = .updateInvalid
    case 11: self = .conflict
    case 99: self = .internalError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .partnerInvalid: return 1
    case .locationInvalid: return 2
    case .sectionInvalid: return 3
    case .sectionNotFound: return 4
    case .menuNotFound: return 5
    case .searchUnavailable: return 6
    case .productNotFound: return 7
    case .accessDenied: return 8
    case .keyInvalid: return 9
    case .updateInvalid: return 10
    case .conflict: return 11
    case .internalError: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Menu_V1beta1_MenuError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Menu_V1beta1_MenuError] = [
    .noError,
    .partnerInvalid,
    .locationInvalid,
    .sectionInvalid,
    .sectionNotFound,
    .menuNotFound,
    .searchUnavailable,
    .productNotFound,
    .accessDenied,
    .keyInvalid,
    .updateInvalid,
    .conflict,
    .internalError,
  ]
}

#endif  // swift(>=4.2)

/// Specifies known providers of product catalog data, who might be requesting to sync product catalogs from a given CSV-
/// compatible endpoint.
public enum Bloombox_Services_Menu_V1beta1_CatalogProvider: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The catalog provided is not specified or is unrecognized.
  case unspecifiedCatalogProvider // = 0

  /// The catalog provider is Google.
  case google // = 1

  /// The catalog provider is Facebook.
  case facebook // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unspecifiedCatalogProvider
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecifiedCatalogProvider
    case 1: self = .google
    case 2: self = .facebook
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unspecifiedCatalogProvider: return 0
    case .google: return 1
    case .facebook: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Menu_V1beta1_CatalogProvider: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Menu_V1beta1_CatalogProvider] = [
    .unspecifiedCatalogProvider,
    .google,
    .facebook,
  ]
}

#endif  // swift(>=4.2)

/// Specifies an RPC operation to retrieve status information for the Menu API.
public struct Bloombox_Services_Menu_V1beta1_Ping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a menu ping request.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies a menu ping response.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current service status.
    public var status: Bloombox_Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Specifies an RPC operation to retrieve menu data, either in full (i.e. the entire menu, compose of all sections), or
/// for a given set of specified sections.
public struct Bloombox_Services_Menu_V1beta1_GetMenu {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request payload to retrieve a menu.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for the request.
    public var scope: String = String()

    /// Flag indicating a full menu, including hidden/out-of-stock items.
    public var full: Bool = false

    /// Only include menu keys, no detail data.
    public var keysOnly: Bool = false

    /// Don't return the menu if it's identical to this fingerprint.
    public var snapshot: String = String()

    /// Bloom filter to consider when returning or processing menu items.
    public var fingerprint: String = String()

    /// Sections to include in the menu. If unspecified, include all sections.
    public var section: Opencannabis_Products_Menu_Section_Section = .unspecified

    /// Whether to request an uncached menu.
    public var fresh: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies the response to a request to retrieve menu data.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Specifies the actual menu data payload returned in this response. The menu payload is independently usable, and
    /// includes any raw data or metadata needed to process the menu.
    public var catalog: Opencannabis_Products_Menu_Menu {
      get {return _storage._catalog ?? Opencannabis_Products_Menu_Menu()}
      set {_uniqueStorage()._catalog = newValue}
    }
    /// Returns true if `catalog` has been explicitly set.
    public var hasCatalog: Bool {return _storage._catalog != nil}
    /// Clears the value of `catalog`. Subsequent reads from it will return its default value.
    public mutating func clearCatalog() {_uniqueStorage()._catalog = nil}

    /// Whether the returned menu was cached or not.
    public var cached: Bool {
      get {return _storage._cached}
      set {_uniqueStorage()._cached = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Respond to a menu stream with an initial response, or an event payload, describing some occurrence or change in
  /// menu data to be processed by the listening client.
  public struct StreamEvent {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// New fingerprint for the entire menu catalog.
    public var fingerprint: String {
      get {return _storage._fingerprint}
      set {_uniqueStorage()._fingerprint = newValue}
    }

    /// Timestamp indicating when this change occurred, in millisecond-level resolution.
    public var modified: Opencannabis_Temporal_Instant {
      get {return _storage._modified ?? Opencannabis_Temporal_Instant()}
      set {_uniqueStorage()._modified = newValue}
    }
    /// Returns true if `modified` has been explicitly set.
    public var hasModified: Bool {return _storage._modified != nil}
    /// Clears the value of `modified`. Subsequent reads from it will return its default value.
    public mutating func clearModified() {_uniqueStorage()._modified = nil}

    /// Describes the payload encapsulated by this stream event.
    public var payload: OneOf_Payload? {
      get {return _storage._payload}
      set {_uniqueStorage()._payload = newValue}
    }

    /// Specifies a full menu catalog, which is usually communicated as the initial response payload.
    public var catalog: Opencannabis_Products_Menu_Menu {
      get {
        if case .catalog(let v)? = _storage._payload {return v}
        return Opencannabis_Products_Menu_Menu()
      }
      set {_uniqueStorage()._payload = .catalog(newValue)}
    }

    /// Delta payload, describing a menu change.
    public var delta: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges {
      get {
        if case .delta(let v)? = _storage._payload {return v}
        return Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges()
      }
      set {_uniqueStorage()._payload = .delta(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Describes the payload encapsulated by this stream event.
    public enum OneOf_Payload: Equatable {
      /// Specifies a full menu catalog, which is usually communicated as the initial response payload.
      case catalog(Opencannabis_Products_Menu_Menu)
      /// Delta payload, describing a menu change.
      case delta(Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.OneOf_Payload, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.OneOf_Payload) -> Bool {
        switch (lhs, rhs) {
        case (.catalog(let l), .catalog(let r)): return l == r
        case (.delta(let l), .delta(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    /// Enumerates the types of menu changes that can take place, and be used to notify the client. Changes may include
    /// menu item data, section membership for a given product, and more.
    public enum ChangeType: SwiftProtobuf.Enum {
      public typealias RawValue = Int

      /// Some change occurred that requires a menu refresh. In this case, no details are provided, so the whole menu is
      /// invalidated for re-fetch.
      case genericChange // = 0

      /// Settings for the menu changed, and so, the entire menu should be refreshed.
      case settings // = 1

      /// A product was added to the menu. The product's key should be listed in the subject product keys.
      case productAdd // = 2

      /// A product was changed on the menu. The product's key should be listed in the subject product keys.
      case productChange // = 3

      /// A product was deleted entirely from the menu. The product's key should be listed in the subject product keys.
      case productDelete // = 4
      case UNRECOGNIZED(Int)

      public init() {
        self = .genericChange
      }

      public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .genericChange
        case 1: self = .settings
        case 2: self = .productAdd
        case 3: self = .productChange
        case 4: self = .productDelete
        default: self = .UNRECOGNIZED(rawValue)
        }
      }

      public var rawValue: Int {
        switch self {
        case .genericChange: return 0
        case .settings: return 1
        case .productAdd: return 2
        case .productChange: return 3
        case .productDelete: return 4
        case .UNRECOGNIZED(let i): return i
        }
      }

    }

    /// Describes the product that was changed, and how it was changed, depending on the configuration passed into the
    /// stream request. If only product keys are requested, only product keys are returned.
    public struct ProductChange {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Payload for this individual product that was changed, and emitted, over a menu change stream. The property
      /// selected here to indicate the underlying product is governed by request settings.
      public var payload: OneOf_Payload? {
        get {return _storage._payload}
        set {_uniqueStorage()._payload = newValue}
      }

      /// Specifies a product by its key, which uniquely addresses it within a given partnership scope.
      public var key: Opencannabis_Base_ProductKey {
        get {
          if case .key(let v)? = _storage._payload {return v}
          return Opencannabis_Base_ProductKey()
        }
        set {_uniqueStorage()._payload = .key(newValue)}
      }

      /// Specifies product data, either in full (if requested in settings), or as a delta (if keys only was not
      /// requested in settings).
      public var product: Opencannabis_Products_Menu_MenuProduct {
        get {
          if case .product(let v)? = _storage._payload {return v}
          return Opencannabis_Products_Menu_MenuProduct()
        }
        set {_uniqueStorage()._payload = .product(newValue)}
      }

      /// Field mask describing the properties that were touched or otherwise mutated in the specified change payload.
      public var mask: SwiftProtobuf.Google_Protobuf_FieldMask {
        get {return _storage._mask ?? SwiftProtobuf.Google_Protobuf_FieldMask()}
        set {_uniqueStorage()._mask = newValue}
      }
      /// Returns true if `mask` has been explicitly set.
      public var hasMask: Bool {return _storage._mask != nil}
      /// Clears the value of `mask`. Subsequent reads from it will return its default value.
      public mutating func clearMask() {_uniqueStorage()._mask = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Payload for this individual product that was changed, and emitted, over a menu change stream. The property
      /// selected here to indicate the underlying product is governed by request settings.
      public enum OneOf_Payload: Equatable {
        /// Specifies a product by its key, which uniquely addresses it within a given partnership scope.
        case key(Opencannabis_Base_ProductKey)
        /// Specifies product data, either in full (if requested in settings), or as a delta (if keys only was not
        /// requested in settings).
        case product(Opencannabis_Products_Menu_MenuProduct)

      #if !swift(>=4.1)
        public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange.OneOf_Payload, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange.OneOf_Payload) -> Bool {
          switch (lhs, rhs) {
          case (.key(let l), .key(let r)): return l == r
          case (.product(let l), .product(let r)): return l == r
          default: return false
          }
        }
      #endif
      }

      public init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    /// Describes a change occurring in the menu catalog system, which is being communicated out to listening clients, on
    /// a live menu change stream.
    public struct MenuDeltaEntry {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Specifies the type of change being communicated.
      public var type: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ChangeType = .genericChange

      /// Sections mentioned in this delta payload. Left unset for full catalog responses.
      public var section: [Opencannabis_Products_Menu_Section_Section] = []

      /// List of object that each specify either the key, or product payload, that changed in a given delta entry.
      public var change: [Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange] = []

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    /// Event that describes a set of changes to a given menu catalog, within a specified partnership/location scope. The
    /// changes communicated via this payload are deltas.
    public struct MenuChanges {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      /// Specifies the types of changes being communicated.
      public var type: [Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ChangeType] = []

      /// Sections mentioned in this entire delta payload. Specifies each section with changes, that might be considered
      /// "invalidated" in client-side caching.
      public var section: [Opencannabis_Products_Menu_Section_Section] = []

      /// Specifies delta entries, one for each type of change listed in `type`.
      public var entry: [Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuDeltaEntry] = []

      /// Count of changes that constitute this entire delta update. The count of changes across all delta entries should
      /// add up to this value.
      public var count: UInt32 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to retrieve the set of keys, if any, of products currently featured, for the whole menu
/// or a section thereof.
public struct Bloombox_Services_Menu_V1beta1_GetFeatured {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies an RPC request to retrieve featured product keys.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for the request.
    public var scope: String = String()

    /// Return keys-only. Should default to true in client library implementations.
    public var keysOnly: Bool = false

    /// Sections to include in the menu. If unspecified, include all sections.
    public var section: Opencannabis_Products_Menu_Section_Section = .unspecified

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies the response to a request to fetch keys of currently-featured menu items.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Featured items, listed in response to the submitted request.
    public var featured: [Opencannabis_Products_Menu_MenuProduct] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Specifies a set of keys.
public struct Bloombox_Services_Menu_V1beta1_ProductKeyset {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Specifies keys included in this key set.
  public var key: [Opencannabis_Base_ProductKey] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an RPC operation to retrieve menu product data via a reference to its key.
public struct Bloombox_Services_Menu_V1beta1_GetProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request for product data, returned or inflated from its key.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for the request.
    public var scope: String {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Product key to fetch.
    public var key: Opencannabis_Base_ProductKey {
      get {return _storage._key ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    /// Request a potentially-cached or forced-uncached copy of the specified product data.
    public var fresh: Bool {
      get {return _storage._fresh}
      set {_uniqueStorage()._fresh = newValue}
    }

    /// Fingerprint for an existing revision the client has on-hand. If no change has occurred since that revision, the
    /// server may indicate so.
    public var fingerprint: String {
      get {return _storage._fingerprint}
      set {_uniqueStorage()._fingerprint = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to retrieve a product data payload by its corresponding key.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Corresponding item for the keys that was requested, if found.
    public var product: [Opencannabis_Products_Menu_MenuProduct] = []

    /// Specify whether items in the response, or the whole response, was cached.
    public var cached: Bool = false

    /// Flag set when a request-given fingerprint still matches the underlying object data being requested, enabling the
    /// server to respond with a 304 Not Modified-style answer.
    public var unchanged: Bool = false

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Specifies an RPC operation, wherein a set of product data is returned in universal product catalog format, which uses
/// Comma Separated Values (CSV) in a particular arrangement to supply standards-compliant providers with basic product
/// information (including Facebook, Google, and others).
public struct Bloombox_Services_Menu_V1beta1_GetCatalog {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request for catalog information, to include the partner, location, and any automatic filters the invoking code
  /// desires to apply to products before returning them.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partner and location scope for the catalog request. Indicates the partner organization that owns the location for
    /// which we are fetching catalog data.
    public var scope: String = String()

    /// Only include featured products in the output of this response.
    public var featured: Bool = false

    /// Filter the menu by menu section. This flag can be specified multiple times, in which case it is interpreted to be
    /// joined between `AND` conjunctions, to produce an inclusive filter of products from all specified sections.
    public var section: [Opencannabis_Products_Menu_Section_Section] = []

    /// Consume the full menu, including products that are not currently available for sale (due to being out of stock,
    /// or not being moved into active inventory yet).
    public var full: Bool = false

    /// Specifies the source catalog provider, if known.
    public var provider: Bloombox_Services_Menu_V1beta1_CatalogProvider = .unspecifiedCatalogProvider

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Specifies an RPC operation to create a product.
public struct Bloombox_Services_Menu_V1beta1_CreateProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to create a new product record.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for this product creation operation.
    public var scope: String {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Item being created in this request.
    public var product: Opencannabis_Products_Menu_MenuProduct {
      get {return _storage._product ?? Opencannabis_Products_Menu_MenuProduct()}
      set {_uniqueStorage()._product = newValue}
    }
    /// Returns true if `product` has been explicitly set.
    public var hasProduct: Bool {return _storage._product != nil}
    /// Clears the value of `product`. Subsequent reads from it will return its default value.
    public mutating func clearProduct() {_uniqueStorage()._product = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a response to a request to create a new product record.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Resulting product key.
    public var key: Opencannabis_Base_ProductKey {
      get {return _storage._key ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to update product data by key.
public struct Bloombox_Services_Menu_V1beta1_UpdateProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to update product data, addressed by its key.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for this product update operation.
    public var scope: String {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Key for the item being updated.
    public var product: Opencannabis_Products_Menu_MenuProduct {
      get {return _storage._product ?? Opencannabis_Products_Menu_MenuProduct()}
      set {_uniqueStorage()._product = newValue}
    }
    /// Returns true if `product` has been explicitly set.
    public var hasProduct: Bool {return _storage._product != nil}
    /// Clears the value of `product`. Subsequent reads from it will return its default value.
    public mutating func clearProduct() {_uniqueStorage()._product = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to search menu catalog data and return matching product results.
public struct Bloombox_Services_Menu_V1beta1_SearchMenu {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to search product catalog data.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Manifest describing desired search parameters, including search terms.
    public var search: Bloombox_Search_SearchSpec {
      get {return _storage._search ?? Bloombox_Search_SearchSpec()}
      set {_uniqueStorage()._search = newValue}
    }
    /// Returns true if `search` has been explicitly set.
    public var hasSearch: Bool {return _storage._search != nil}
    /// Clears the value of `search`. Subsequent reads from it will return its default value.
    public mutating func clearSearch() {_uniqueStorage()._search = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request to search product catalog data.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Corresponding items for each of the keys that matched the specified query.
    public var resulset: Bloombox_Search_SearchResultset {
      get {return _storage._resulset ?? Bloombox_Search_SearchResultset()}
      set {_uniqueStorage()._resulset = newValue}
    }
    /// Returns true if `resulset` has been explicitly set.
    public var hasResulset: Bool {return _storage._resulset != nil}
    /// Clears the value of `resulset`. Subsequent reads from it will return its default value.
    public mutating func clearResulset() {_uniqueStorage()._resulset = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to modify product stock status, either marking it as in-stock (currently offered for
/// purchase), or out-of-stock (not currently offered for purchase).
public struct Bloombox_Services_Menu_V1beta1_ProductStock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request to change an individual product's stock status.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for this product stock update operation.
    public var scope: String {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Specifies keys included in this key set.
    public var product: Opencannabis_Base_ProductKey {
      get {return _storage._product ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._product = newValue}
    }
    /// Returns true if `product` has been explicitly set.
    public var hasProduct: Bool {return _storage._product != nil}
    /// Clears the value of `product`. Subsequent reads from it will return its default value.
    public mutating func clearProduct() {_uniqueStorage()._product = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies the stock status for an individual product.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether the item is in stock. `True` if so.
    public var inStock: Bool = false

    /// Number of this item that this location has on-hand, if known.
    public var onHand: UInt32 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

/// Specifies an RPC operation to mark a product as deleted, by its key.
public struct Bloombox_Services_Menu_V1beta1_DeleteProduct {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to mark a product as deleted.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Partnership scope for this product delete operation.
    public var scope: String {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Key for the item being deleted.
    public var product: Opencannabis_Base_ProductKey {
      get {return _storage._product ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._product = newValue}
    }
    /// Returns true if `product` has been explicitly set.
    public var hasProduct: Bool {return _storage._product != nil}
    /// Clears the value of `product`. Subsequent reads from it will return its default value.
    public mutating func clearProduct() {_uniqueStorage()._product = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.services.menu.v1beta1"

extension Bloombox_Services_Menu_V1beta1_MenuError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "PARTNER_INVALID"),
    2: .same(proto: "LOCATION_INVALID"),
    3: .same(proto: "SECTION_INVALID"),
    4: .same(proto: "SECTION_NOT_FOUND"),
    5: .same(proto: "MENU_NOT_FOUND"),
    6: .same(proto: "SEARCH_UNAVAILABLE"),
    7: .same(proto: "PRODUCT_NOT_FOUND"),
    8: .same(proto: "ACCESS_DENIED"),
    9: .same(proto: "KEY_INVALID"),
    10: .same(proto: "UPDATE_INVALID"),
    11: .same(proto: "CONFLICT"),
    99: .same(proto: "INTERNAL_ERROR"),
  ]
}

extension Bloombox_Services_Menu_V1beta1_CatalogProvider: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNSPECIFIED_CATALOG_PROVIDER"),
    1: .same(proto: "GOOGLE"),
    2: .same(proto: "FACEBOOK"),
  ]
}

extension Bloombox_Services_Menu_V1beta1_Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ping"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_Ping, rhs: Bloombox_Services_Menu_V1beta1_Ping) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_Ping.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_Ping.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_Ping.Request, rhs: Bloombox_Services_Menu_V1beta1_Ping.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_Ping.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_Ping.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_Ping.Response, rhs: Bloombox_Services_Menu_V1beta1_Ping.Response) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetMenu"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu, rhs: Bloombox_Services_Menu_V1beta1_GetMenu) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetMenu.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "full"),
    3: .standard(proto: "keys_only"),
    4: .same(proto: "snapshot"),
    5: .same(proto: "fingerprint"),
    6: .same(proto: "section"),
    7: .same(proto: "fresh"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.scope)
      case 2: try decoder.decodeSingularBoolField(value: &self.full)
      case 3: try decoder.decodeSingularBoolField(value: &self.keysOnly)
      case 4: try decoder.decodeSingularStringField(value: &self.snapshot)
      case 5: try decoder.decodeSingularStringField(value: &self.fingerprint)
      case 6: try decoder.decodeSingularEnumField(value: &self.section)
      case 7: try decoder.decodeSingularBoolField(value: &self.fresh)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 1)
    }
    if self.full != false {
      try visitor.visitSingularBoolField(value: self.full, fieldNumber: 2)
    }
    if self.keysOnly != false {
      try visitor.visitSingularBoolField(value: self.keysOnly, fieldNumber: 3)
    }
    if !self.snapshot.isEmpty {
      try visitor.visitSingularStringField(value: self.snapshot, fieldNumber: 4)
    }
    if !self.fingerprint.isEmpty {
      try visitor.visitSingularStringField(value: self.fingerprint, fieldNumber: 5)
    }
    if self.section != .unspecified {
      try visitor.visitSingularEnumField(value: self.section, fieldNumber: 6)
    }
    if self.fresh != false {
      try visitor.visitSingularBoolField(value: self.fresh, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.Request, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.Request) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.full != rhs.full {return false}
    if lhs.keysOnly != rhs.keysOnly {return false}
    if lhs.snapshot != rhs.snapshot {return false}
    if lhs.fingerprint != rhs.fingerprint {return false}
    if lhs.section != rhs.section {return false}
    if lhs.fresh != rhs.fresh {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetMenu.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "catalog"),
    2: .same(proto: "cached"),
  ]

  fileprivate class _StorageClass {
    var _catalog: Opencannabis_Products_Menu_Menu? = nil
    var _cached: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _catalog = source._catalog
      _cached = source._cached
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._catalog)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._cached)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._catalog {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._cached != false {
        try visitor.visitSingularBoolField(value: _storage._cached, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.Response, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._catalog != rhs_storage._catalog {return false}
        if _storage._cached != rhs_storage._cached {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetMenu.protoMessageName + ".StreamEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "fingerprint"),
    2: .same(proto: "modified"),
    10: .same(proto: "catalog"),
    11: .same(proto: "delta"),
  ]

  fileprivate class _StorageClass {
    var _fingerprint: String = String()
    var _modified: Opencannabis_Temporal_Instant? = nil
    var _payload: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.OneOf_Payload?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _fingerprint = source._fingerprint
      _modified = source._modified
      _payload = source._payload
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._fingerprint)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._modified)
        case 10:
          var v: Opencannabis_Products_Menu_Menu?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .catalog(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .catalog(v)}
        case 11:
          var v: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .delta(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .delta(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._fingerprint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fingerprint, fieldNumber: 1)
      }
      if let v = _storage._modified {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._payload {
      case .catalog(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .delta(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._fingerprint != rhs_storage._fingerprint {return false}
        if _storage._modified != rhs_storage._modified {return false}
        if _storage._payload != rhs_storage._payload {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ChangeType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERIC_CHANGE"),
    1: .same(proto: "SETTINGS"),
    2: .same(proto: "PRODUCT_ADD"),
    3: .same(proto: "PRODUCT_CHANGE"),
    4: .same(proto: "PRODUCT_DELETE"),
  ]
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.protoMessageName + ".ProductChange"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "product"),
    3: .same(proto: "mask"),
  ]

  fileprivate class _StorageClass {
    var _payload: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange.OneOf_Payload?
    var _mask: SwiftProtobuf.Google_Protobuf_FieldMask? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _payload = source._payload
      _mask = source._mask
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Opencannabis_Base_ProductKey?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .key(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .key(v)}
        case 2:
          var v: Opencannabis_Products_Menu_MenuProduct?
          if let current = _storage._payload {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._payload = .product(v)}
        case 3: try decoder.decodeSingularMessageField(value: &_storage._mask)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._payload {
      case .key(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
      if let v = _storage._mask {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.ProductChange) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._payload != rhs_storage._payload {return false}
        if _storage._mask != rhs_storage._mask {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuDeltaEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.protoMessageName + ".MenuDeltaEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "section"),
    3: .same(proto: "change"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.type)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.section)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.change)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .genericChange {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.section.isEmpty {
      try visitor.visitPackedEnumField(value: self.section, fieldNumber: 2)
    }
    if !self.change.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.change, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuDeltaEntry, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuDeltaEntry) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.section != rhs.section {return false}
    if lhs.change != rhs.change {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.protoMessageName + ".MenuChanges"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "section"),
    3: .same(proto: "entry"),
    4: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedEnumField(value: &self.type)
      case 2: try decoder.decodeRepeatedEnumField(value: &self.section)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.entry)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitPackedEnumField(value: self.type, fieldNumber: 1)
    }
    if !self.section.isEmpty {
      try visitor.visitPackedEnumField(value: self.section, fieldNumber: 2)
    }
    if !self.entry.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entry, fieldNumber: 3)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges, rhs: Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent.MenuChanges) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.section != rhs.section {return false}
    if lhs.entry != rhs.entry {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetFeatured: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFeatured"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetFeatured, rhs: Bloombox_Services_Menu_V1beta1_GetFeatured) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetFeatured.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetFeatured.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .standard(proto: "keys_only"),
    3: .same(proto: "section"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.scope)
      case 2: try decoder.decodeSingularBoolField(value: &self.keysOnly)
      case 3: try decoder.decodeSingularEnumField(value: &self.section)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 1)
    }
    if self.keysOnly != false {
      try visitor.visitSingularBoolField(value: self.keysOnly, fieldNumber: 2)
    }
    if self.section != .unspecified {
      try visitor.visitSingularEnumField(value: self.section, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetFeatured.Request, rhs: Bloombox_Services_Menu_V1beta1_GetFeatured.Request) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.keysOnly != rhs.keysOnly {return false}
    if lhs.section != rhs.section {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetFeatured.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetFeatured.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "featured"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.featured)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.featured.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featured, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetFeatured.Response, rhs: Bloombox_Services_Menu_V1beta1_GetFeatured.Response) -> Bool {
    if lhs.featured != rhs.featured {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_ProductKeyset: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductKeyset"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.key)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.key, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_ProductKeyset, rhs: Bloombox_Services_Menu_V1beta1_ProductKeyset) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetProduct"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetProduct, rhs: Bloombox_Services_Menu_V1beta1_GetProduct) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetProduct.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetProduct.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "key"),
    3: .same(proto: "fresh"),
    4: .same(proto: "fingerprint"),
  ]

  fileprivate class _StorageClass {
    var _scope: String = String()
    var _key: Opencannabis_Base_ProductKey? = nil
    var _fresh: Bool = false
    var _fingerprint: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
      _key = source._key
      _fresh = source._fresh
      _fingerprint = source._fingerprint
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._scope)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._fresh)
        case 4: try decoder.decodeSingularStringField(value: &_storage._fingerprint)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 1)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._fresh != false {
        try visitor.visitSingularBoolField(value: _storage._fresh, fieldNumber: 3)
      }
      if !_storage._fingerprint.isEmpty {
        try visitor.visitSingularStringField(value: _storage._fingerprint, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetProduct.Request, rhs: Bloombox_Services_Menu_V1beta1_GetProduct.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._fresh != rhs_storage._fresh {return false}
        if _storage._fingerprint != rhs_storage._fingerprint {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetProduct.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetProduct.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "product"),
    2: .same(proto: "cached"),
    3: .same(proto: "unchanged"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.product)
      case 2: try decoder.decodeSingularBoolField(value: &self.cached)
      case 3: try decoder.decodeSingularBoolField(value: &self.unchanged)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.product.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.product, fieldNumber: 1)
    }
    if self.cached != false {
      try visitor.visitSingularBoolField(value: self.cached, fieldNumber: 2)
    }
    if self.unchanged != false {
      try visitor.visitSingularBoolField(value: self.unchanged, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetProduct.Response, rhs: Bloombox_Services_Menu_V1beta1_GetProduct.Response) -> Bool {
    if lhs.product != rhs.product {return false}
    if lhs.cached != rhs.cached {return false}
    if lhs.unchanged != rhs.unchanged {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetCatalog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetCatalog"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetCatalog, rhs: Bloombox_Services_Menu_V1beta1_GetCatalog) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_GetCatalog.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_GetCatalog.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "featured"),
    3: .same(proto: "section"),
    4: .same(proto: "full"),
    5: .same(proto: "provider"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.scope)
      case 2: try decoder.decodeSingularBoolField(value: &self.featured)
      case 3: try decoder.decodeRepeatedEnumField(value: &self.section)
      case 4: try decoder.decodeSingularBoolField(value: &self.full)
      case 5: try decoder.decodeSingularEnumField(value: &self.provider)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.scope.isEmpty {
      try visitor.visitSingularStringField(value: self.scope, fieldNumber: 1)
    }
    if self.featured != false {
      try visitor.visitSingularBoolField(value: self.featured, fieldNumber: 2)
    }
    if !self.section.isEmpty {
      try visitor.visitPackedEnumField(value: self.section, fieldNumber: 3)
    }
    if self.full != false {
      try visitor.visitSingularBoolField(value: self.full, fieldNumber: 4)
    }
    if self.provider != .unspecifiedCatalogProvider {
      try visitor.visitSingularEnumField(value: self.provider, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_GetCatalog.Request, rhs: Bloombox_Services_Menu_V1beta1_GetCatalog.Request) -> Bool {
    if lhs.scope != rhs.scope {return false}
    if lhs.featured != rhs.featured {return false}
    if lhs.section != rhs.section {return false}
    if lhs.full != rhs.full {return false}
    if lhs.provider != rhs.provider {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_CreateProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreateProduct"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_CreateProduct, rhs: Bloombox_Services_Menu_V1beta1_CreateProduct) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_CreateProduct.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_CreateProduct.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "product"),
  ]

  fileprivate class _StorageClass {
    var _scope: String = String()
    var _product: Opencannabis_Products_Menu_MenuProduct? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
      _product = source._product
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._scope)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._product)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 1)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_CreateProduct.Request, rhs: Bloombox_Services_Menu_V1beta1_CreateProduct.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._product != rhs_storage._product {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_CreateProduct.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_CreateProduct.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
  ]

  fileprivate class _StorageClass {
    var _key: Opencannabis_Base_ProductKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._key)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_CreateProduct.Response, rhs: Bloombox_Services_Menu_V1beta1_CreateProduct.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_UpdateProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UpdateProduct"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_UpdateProduct, rhs: Bloombox_Services_Menu_V1beta1_UpdateProduct) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_UpdateProduct.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_UpdateProduct.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "product"),
  ]

  fileprivate class _StorageClass {
    var _scope: String = String()
    var _product: Opencannabis_Products_Menu_MenuProduct? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
      _product = source._product
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._scope)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._product)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 1)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_UpdateProduct.Request, rhs: Bloombox_Services_Menu_V1beta1_UpdateProduct.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._product != rhs_storage._product {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_SearchMenu: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchMenu"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_SearchMenu, rhs: Bloombox_Services_Menu_V1beta1_SearchMenu) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_SearchMenu.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_SearchMenu.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "search"),
  ]

  fileprivate class _StorageClass {
    var _search: Bloombox_Search_SearchSpec? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _search = source._search
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._search)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._search {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_SearchMenu.Request, rhs: Bloombox_Services_Menu_V1beta1_SearchMenu.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._search != rhs_storage._search {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_SearchMenu.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_SearchMenu.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "resulset"),
  ]

  fileprivate class _StorageClass {
    var _resulset: Bloombox_Search_SearchResultset? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _resulset = source._resulset
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._resulset)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._resulset {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_SearchMenu.Response, rhs: Bloombox_Services_Menu_V1beta1_SearchMenu.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._resulset != rhs_storage._resulset {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_ProductStock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductStock"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_ProductStock, rhs: Bloombox_Services_Menu_V1beta1_ProductStock) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_ProductStock.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_ProductStock.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "product"),
  ]

  fileprivate class _StorageClass {
    var _scope: String = String()
    var _product: Opencannabis_Base_ProductKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
      _product = source._product
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._scope)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._product)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 1)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_ProductStock.Request, rhs: Bloombox_Services_Menu_V1beta1_ProductStock.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._product != rhs_storage._product {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_ProductStock.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_ProductStock.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "in_stock"),
    2: .standard(proto: "on_hand"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.inStock)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.onHand)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.inStock != false {
      try visitor.visitSingularBoolField(value: self.inStock, fieldNumber: 1)
    }
    if self.onHand != 0 {
      try visitor.visitSingularUInt32Field(value: self.onHand, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_ProductStock.Response, rhs: Bloombox_Services_Menu_V1beta1_ProductStock.Response) -> Bool {
    if lhs.inStock != rhs.inStock {return false}
    if lhs.onHand != rhs.onHand {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_DeleteProduct: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteProduct"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_DeleteProduct, rhs: Bloombox_Services_Menu_V1beta1_DeleteProduct) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Menu_V1beta1_DeleteProduct.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Menu_V1beta1_DeleteProduct.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "scope"),
    2: .same(proto: "product"),
  ]

  fileprivate class _StorageClass {
    var _scope: String = String()
    var _product: Opencannabis_Base_ProductKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
      _product = source._product
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._scope)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._product)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._scope.isEmpty {
        try visitor.visitSingularStringField(value: _storage._scope, fieldNumber: 1)
      }
      if let v = _storage._product {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Menu_V1beta1_DeleteProduct.Request, rhs: Bloombox_Services_Menu_V1beta1_DeleteProduct.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scope != rhs_storage._scope {return false}
        if _storage._product != rhs_storage._product {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
