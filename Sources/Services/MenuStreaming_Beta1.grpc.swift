//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: menu/v1beta1/MenuStreaming_Beta1.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import OpenCannabis
import Foundation
import SwiftGRPC
import SwiftProtobuf

public protocol Bloombox_Services_Menu_V1beta1_MenuStreamLiveCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent?>) -> Void) throws
}

public extension Bloombox_Services_Menu_V1beta1_MenuStreamLiveCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent? { return try self._receive(timeout: timeout) }
}

fileprivate final class Bloombox_Services_Menu_V1beta1_MenuStreamLiveCallBase: ClientCallServerStreamingBase<Bloombox_Services_Menu_V1beta1_GetMenu.Request, Bloombox_Services_Menu_V1beta1_GetMenu.StreamEvent>, Bloombox_Services_Menu_V1beta1_MenuStreamLiveCall {
  override class var method: String { return "/bloombox.services.menu.v1beta1.MenuStream/Live" }
}


/// Instantiate Bloombox_Services_Menu_V1beta1_MenuStreamServiceClient, then call methods of this protocol to make API calls.
public protocol Bloombox_Services_Menu_V1beta1_MenuStreamService: ServiceClient {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func live(_ request: Bloombox_Services_Menu_V1beta1_GetMenu.Request, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Bloombox_Services_Menu_V1beta1_MenuStreamLiveCall

}

public extension Bloombox_Services_Menu_V1beta1_MenuStreamService {
  /// Asynchronous. Server-streaming.
  func live(_ request: Bloombox_Services_Menu_V1beta1_GetMenu.Request, completion: ((CallResult) -> Void)?) throws -> Bloombox_Services_Menu_V1beta1_MenuStreamLiveCall {
    return try self.live(request, metadata: self.metadata, completion: completion)
  }

}

public final class Bloombox_Services_Menu_V1beta1_MenuStreamServiceClient: ServiceClientBase, Bloombox_Services_Menu_V1beta1_MenuStreamService {
  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  public func live(_ request: Bloombox_Services_Menu_V1beta1_GetMenu.Request, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Bloombox_Services_Menu_V1beta1_MenuStreamLiveCall {
    return try Bloombox_Services_Menu_V1beta1_MenuStreamLiveCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

