// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: telemetry/v1beta4/TelemetryService_Beta4.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Provides the Telemetry API, which accepts arbitrary event payloads and records them as telemetry data. Various forms
/// of specialized telemetry data may be sent, such as error or payloads. User conversion and interest events are
/// also enumerated explicitly for easier analytics calculations and more efficient event transmission.

import Foundation
import OpenCannabis
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Specifies status codes that a response may provide.
public enum Bloombox_Services_Telemetry_V1beta4_OperationStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// Everything went well.
  case ok // = 0

  /// An error of some kind occurred.
  case error // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .ok
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ok
    case 1: self = .error
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ok: return 0
    case .error: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Telemetry_V1beta4_OperationStatus: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Telemetry_V1beta4_OperationStatus] = [
    .ok,
    .error,
  ]
}

#endif  // swift(>=4.2)

/// Specifies known errors that may be emitted in exceptional processing cases.
public enum Bloombox_Services_Telemetry_V1beta4_TelemetryError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// An unknown internal error occurred.
  case unknown // = 0

  /// The collection value was missing or found to be invalid.
  case invalidCollection // = 1

  /// The partner code was missing or found to be invalid.
  case invalidPartner // = 2

  /// The location code was missing or found to be invalid.
  case invalidLocation // = 3

  /// The device key was missing or found to be invalid.
  case invalidDevice // = 4

  /// The user key or ID was missing or found to be invalid.
  case invalidUser // = 5

  /// The client key or ID was missing or found to be invalid.
  case invalidClient // = 6

  /// The specified partner could not be found.
  case partnerNotFound // = 7

  /// The specified location could not be found.
  case locationNotFound // = 8

  /// The request payload was invalid in some manner.
  case invalidPayload // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .invalidCollection
    case 2: self = .invalidPartner
    case 3: self = .invalidLocation
    case 4: self = .invalidDevice
    case 5: self = .invalidUser
    case 6: self = .invalidClient
    case 7: self = .partnerNotFound
    case 8: self = .locationNotFound
    case 99: self = .invalidPayload
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .invalidCollection: return 1
    case .invalidPartner: return 2
    case .invalidLocation: return 3
    case .invalidDevice: return 4
    case .invalidUser: return 5
    case .invalidClient: return 6
    case .partnerNotFound: return 7
    case .locationNotFound: return 8
    case .invalidPayload: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Telemetry_V1beta4_TelemetryError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Telemetry_V1beta4_TelemetryError] = [
    .unknown,
    .invalidCollection,
    .invalidPartner,
    .invalidLocation,
    .invalidDevice,
    .invalidUser,
    .invalidClient,
    .partnerNotFound,
    .locationNotFound,
    .invalidPayload,
  ]
}

#endif  // swift(>=4.2)

/// Specifies a response to a request to submit telemetry data.
public struct Bloombox_Services_Telemetry_V1beta4_TelemetryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Status of the operation.
  public var status: Bloombox_Services_Telemetry_V1beta4_OperationStatus = .ok

  /// Count of events submitted.
  public var count: UInt32 = 0

  /// Service maintenance status, if applicable.
  public var service: Bloombox_Services_ServiceStatus = .unknown

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Specifies an RPC operation to retrieve status information for the telemetry service.
public struct Bloombox_Services_Telemetry_V1beta4_TelemetryPing {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies a request to ping the service.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies a response to a service ping.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current service status.
    public var status: Bloombox_Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies an entire ping operation.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for service status.
    public var request: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request {
      get {return _storage._request ?? Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request for service status.
    public var response: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response {
      get {return _storage._response ?? Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an event related to commercial services. This includes product events, section events, and order events.
public struct Bloombox_Services_Telemetry_V1beta4_CommercialEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Specifies an impression-type event.
  public struct Impression {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Event being reported in this transaction.
    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// Impression event on a menu section.
    public var section: Bloombox_Analytics_Section_Impression {
      get {
        if case .section(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Section_Impression()
      }
      set {_uniqueStorage()._event = .section(newValue)}
    }

    /// Impression event on a menu product.
    public var product: Bloombox_Analytics_Product_Impression {
      get {
        if case .product(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Product_Impression()
      }
      set {_uniqueStorage()._event = .product(newValue)}
    }

    /// Impression event for a commercial shop.
    public var shop: Bloombox_Analytics_Shop_Impression {
      get {
        if case .shop(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Shop_Impression()
      }
      set {_uniqueStorage()._event = .shop(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Event being reported in this transaction.
    public enum OneOf_Event: Equatable {
      /// Impression event on a menu section.
      case section(Bloombox_Analytics_Section_Impression)
      /// Impression event on a menu product.
      case product(Bloombox_Analytics_Product_Impression)
      /// Impression event for a commercial shop.
      case shop(Bloombox_Analytics_Shop_Impression)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.section(let l), .section(let r)): return l == r
        case (.product(let l), .product(let r)): return l == r
        case (.shop(let l), .shop(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies a view-type event.
  public struct View {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Event being reported in this transaction.
    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// View event on a menu section.
    public var section: Bloombox_Analytics_Section_View {
      get {
        if case .section(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Section_View()
      }
      set {_uniqueStorage()._event = .section(newValue)}
    }

    /// View event on a menu product.
    public var product: Bloombox_Analytics_Product_View {
      get {
        if case .product(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Product_View()
      }
      set {_uniqueStorage()._event = .product(newValue)}
    }

    /// View event for a commercial shop.
    public var shop: Bloombox_Analytics_Shop_View {
      get {
        if case .shop(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Shop_View()
      }
      set {_uniqueStorage()._event = .shop(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Event being reported in this transaction.
    public enum OneOf_Event: Equatable {
      /// View event on a menu section.
      case section(Bloombox_Analytics_Section_View)
      /// View event on a menu product.
      case product(Bloombox_Analytics_Product_View)
      /// View event for a commercial shop.
      case shop(Bloombox_Analytics_Shop_View)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.section(let l), .section(let r)): return l == r
        case (.product(let l), .product(let r)): return l == r
        case (.shop(let l), .shop(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an action-type event.
  public struct Action {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name for the action being transmitted. This is the string enum name for whatever event type is in use.
    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Event being reported in this transaction.
    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// Action event on a menu section.
    public var section: Bloombox_Analytics_Section_Action {
      get {
        if case .section(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Section_Action()
      }
      set {_uniqueStorage()._event = .section(newValue)}
    }

    /// Action event on a menu product.
    public var product: Bloombox_Analytics_Product_Action {
      get {
        if case .product(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Product_Action()
      }
      set {_uniqueStorage()._event = .product(newValue)}
    }

    /// Action event for a commercial shop.
    public var shop: Bloombox_Analytics_Shop_Action {
      get {
        if case .shop(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Shop_Action()
      }
      set {_uniqueStorage()._event = .shop(newValue)}
    }

    /// Action event on a user order.
    public var order: Bloombox_Analytics_Order_Action {
      get {
        if case .order(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Order_Action()
      }
      set {_uniqueStorage()._event = .order(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Event being reported in this transaction.
    public enum OneOf_Event: Equatable {
      /// Action event on a menu section.
      case section(Bloombox_Analytics_Section_Action)
      /// Action event on a menu product.
      case product(Bloombox_Analytics_Product_Action)
      /// Action event for a commercial shop.
      case shop(Bloombox_Analytics_Shop_Action)
      /// Action event on a user order.
      case order(Bloombox_Analytics_Order_Action)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.section(let l), .section(let r)): return l == r
        case (.product(let l), .product(let r)): return l == r
        case (.shop(let l), .shop(let r)): return l == r
        case (.order(let l), .order(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an event related to a user's identity, account, preferences, or otherwise having some concern with the
/// addressability, authentication, and relevance of a user's experience with Bloombox.
public struct Bloombox_Services_Telemetry_V1beta4_IdentityEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Action taken by or on a user.
  public struct Action {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Name of the action we are reporting.
    public var name: String {
      get {return _storage._name}
      set {_uniqueStorage()._name = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    public var event: OneOf_Event? {
      get {return _storage._event}
      set {_uniqueStorage()._event = newValue}
    }

    /// Action taken by or on a user.
    public var action: Bloombox_Analytics_Identity_Action {
      get {
        if case .action(let v)? = _storage._event {return v}
        return Bloombox_Analytics_Identity_Action()
      }
      set {_uniqueStorage()._event = .action(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Event: Equatable {
      /// Action taken by or on a user.
      case action(Bloombox_Analytics_Identity_Action)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action.OneOf_Event) -> Bool {
        switch (lhs, rhs) {
        case (.action(let l), .action(let r)): return l == r
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies events that deal with user-submitted searches, including the query itself, the resultset, and any response
/// the user makes based upon that resultset.
public struct Bloombox_Services_Telemetry_V1beta4_SearchEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Event constituting a fulltext search submitted by an end user.
  public struct Query {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Term string for the search, encoded in Base64.
    public var term: String {
      get {return _storage._term}
      set {_uniqueStorage()._term = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Digital property from which this search originated.
    public var property: Bloombox_Analytics_Search_SearchProperty {
      get {return _storage._property}
      set {_uniqueStorage()._property = newValue}
    }

    /// Number of results.
    public var totalResults: UInt32 {
      get {return _storage._totalResults}
      set {_uniqueStorage()._totalResults = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Result selection event by a user, after performing a search.
  public struct Result {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Term string for the search, encoded in Base64.
    public var term: String {
      get {return _storage._term}
      set {_uniqueStorage()._term = newValue}
    }

    /// Event context to specify for this event.
    public var context: Bloombox_Analytics_Context {
      get {return _storage._context ?? Bloombox_Analytics_Context()}
      set {_uniqueStorage()._context = newValue}
    }
    /// Returns true if `context` has been explicitly set.
    public var hasContext: Bool {return _storage._context != nil}
    /// Clears the value of `context`. Subsequent reads from it will return its default value.
    public mutating func clearContext() {_uniqueStorage()._context = nil}

    /// Digital property from which this search originated.
    public var property: Bloombox_Analytics_Search_SearchProperty {
      get {return _storage._property}
      set {_uniqueStorage()._property = newValue}
    }

    /// Number of results.
    public var totalResults: UInt32 {
      get {return _storage._totalResults}
      set {_uniqueStorage()._totalResults = newValue}
    }

    /// Index of the tapped result in the set.
    public var selectedResult: UInt32 {
      get {return _storage._selectedResult}
      set {_uniqueStorage()._selectedResult = newValue}
    }

    /// Product key that was selected as a result of this tap.
    public var key: Opencannabis_Base_ProductKey {
      get {return _storage._key ?? Opencannabis_Base_ProductKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Defines contextual information for inventory telemetry events, which describe observations from on-site devices (i.e.
/// RFID and BCR traffic) or receive notifications from managed devices about stock changes (intake events, update
/// events, transfer events, and consumption events).
public struct Bloombox_Services_Telemetry_V1beta4_InventoryContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Timing of this event, or, the position of this event in temporal space.
  public var timing: Bloombox_Analytics_EventPosition {
    get {return _storage._timing ?? Bloombox_Analytics_EventPosition()}
    set {_uniqueStorage()._timing = newValue}
  }
  /// Returns true if `timing` has been explicitly set.
  public var hasTiming: Bool {return _storage._timing != nil}
  /// Clears the value of `timing`. Subsequent reads from it will return its default value.
  public mutating func clearTiming() {_uniqueStorage()._timing = nil}

  /// Context of this event, including the scope and reporting node.
  public var context: Bloombox_Analytics_Context {
    get {return _storage._context ?? Bloombox_Analytics_Context()}
    set {_uniqueStorage()._context = newValue}
  }
  /// Returns true if `context` has been explicitly set.
  public var hasContext: Bool {return _storage._context != nil}
  /// Clears the value of `context`. Subsequent reads from it will return its default value.
  public mutating func clearContext() {_uniqueStorage()._context = nil}

  /// Cryptographic signature from the reporting managed device/node.
  public var signature: Opencannabis_Crypto_Signature {
    get {return _storage._signature ?? Opencannabis_Crypto_Signature()}
    set {_uniqueStorage()._signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  public var hasSignature: Bool {return _storage._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  public mutating func clearSignature() {_uniqueStorage()._signature = nil}

  /// Unique event transmission ID, generated by the client.
  public var uuid: String {
    get {return _storage._uuid}
    set {_uniqueStorage()._uuid = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an event triggered by some inventory condition observed in the physical on-site environment. This may be
/// readings reported by RFID or barcode readers, events from the point-of-sale system, and more.
public struct Bloombox_Services_Telemetry_V1beta4_InventoryEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Generic field that contains any kind of inventory event. When events move through the processing pipeline, they are
  /// wrapped in the outer object to facilitate generic access.
  public var event: OneOf_Event? {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  /// Describes an inventory event where certain tracking material was encountered by a reading check-point of some
  /// kind, usually RFID or BCR-based interactions.
  public var encounter: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter {
    get {
      if case .encounter(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter()
    }
    set {_uniqueStorage()._event = .encounter(newValue)}
  }

  /// Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
  /// proceeds from the intake phase, it is managed and tracked.
  public var intake: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake {
    get {
      if case .intake(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake()
    }
    set {_uniqueStorage()._event = .intake(newValue)}
  }

  /// Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
  /// licensure, location, and organizational boundaries.
  public var update: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate {
    get {
      if case .update(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate()
    }
    set {_uniqueStorage()._event = .update(newValue)}
  }

  /// Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
  /// legal (licensure), or organizational boundaries.
  public var transfer: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer {
    get {
      if case .transfer(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer()
    }
    set {_uniqueStorage()._event = .transfer(newValue)}
  }

  /// Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
  /// reservation or lease.
  public var reservation: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve {
    get {
      if case .reservation(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve()
    }
    set {_uniqueStorage()._event = .reservation(newValue)}
  }

  /// Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
  /// "StockReserve" can now be freed back into the supply chain ecosystem.
  public var cancellation: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel {
    get {
      if case .cancellation(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel()
    }
    set {_uniqueStorage()._event = .cancellation(newValue)}
  }

  /// Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
  /// the managed supply chain environment.
  public var consumption: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume {
    get {
      if case .consumption(let v)? = _storage._event {return v}
      return Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume()
    }
    set {_uniqueStorage()._event = .consumption(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Generic field that contains any kind of inventory event. When events move through the processing pipeline, they are
  /// wrapped in the outer object to facilitate generic access.
  public enum OneOf_Event: Equatable {
    /// Describes an inventory event where certain tracking material was encountered by a reading check-point of some
    /// kind, usually RFID or BCR-based interactions.
    case encounter(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter)
    /// Stock intake event, which describes product as it arrives into a managed supply chain context. Once product
    /// proceeds from the intake phase, it is managed and tracked.
    case intake(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake)
    /// Update-in-place event for a piece of tracked inventory or product. Updates of this nature occur within the same
    /// licensure, location, and organizational boundaries.
    case update(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate)
    /// Transfer transaction event, which indicates that product or tracked inventory was transferred across physical,
    /// legal (licensure), or organizational boundaries.
    case transfer(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer)
    /// Stock reservation event, which indicates that some portion of stock or managed inventory was requested for
    /// reservation or lease.
    case reservation(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve)
    /// Cancellation event, indicating that a piece of stock or managed inventory reserved via an earlier call to
    /// "StockReserve" can now be freed back into the supply chain ecosystem.
    case cancellation(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel)
    /// Consumption event, indicating that product was terminally destroyed or otherwise permanently left the custody of
    /// the managed supply chain environment.
    case consumption(Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume)

  #if !swift(>=4.1)
    public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.OneOf_Event, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.OneOf_Event) -> Bool {
      switch (lhs, rhs) {
      case (.encounter(let l), .encounter(let r)): return l == r
      case (.intake(let l), .intake(let r)): return l == r
      case (.update(let l), .update(let r)): return l == r
      case (.transfer(let l), .transfer(let r)): return l == r
      case (.reservation(let l), .reservation(let r)): return l == r
      case (.cancellation(let l), .cancellation(let r)): return l == r
      case (.consumption(let l), .consumption(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  /// Describes an encounter with tagged inventory items, from some automated system. Encounters can occur with RFID
  /// tags, 2D bar codes, and NFC tags. Any universal inventory key may be referenced via an inventory encounter.
  public struct Encounter {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Describes the origin of the tag report we are transmitting, including the reader device that produced it, and the
    /// partner/location scope assigned to the reader.
    public var origin: Opencannabis_Inventory_Rfid_TagReportOrigin {
      get {return _storage._origin ?? Opencannabis_Inventory_Rfid_TagReportOrigin()}
      set {_uniqueStorage()._origin = newValue}
    }
    /// Returns true if `origin` has been explicitly set.
    public var hasOrigin: Bool {return _storage._origin != nil}
    /// Clears the value of `origin`. Subsequent reads from it will return its default value.
    public mutating func clearOrigin() {_uniqueStorage()._origin = nil}

    /// Specifies the report of identified RFID tags from a given origin. RFID reports may be batched by an individual
    /// device within some configurable interval, which is also transmitted with the payload.
    public var rfid: [Opencannabis_Inventory_Rfid_TagReport] {
      get {return _storage._rfid}
      set {_uniqueStorage()._rfid = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Describes a stock intake event, where custody is taken over some package of material, that will be held on-hand for
  /// some amount of time. Inventory intake does not imply that a batch of product is fit-for-sale.
  public struct StockIntake {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID for this intake transaction.
    public var transaction: String {
      get {return _storage._transaction}
      set {_uniqueStorage()._transaction = newValue}
    }

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Specification of where this inventory is currently located, down to the exact point in the supply chain.
    public var inventory: [Opencannabis_Inventory_InventoryProduct] {
      get {return _storage._inventory}
      set {_uniqueStorage()._inventory = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Describes an update-in-place for a given item tracked in inventory. This may occur when an item is moved between
  /// locations within the scope of a single retail location - i.e., between rooms, shelves, and so on.
  public struct StockUpdate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID for this update transaction.
    public var transaction: String {
      get {return _storage._transaction}
      set {_uniqueStorage()._transaction = newValue}
    }

    /// ID for the transaction parent of this stock update.
    public var parent: String {
      get {return _storage._parent}
      set {_uniqueStorage()._parent = newValue}
    }

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Specification of where this inventory is currently located, down to the exact point in the supply chain.
    public var inventory: [Opencannabis_Inventory_InventoryProduct] {
      get {return _storage._inventory}
      set {_uniqueStorage()._inventory = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Describes a transfer of stock between licensed facilities. In order for inventory movements to qualify as full
  /// transfer transactions, they must either move across physical boundaries (between locations subject to licensure) or
  /// licensure or custody boundaries (between companies regardless of location).
  public struct StockTransfer {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID for this transfer transaction.
    public var transaction: String {
      get {return _storage._transaction}
      set {_uniqueStorage()._transaction = newValue}
    }

    /// ID for the transaction parent of this stock transfer.
    public var parent: String {
      get {return _storage._parent}
      set {_uniqueStorage()._parent = newValue}
    }

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Unique key, identifying the individual inventory item that is subject to transfer.
    public var key: Opencannabis_Inventory_InventoryKey {
      get {return _storage._key ?? Opencannabis_Inventory_InventoryKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    /// Coordinates for the inventory location where the product is transferring from.
    public var origin: Opencannabis_Inventory_InventoryLocation {
      get {return _storage._origin ?? Opencannabis_Inventory_InventoryLocation()}
      set {_uniqueStorage()._origin = newValue}
    }
    /// Returns true if `origin` has been explicitly set.
    public var hasOrigin: Bool {return _storage._origin != nil}
    /// Clears the value of `origin`. Subsequent reads from it will return its default value.
    public mutating func clearOrigin() {_uniqueStorage()._origin = nil}

    /// Coordinates for the inventory location where the product is transferring to.
    public var target: Opencannabis_Inventory_InventoryLocation {
      get {return _storage._target ?? Opencannabis_Inventory_InventoryLocation()}
      set {_uniqueStorage()._target = newValue}
    }
    /// Returns true if `target` has been explicitly set.
    public var hasTarget: Bool {return _storage._target != nil}
    /// Clears the value of `target`. Subsequent reads from it will return its default value.
    public mutating func clearTarget() {_uniqueStorage()._target = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Requests a reservation of some piece or amount of tracked inventory. In this case, if the system can fulfill the
  /// reservation amount, the stock may be set aside or "reserved" for some portion of time, with the expectation that
  /// the stock be untouched or frozen-in-place in the supply chain until it is claimed or the lease time expires.
  public struct StockReserve {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID for this reservation transaction.
    public var transaction: String {
      get {return _storage._transaction}
      set {_uniqueStorage()._transaction = newValue}
    }

    /// ID for the transaction parent of this stock reservation.
    public var parent: String {
      get {return _storage._parent}
      set {_uniqueStorage()._parent = newValue}
    }

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Unique key, identifying the individual inventory item that is subject to this reservation.
    public var key: Opencannabis_Inventory_InventoryKey {
      get {return _storage._key ?? Opencannabis_Inventory_InventoryKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    /// Requested duration of the stock reservation, otherwise known as the "lease time." After this amount of time, if
    /// the underlying material has not been "consumed" or "transferred," the reservation is considered null and void,
    /// and the underlying tracked inventory is free to be interacted with otherwise in the supply chain.
    public var lease: Opencannabis_Temporal_Duration {
      get {return _storage._lease ?? Opencannabis_Temporal_Duration()}
      set {_uniqueStorage()._lease = newValue}
    }
    /// Returns true if `lease` has been explicitly set.
    public var hasLease: Bool {return _storage._lease != nil}
    /// Clears the value of `lease`. Subsequent reads from it will return its default value.
    public mutating func clearLease() {_uniqueStorage()._lease = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Cancel an existing reservation of stock or tracked inventory. This releases the inventory to be used or otherwise
  /// moved in the supply chain. Cancelling a reservation is not a requisite step for a lease to expire naturally.
  public struct ReservationCancel {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID for the subject reservation transaction.
    public var reservation: String {
      get {return _storage._reservation}
      set {_uniqueStorage()._reservation = newValue}
    }

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Unique key, identifying the individual inventory item that is subject to this reservation.
    public var key: Opencannabis_Inventory_InventoryKey {
      get {return _storage._key ?? Opencannabis_Inventory_InventoryKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Indicates a consumption event, where stock exits a managed portion of the supply chain. This can include final
  /// sales to consumers, or business-to-business wholesale transactions. Consumption events are terminal for the batches
  /// or items referenced in tracked inventory.
  public struct StockConsume {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// ID for the subject consumption transaction.
    public var transaction: String {
      get {return _storage._transaction}
      set {_uniqueStorage()._transaction = newValue}
    }

    /// Describes the inventory event context, including the temporal position of the event (timing), the managed device
    /// and partnership scope, and a digital signature, if applicable.
    public var event: Bloombox_Services_Telemetry_V1beta4_InventoryContext {
      get {return _storage._event ?? Bloombox_Services_Telemetry_V1beta4_InventoryContext()}
      set {_uniqueStorage()._event = newValue}
    }
    /// Returns true if `event` has been explicitly set.
    public var hasEvent: Bool {return _storage._event != nil}
    /// Clears the value of `event`. Subsequent reads from it will return its default value.
    public mutating func clearEvent() {_uniqueStorage()._event = nil}

    /// Unique key, identifying the individual inventory item that is subject to this reservation.
    public var key: Opencannabis_Inventory_InventoryKey {
      get {return _storage._key ?? Opencannabis_Inventory_InventoryKey()}
      set {_uniqueStorage()._key = newValue}
    }
    /// Returns true if `key` has been explicitly set.
    public var hasKey: Bool {return _storage._key != nil}
    /// Clears the value of `key`. Subsequent reads from it will return its default value.
    public mutating func clearKey() {_uniqueStorage()._key = nil}

    /// Percentage amount of consumption for this product. Defaults to 0, meaning the item was fully consumed.
    public var remaining: OneOf_Remaining? {
      get {return _storage._remaining}
      set {_uniqueStorage()._remaining = newValue}
    }

    /// Count of remaining units in this tracked inventory item, if applicable.
    public var remainingCount: UInt32 {
      get {
        if case .remainingCount(let v)? = _storage._remaining {return v}
        return 0
      }
      set {_uniqueStorage()._remaining = .remainingCount(newValue)}
    }

    /// Percentage of remaining material in this tracked inventory item, if applicable.
    public var remainingPercentage: Double {
      get {
        if case .remainingPercentage(let v)? = _storage._remaining {return v}
        return 0
      }
      set {_uniqueStorage()._remaining = .remainingPercentage(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Percentage amount of consumption for this product. Defaults to 0, meaning the item was fully consumed.
    public enum OneOf_Remaining: Equatable {
      /// Count of remaining units in this tracked inventory item, if applicable.
      case remainingCount(UInt32)
      /// Percentage of remaining material in this tracked inventory item, if applicable.
      case remainingPercentage(Double)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume.OneOf_Remaining, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume.OneOf_Remaining) -> Bool {
        switch (lhs, rhs) {
        case (.remainingCount(let l), .remainingCount(let r)): return l == r
        case (.remainingPercentage(let l), .remainingPercentage(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.services.telemetry.v1beta4"

extension Bloombox_Services_Telemetry_V1beta4_OperationStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "OK"),
    1: .same(proto: "ERROR"),
  ]
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "INVALID_COLLECTION"),
    2: .same(proto: "INVALID_PARTNER"),
    3: .same(proto: "INVALID_LOCATION"),
    4: .same(proto: "INVALID_DEVICE"),
    5: .same(proto: "INVALID_USER"),
    6: .same(proto: "INVALID_CLIENT"),
    7: .same(proto: "PARTNER_NOT_FOUND"),
    8: .same(proto: "LOCATION_NOT_FOUND"),
    99: .same(proto: "INVALID_PAYLOAD"),
  ]
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TelemetryResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "count"),
    3: .same(proto: "service"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.count)
      case 3: try decoder.decodeSingularEnumField(value: &self.service)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .ok {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt32Field(value: self.count, fieldNumber: 2)
    }
    if self.service != .unknown {
      try visitor.visitSingularEnumField(value: self.service, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryResponse, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryResponse) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.count != rhs.count {return false}
    if lhs.service != rhs.service {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TelemetryPing"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_TelemetryPing.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_TelemetryPing.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_TelemetryPing.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Request? = nil
    var _response: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Operation, rhs: Bloombox_Services_Telemetry_V1beta4_TelemetryPing.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CommercialEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_CommercialEvent.protoMessageName + ".Impression"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    10: .same(proto: "section"),
    11: .same(proto: "product"),
    12: .same(proto: "shop"),
  ]

  fileprivate class _StorageClass {
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Section_Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .section(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .section(v)}
        case 11:
          var v: Bloombox_Analytics_Product_Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .product(v)}
        case 12:
          var v: Bloombox_Analytics_Shop_Impression?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .shop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .shop(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._event {
      case .section(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .shop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Impression) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_CommercialEvent.protoMessageName + ".View"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "context"),
    10: .same(proto: "section"),
    11: .same(proto: "product"),
    12: .same(proto: "shop"),
  ]

  fileprivate class _StorageClass {
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Section_View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .section(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .section(v)}
        case 11:
          var v: Bloombox_Analytics_Product_View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .product(v)}
        case 12:
          var v: Bloombox_Analytics_Shop_View?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .shop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .shop(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      switch _storage._event {
      case .section(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .shop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.View) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_CommercialEvent.protoMessageName + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "context"),
    10: .same(proto: "section"),
    11: .same(proto: "product"),
    12: .same(proto: "shop"),
    13: .same(proto: "order"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Section_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .section(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .section(v)}
        case 11:
          var v: Bloombox_Analytics_Product_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .product(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .product(v)}
        case 12:
          var v: Bloombox_Analytics_Shop_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .shop(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .shop(v)}
        case 13:
          var v: Bloombox_Analytics_Order_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .order(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .order(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      switch _storage._event {
      case .section(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .product(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .shop(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .order(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action, rhs: Bloombox_Services_Telemetry_V1beta4_CommercialEvent.Action) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_IdentityEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".IdentityEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent, rhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_IdentityEvent.protoMessageName + ".Action"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "context"),
    10: .same(proto: "action"),
  ]

  fileprivate class _StorageClass {
    var _name: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _event: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _name = source._name
      _context = source._context
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._name)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 10:
          var v: Bloombox_Analytics_Identity_Action?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .action(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .action(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if case .action(let v)? = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action, rhs: Bloombox_Services_Telemetry_V1beta4_IdentityEvent.Action) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._name != rhs_storage._name {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchEvent"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_SearchEvent.protoMessageName + ".Query"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "context"),
    3: .same(proto: "property"),
    4: .standard(proto: "total_results"),
  ]

  fileprivate class _StorageClass {
    var _term: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _property: Bloombox_Analytics_Search_SearchProperty = .propertyUnspecified
    var _totalResults: UInt32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _term = source._term
      _context = source._context
      _property = source._property
      _totalResults = source._totalResults
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._term)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._property)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._totalResults)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._term.isEmpty {
        try visitor.visitSingularStringField(value: _storage._term, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._property != .propertyUnspecified {
        try visitor.visitSingularEnumField(value: _storage._property, fieldNumber: 3)
      }
      if _storage._totalResults != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._totalResults, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Query) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._term != rhs_storage._term {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._totalResults != rhs_storage._totalResults {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_SearchEvent.protoMessageName + ".Result"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "term"),
    2: .same(proto: "context"),
    3: .same(proto: "property"),
    4: .standard(proto: "total_results"),
    5: .standard(proto: "selected_result"),
    6: .same(proto: "key"),
  ]

  fileprivate class _StorageClass {
    var _term: String = String()
    var _context: Bloombox_Analytics_Context? = nil
    var _property: Bloombox_Analytics_Search_SearchProperty = .propertyUnspecified
    var _totalResults: UInt32 = 0
    var _selectedResult: UInt32 = 0
    var _key: Opencannabis_Base_ProductKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _term = source._term
      _context = source._context
      _property = source._property
      _totalResults = source._totalResults
      _selectedResult = source._selectedResult
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._term)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._property)
        case 4: try decoder.decodeSingularUInt32Field(value: &_storage._totalResults)
        case 5: try decoder.decodeSingularUInt32Field(value: &_storage._selectedResult)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._key)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._term.isEmpty {
        try visitor.visitSingularStringField(value: _storage._term, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._property != .propertyUnspecified {
        try visitor.visitSingularEnumField(value: _storage._property, fieldNumber: 3)
      }
      if _storage._totalResults != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._totalResults, fieldNumber: 4)
      }
      if _storage._selectedResult != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._selectedResult, fieldNumber: 5)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result, rhs: Bloombox_Services_Telemetry_V1beta4_SearchEvent.Result) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._term != rhs_storage._term {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._property != rhs_storage._property {return false}
        if _storage._totalResults != rhs_storage._totalResults {return false}
        if _storage._selectedResult != rhs_storage._selectedResult {return false}
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryContext"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timing"),
    2: .same(proto: "context"),
    3: .same(proto: "signature"),
    4: .same(proto: "uuid"),
  ]

  fileprivate class _StorageClass {
    var _timing: Bloombox_Analytics_EventPosition? = nil
    var _context: Bloombox_Analytics_Context? = nil
    var _signature: Opencannabis_Crypto_Signature? = nil
    var _uuid: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _timing = source._timing
      _context = source._context
      _signature = source._signature
      _uuid = source._uuid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._timing)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._context)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._signature)
        case 4: try decoder.decodeSingularStringField(value: &_storage._uuid)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._timing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._context {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._signature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._uuid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uuid, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryContext, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryContext) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._timing != rhs_storage._timing {return false}
        if _storage._context != rhs_storage._context {return false}
        if _storage._signature != rhs_storage._signature {return false}
        if _storage._uuid != rhs_storage._uuid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InventoryEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    10: .same(proto: "encounter"),
    11: .same(proto: "intake"),
    12: .same(proto: "update"),
    13: .same(proto: "transfer"),
    14: .same(proto: "reservation"),
    15: .same(proto: "cancellation"),
    16: .same(proto: "consumption"),
  ]

  fileprivate class _StorageClass {
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.OneOf_Event?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _event = source._event
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 10:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .encounter(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .encounter(v)}
        case 11:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .intake(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .intake(v)}
        case 12:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .update(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .update(v)}
        case 13:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .transfer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .transfer(v)}
        case 14:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .reservation(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .reservation(v)}
        case 15:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .cancellation(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .cancellation(v)}
        case 16:
          var v: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .consumption(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .consumption(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._event {
      case .encounter(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .intake(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .update(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .transfer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .reservation(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .cancellation(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .consumption(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._event != rhs_storage._event {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".Encounter"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "event"),
    2: .same(proto: "origin"),
    3: .same(proto: "rfid"),
  ]

  fileprivate class _StorageClass {
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _origin: Opencannabis_Inventory_Rfid_TagReportOrigin? = nil
    var _rfid: [Opencannabis_Inventory_Rfid_TagReport] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _event = source._event
      _origin = source._origin
      _rfid = source._rfid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._origin)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._rfid)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._origin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._rfid.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._rfid, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.Encounter) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._event != rhs_storage._event {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._rfid != rhs_storage._rfid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".StockIntake"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "event"),
    3: .same(proto: "inventory"),
  ]

  fileprivate class _StorageClass {
    var _transaction: String = String()
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _inventory: [Opencannabis_Inventory_InventoryProduct] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _event = source._event
      _inventory = source._inventory
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._inventory)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._transaction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transaction, fieldNumber: 1)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._inventory.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inventory, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockIntake) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._inventory != rhs_storage._inventory {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".StockUpdate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "parent"),
    3: .same(proto: "event"),
    4: .same(proto: "inventory"),
  ]

  fileprivate class _StorageClass {
    var _transaction: String = String()
    var _parent: String = String()
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _inventory: [Opencannabis_Inventory_InventoryProduct] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _parent = source._parent
      _event = source._event
      _inventory = source._inventory
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularStringField(value: &_storage._parent)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._inventory)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._transaction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transaction, fieldNumber: 1)
      }
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 2)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._inventory.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inventory, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._inventory != rhs_storage._inventory {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".StockTransfer"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "parent"),
    3: .same(proto: "event"),
    4: .same(proto: "key"),
    5: .same(proto: "origin"),
    6: .same(proto: "target"),
  ]

  fileprivate class _StorageClass {
    var _transaction: String = String()
    var _parent: String = String()
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _key: Opencannabis_Inventory_InventoryKey? = nil
    var _origin: Opencannabis_Inventory_InventoryLocation? = nil
    var _target: Opencannabis_Inventory_InventoryLocation? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _parent = source._parent
      _event = source._event
      _key = source._key
      _origin = source._origin
      _target = source._target
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularStringField(value: &_storage._parent)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._origin)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._target)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._transaction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transaction, fieldNumber: 1)
      }
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 2)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._origin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._target {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockTransfer) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._target != rhs_storage._target {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".StockReserve"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "parent"),
    3: .same(proto: "event"),
    4: .same(proto: "key"),
    5: .same(proto: "lease"),
  ]

  fileprivate class _StorageClass {
    var _transaction: String = String()
    var _parent: String = String()
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _key: Opencannabis_Inventory_InventoryKey? = nil
    var _lease: Opencannabis_Temporal_Duration? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _parent = source._parent
      _event = source._event
      _key = source._key
      _lease = source._lease
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularStringField(value: &_storage._parent)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._lease)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._transaction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transaction, fieldNumber: 1)
      }
      if !_storage._parent.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parent, fieldNumber: 2)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._lease {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockReserve) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._lease != rhs_storage._lease {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".ReservationCancel"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reservation"),
    2: .same(proto: "event"),
    3: .same(proto: "key"),
  ]

  fileprivate class _StorageClass {
    var _reservation: String = String()
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _key: Opencannabis_Inventory_InventoryKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _reservation = source._reservation
      _event = source._event
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._reservation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._key)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._reservation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reservation, fieldNumber: 1)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.ReservationCancel) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._reservation != rhs_storage._reservation {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Telemetry_V1beta4_InventoryEvent.protoMessageName + ".StockConsume"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "transaction"),
    2: .same(proto: "event"),
    3: .same(proto: "key"),
    4: .standard(proto: "remaining_count"),
    5: .standard(proto: "remaining_percentage"),
  ]

  fileprivate class _StorageClass {
    var _transaction: String = String()
    var _event: Bloombox_Services_Telemetry_V1beta4_InventoryContext? = nil
    var _key: Opencannabis_Inventory_InventoryKey? = nil
    var _remaining: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume.OneOf_Remaining?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _transaction = source._transaction
      _event = source._event
      _key = source._key
      _remaining = source._remaining
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._transaction)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._event)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._key)
        case 4:
          if _storage._remaining != nil {try decoder.handleConflictingOneOf()}
          var v: UInt32?
          try decoder.decodeSingularUInt32Field(value: &v)
          if let v = v {_storage._remaining = .remainingCount(v)}
        case 5:
          if _storage._remaining != nil {try decoder.handleConflictingOneOf()}
          var v: Double?
          try decoder.decodeSingularDoubleField(value: &v)
          if let v = v {_storage._remaining = .remainingPercentage(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._transaction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._transaction, fieldNumber: 1)
      }
      if let v = _storage._event {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._key {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      switch _storage._remaining {
      case .remainingCount(let v)?:
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      case .remainingPercentage(let v)?:
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume, rhs: Bloombox_Services_Telemetry_V1beta4_InventoryEvent.StockConsume) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._transaction != rhs_storage._transaction {return false}
        if _storage._event != rhs_storage._event {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._remaining != rhs_storage._remaining {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
