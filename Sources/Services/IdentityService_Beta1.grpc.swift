//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: identity/v1beta1/IdentityService_Beta1.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf
import OpenCannabis

public protocol Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCall: ClientCallUnary {}

fileprivate final class Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCallBase: ClientCallUnaryBase<Bloombox_Services_Identity_V1beta1_ResolveKey.Request, Bloombox_Services_Identity_V1beta1_ResolveKey.Response>, Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCall {
  override class var method: String { return "/bloombox.services.identity.v1beta1.Identity/KeyResolve" }
}


/// Instantiate Bloombox_Services_Identity_V1beta1_IdentityServiceClient, then call methods of this protocol to make API calls.
public protocol Bloombox_Services_Identity_V1beta1_IdentityService: ServiceClient {
  /// Synchronous. Unary.
  func keyResolve(_ request: Bloombox_Services_Identity_V1beta1_ResolveKey.Request) throws -> Bloombox_Services_Identity_V1beta1_ResolveKey.Response
  /// Asynchronous. Unary.
  func keyResolve(_ request: Bloombox_Services_Identity_V1beta1_ResolveKey.Request, completion: @escaping (Bloombox_Services_Identity_V1beta1_ResolveKey.Response?, CallResult) -> Void) throws -> Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCall

}

public final class Bloombox_Services_Identity_V1beta1_IdentityServiceClient: ServiceClientBase, Bloombox_Services_Identity_V1beta1_IdentityService {
  /// Synchronous. Unary.
  public func keyResolve(_ request: Bloombox_Services_Identity_V1beta1_ResolveKey.Request) throws -> Bloombox_Services_Identity_V1beta1_ResolveKey.Response {
    return try Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func keyResolve(_ request: Bloombox_Services_Identity_V1beta1_ResolveKey.Request, completion: @escaping (Bloombox_Services_Identity_V1beta1_ResolveKey.Response?, CallResult) -> Void) throws -> Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCall {
    return try Bloombox_Services_Identity_V1beta1_IdentityKeyResolveCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

