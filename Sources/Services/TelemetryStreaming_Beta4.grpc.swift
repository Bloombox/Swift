//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: telemetry/v1beta4/TelemetryStreaming_Beta4.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import OpenCannabis
import Foundation
import SwiftGRPC
import SwiftProtobuf

public protocol Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCall: ClientCallClientStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Bloombox_Services_Telemetry_V1beta4_StreamedEvent, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Bloombox_Services_Telemetry_V1beta4_StreamedEvent, timeout: DispatchTime) throws

  /// Call this to close the connection and wait for a response. Blocking.
  func closeAndReceive() throws -> SwiftProtobuf.Google_Protobuf_Empty
  /// Call this to close the connection and wait for a response. Nonblocking.
  func closeAndReceive(completion: @escaping (ResultOrRPCError<SwiftProtobuf.Google_Protobuf_Empty>) -> Void) throws
}

public extension Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Bloombox_Services_Telemetry_V1beta4_StreamedEvent, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCallBase: ClientCallClientStreamingBase<Bloombox_Services_Telemetry_V1beta4_StreamedEvent, SwiftProtobuf.Google_Protobuf_Empty>, Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCall {
  override class var method: String { return "/bloombox.services.telemetry.v1beta4.TelemetryStream/Events" }
}


/// Instantiate Bloombox_Services_Telemetry_V1beta4_TelemetryStreamServiceClient, then call methods of this protocol to make API calls.
public protocol Bloombox_Services_Telemetry_V1beta4_TelemetryStreamService: ServiceClient {
  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  func events(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCall

}

public extension Bloombox_Services_Telemetry_V1beta4_TelemetryStreamService {
  /// Asynchronous. Client-streaming.
  func events(completion: ((CallResult) -> Void)?) throws -> Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCall {
    return try self.events(metadata: self.metadata, completion: completion)
  }

}

public final class Bloombox_Services_Telemetry_V1beta4_TelemetryStreamServiceClient: ServiceClientBase, Bloombox_Services_Telemetry_V1beta4_TelemetryStreamService {
  /// Asynchronous. Client-streaming.
  /// Use methods on the returned object to stream messages and
  /// to close the connection and wait for a final response.
  public func events(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCall {
    return try Bloombox_Services_Telemetry_V1beta4_TelemetryStreamEventsCallBase(channel)
      .start(metadata: customMetadata, completion: completion)
  }

}

