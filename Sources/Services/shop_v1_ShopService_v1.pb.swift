// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shop/v1/ShopService_v1.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

///*
/// Defines the Shop API, which provides the ability to submit digital orders in e-commerce or build-a-bag circumstances.
/// Additionally provides the ability to resolve shop/storefront hours, check delivery minimums, check user account and
/// membership status, and enroll new members. Basically includes all the functionality needed to facilitate a retail
/// e-commerce experience for cannabis.

import Foundation
import OpenCannabis
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Enumerates errors that may prevent a user from being considered eligible for express and delivery orders.
public enum Bloombox_Services_Shop_V1_VerifyError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// The user could not be found at all.
  case notFound // = 0

  /// The user was found, but their rec was expired.
  case recExpired // = 1

  /// The user was found, but their ID was expired.
  case idExpired // = 2

  /// The payload was invalid - usually an invalid email address.
  case invalidPayload // = 3

  /// Generic error that indicates the user is not eligible.
  case notEligible // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .notFound
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notFound
    case 1: self = .recExpired
    case 2: self = .idExpired
    case 3: self = .invalidPayload
    case 4: self = .notEligible
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notFound: return 0
    case .recExpired: return 1
    case .idExpired: return 2
    case .invalidPayload: return 3
    case .notEligible: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Shop_V1_VerifyError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Shop_V1_VerifyError] = [
    .notFound,
    .recExpired,
    .idExpired,
    .invalidPayload,
    .notEligible,
  ]
}

#endif  // swift(>=4.2)

/// Enumerates errors that may prevent a user from submitting an order for pickup or delivery.
public enum Bloombox_Services_Shop_V1_OrderError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error occurred.
  case noError // = 0

  /// Generic invalid payload.
  case invalidOrder // = 1

  /// The user was not found to be eligible to submit orders.
  case userNotEligible // = 2

  /// Delivery is not supported within the zipcode provided.
  case zipcodeNotEligible // = 3

  /// Zipcode is eligible, but currently inactive.
  case zipcodeNotActive // = 4

  /// Zipcode delivery minimum was not met by the order subtotal.
  case zipcodeMinimumNotMet // = 5

  /// The partner code was invalid.
  case invalidPartner // = 6

  /// The location code was invalid.
  case invalidLocation // = 7

  /// The customer record was found to be invalid.
  case invalidCustomer // = 8

  /// The request is of type DELIVERY but was missing destination information.
  case missingDestination // = 9

  /// The shop is not open right now for DELIVERY, or at the requested time for PICKUP.
  case shopNotOpen // = 10

  /// Global delivery or order minimum subtotal was not met.
  case globalMinimumNotMet // = 11

  /// The user's membership could not be located for a given dispensary.
  case membershipNotFound // = 12

  /// The order was found to be a duplicate of another order.
  case duplicateOrder // = 13
  case UNRECOGNIZED(Int)

  public init() {
    self = .noError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noError
    case 1: self = .invalidOrder
    case 2: self = .userNotEligible
    case 3: self = .zipcodeNotEligible
    case 4: self = .zipcodeNotActive
    case 5: self = .zipcodeMinimumNotMet
    case 6: self = .invalidPartner
    case 7: self = .invalidLocation
    case 8: self = .invalidCustomer
    case 9: self = .missingDestination
    case 10: self = .shopNotOpen
    case 11: self = .globalMinimumNotMet
    case 12: self = .membershipNotFound
    case 13: self = .duplicateOrder
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noError: return 0
    case .invalidOrder: return 1
    case .userNotEligible: return 2
    case .zipcodeNotEligible: return 3
    case .zipcodeNotActive: return 4
    case .zipcodeMinimumNotMet: return 5
    case .invalidPartner: return 6
    case .invalidLocation: return 7
    case .invalidCustomer: return 8
    case .missingDestination: return 9
    case .shopNotOpen: return 10
    case .globalMinimumNotMet: return 11
    case .membershipNotFound: return 12
    case .duplicateOrder: return 13
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Shop_V1_OrderError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Shop_V1_OrderError] = [
    .noError,
    .invalidOrder,
    .userNotEligible,
    .zipcodeNotEligible,
    .zipcodeNotActive,
    .zipcodeMinimumNotMet,
    .invalidPartner,
    .invalidLocation,
    .invalidCustomer,
    .missingDestination,
    .shopNotOpen,
    .globalMinimumNotMet,
    .membershipNotFound,
    .duplicateOrder,
  ]
}

#endif  // swift(>=4.2)

/// Specifies errors that may be encountered during enrollment of a new user.
public enum Bloombox_Services_Shop_V1_EnrollmentError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error occurred.
  case noEnrollmentError // = 0

  /// Invalid email address.
  case invalidEmail // = 1

  /// Invalid name info.
  case invalidName // = 2

  /// Invalid phone number.
  case invalidPhone // = 3

  /// Invalid date of birth.
  case invalidDateOfBirth // = 4

  /// Invalid recommendation ID
  case invalidRecID // = 5

  /// Invalid recommendation expiry date.
  case invalidRecExpiration // = 6

  /// Invalid recommendation doctor name.
  case invalidRecDoctorName // = 7

  /// Invalid recommendation doctor phone.
  case invalidRecDoctorPhone // = 8

  /// Invalid USDL ID.
  case invalidUsdlID // = 9

  /// Invalid USDL expiration date.
  case invalidUsdlExpiration // = 11

  /// Invalid USDL jurisdiction code.
  case invalidUsdlJurisdiction // = 12

  /// The account in question already exists.
  case accountConflict // = 13

  /// The account in question already exists, because the email in question is taken.
  case accountConflictEmail // = 14

  /// The account in question already exists, because the phone number in question is taken.
  case accountConflictPhone // = 15

  /// Invalid payload, in general.
  case invalidEnrollmentPayload // = 99
  case UNRECOGNIZED(Int)

  public init() {
    self = .noEnrollmentError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noEnrollmentError
    case 1: self = .invalidEmail
    case 2: self = .invalidName
    case 3: self = .invalidPhone
    case 4: self = .invalidDateOfBirth
    case 5: self = .invalidRecID
    case 6: self = .invalidRecExpiration
    case 7: self = .invalidRecDoctorName
    case 8: self = .invalidRecDoctorPhone
    case 9: self = .invalidUsdlID
    case 11: self = .invalidUsdlExpiration
    case 12: self = .invalidUsdlJurisdiction
    case 13: self = .accountConflict
    case 14: self = .accountConflictEmail
    case 15: self = .accountConflictPhone
    case 99: self = .invalidEnrollmentPayload
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noEnrollmentError: return 0
    case .invalidEmail: return 1
    case .invalidName: return 2
    case .invalidPhone: return 3
    case .invalidDateOfBirth: return 4
    case .invalidRecID: return 5
    case .invalidRecExpiration: return 6
    case .invalidRecDoctorName: return 7
    case .invalidRecDoctorPhone: return 8
    case .invalidUsdlID: return 9
    case .invalidUsdlExpiration: return 11
    case .invalidUsdlJurisdiction: return 12
    case .accountConflict: return 13
    case .accountConflictEmail: return 14
    case .accountConflictPhone: return 15
    case .invalidEnrollmentPayload: return 99
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Shop_V1_EnrollmentError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Shop_V1_EnrollmentError] = [
    .noEnrollmentError,
    .invalidEmail,
    .invalidName,
    .invalidPhone,
    .invalidDateOfBirth,
    .invalidRecID,
    .invalidRecExpiration,
    .invalidRecDoctorName,
    .invalidRecDoctorPhone,
    .invalidUsdlID,
    .invalidUsdlExpiration,
    .invalidUsdlJurisdiction,
    .accountConflict,
    .accountConflictEmail,
    .accountConflictPhone,
    .invalidEnrollmentPayload,
  ]
}

#endif  // swift(>=4.2)

/// Specifies errors that may be encountered during the sharing of a receipt
public enum Bloombox_Services_Shop_V1_ShareError: SwiftProtobuf.Enum {
  public typealias RawValue = Int

  /// No error occurred.
  case noShareError // = 0
  case UNRECOGNIZED(Int)

  public init() {
    self = .noShareError
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .noShareError
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .noShareError: return 0
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Bloombox_Services_Shop_V1_ShareError: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Bloombox_Services_Shop_V1_ShareError] = [
    .noShareError,
  ]
}

#endif  // swift(>=4.2)

/// Specifies an RPC operation to retrieve status information for the Shop API.
public struct Bloombox_Services_Shop_V1_Ping {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Represents a request to ping the shop API.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Represents a service status response to a ping request.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Current service status.
    public var status: Bloombox_Services_ServiceStatus = .unknown

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  /// Specifies an entire RPC operation to ping the shop API.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for member verification.
    public var request: Bloombox_Services_Shop_V1_Ping.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_Ping.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response for member verification.
    public var response: Bloombox_Services_Shop_V1_Ping.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_Ping.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Branding information for a given web shop, including a color scheme and link to brand assets.
public struct Bloombox_Services_Shop_V1_ShopBranding {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Color set and scheme for the digital shop in question.
  public var colorScheme: Opencannabis_Content_ColorScheme {
    get {return _storage._colorScheme ?? Opencannabis_Content_ColorScheme()}
    set {_uniqueStorage()._colorScheme = newValue}
  }
  /// Returns true if `colorScheme` has been explicitly set.
  public var hasColorScheme: Bool {return _storage._colorScheme != nil}
  /// Clears the value of `colorScheme`. Subsequent reads from it will return its default value.
  public mutating func clearColorScheme() {_uniqueStorage()._colorScheme = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Specifies an RPC operation to check the status of an online store, for availability/hours status, etc.
public struct Bloombox_Services_Shop_V1_ShopInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Request info about a digital shop via the API.
  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var scope: OneOf_Scope? {
      get {return _storage._scope}
      set {_uniqueStorage()._scope = newValue}
    }

    /// Location key.
    public var location: Bloombox_Partner_LocationKey {
      get {
        if case .location(let v)? = _storage._scope {return v}
        return Bloombox_Partner_LocationKey()
      }
      set {_uniqueStorage()._scope = .location(newValue)}
    }

    /// Partner key, if requesting partner-level scope.
    public var partner: Bloombox_Partner_PartnerKey {
      get {
        if case .partner(let v)? = _storage._scope {return v}
        return Bloombox_Partner_PartnerKey()
      }
      set {_uniqueStorage()._scope = .partner(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Scope: Equatable {
      /// Location key.
      case location(Bloombox_Partner_LocationKey)
      /// Partner key, if requesting partner-level scope.
      case partner(Bloombox_Partner_PartnerKey)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Shop_V1_ShopInfo.Request.OneOf_Scope, rhs: Bloombox_Services_Shop_V1_ShopInfo.Request.OneOf_Scope) -> Bool {
        switch (lhs, rhs) {
        case (.location(let l), .location(let r)): return l == r
        case (.partner(let l), .partner(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Response to a request for info about a digital shop via the API.
  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Indicates the current status of the online shop in question.
    public var shopStatus: Bloombox_Partner_Settings_ShopStatus {
      get {return _storage._shopStatus}
      set {_uniqueStorage()._shopStatus = newValue}
    }

    /// Indicates support/settings for a given digital shop context.
    public var settings: Bloombox_Partner_Settings_ShopServiceSettings {
      get {return _storage._settings ?? Bloombox_Partner_Settings_ShopServiceSettings()}
      set {_uniqueStorage()._settings = newValue}
    }
    /// Returns true if `settings` has been explicitly set.
    public var hasSettings: Bool {return _storage._settings != nil}
    /// Clears the value of `settings`. Subsequent reads from it will return its default value.
    public mutating func clearSettings() {_uniqueStorage()._settings = nil}

    /// Indicates regular and special hours that apply for a given digital shop context.
    public var hours: Bloombox_Partner_Settings_ShopHoursSettings {
      get {return _storage._hours ?? Bloombox_Partner_Settings_ShopHoursSettings()}
      set {_uniqueStorage()._hours = newValue}
    }
    /// Returns true if `hours` has been explicitly set.
    public var hasHours: Bool {return _storage._hours != nil}
    /// Clears the value of `hours`. Subsequent reads from it will return its default value.
    public mutating func clearHours() {_uniqueStorage()._hours = nil}

    /// Indicates contact info for a given partner location.
    public var contact: Opencannabis_Contact_ContactInfo {
      get {return _storage._contact ?? Opencannabis_Contact_ContactInfo()}
      set {_uniqueStorage()._contact = newValue}
    }
    /// Returns true if `contact` has been explicitly set.
    public var hasContact: Bool {return _storage._contact != nil}
    /// Clears the value of `contact`. Subsequent reads from it will return its default value.
    public mutating func clearContact() {_uniqueStorage()._contact = nil}

    /// Social account listings.
    public var social: Opencannabis_Contact_SocialInfo {
      get {return _storage._social ?? Opencannabis_Contact_SocialInfo()}
      set {_uniqueStorage()._social = newValue}
    }
    /// Returns true if `social` has been explicitly set.
    public var hasSocial: Bool {return _storage._social != nil}
    /// Clears the value of `social`. Subsequent reads from it will return its default value.
    public mutating func clearSocial() {_uniqueStorage()._social = nil}

    /// Branding information for the digital shop in question.
    public var branding: Bloombox_Services_Shop_V1_ShopBranding {
      get {return _storage._branding ?? Bloombox_Services_Shop_V1_ShopBranding()}
      set {_uniqueStorage()._branding = newValue}
    }
    /// Returns true if `branding` has been explicitly set.
    public var hasBranding: Bool {return _storage._branding != nil}
    /// Clears the value of `branding`. Subsequent reads from it will return its default value.
    public mutating func clearBranding() {_uniqueStorage()._branding = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Specifies an entire operation to query information about one or more digital shops.
  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for shop status.
    public var request: Bloombox_Services_Shop_V1_ShopInfo.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_ShopInfo.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request for shop status.
    public var response: Bloombox_Services_Shop_V1_ShopInfo.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_ShopInfo.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to enroll/on-board a new user as a member of a retail dispensary.
public struct Bloombox_Services_Shop_V1_EnrollMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Person record we are enrolling as a member.
    public var person: Opencannabis_Person_Person {
      get {return _storage._person ?? Opencannabis_Person_Person()}
      set {_uniqueStorage()._person = newValue}
    }
    /// Returns true if `person` has been explicitly set.
    public var hasPerson: Bool {return _storage._person != nil}
    /// Clears the value of `person`. Subsequent reads from it will return its default value.
    public mutating func clearPerson() {_uniqueStorage()._person = nil}

    /// Source for this enrollment.
    public var source: Bloombox_Identity_EnrollmentSource {
      get {return _storage._source}
      set {_uniqueStorage()._source = newValue}
    }

    /// Channel that passed us this enrollment.
    public var channel: String {
      get {return _storage._channel}
      set {_uniqueStorage()._channel = newValue}
    }

    /// Holds information about the user's cannabis recommendation.
    public var doctorRec: Bloombox_Identity_Ids_UserDoctorRec {
      get {return _storage._doctorRec ?? Bloombox_Identity_Ids_UserDoctorRec()}
      set {_uniqueStorage()._doctorRec = newValue}
    }
    /// Returns true if `doctorRec` has been explicitly set.
    public var hasDoctorRec: Bool {return _storage._doctorRec != nil}
    /// Clears the value of `doctorRec`. Subsequent reads from it will return its default value.
    public mutating func clearDoctorRec() {_uniqueStorage()._doctorRec = nil}

    /// Holds information about the user's driver's license.
    public var governmentID: Bloombox_Identity_ID {
      get {return _storage._governmentID ?? Bloombox_Identity_ID()}
      set {_uniqueStorage()._governmentID = newValue}
    }
    /// Returns true if `governmentID` has been explicitly set.
    public var hasGovernmentID: Bool {return _storage._governmentID != nil}
    /// Clears the value of `governmentID`. Subsequent reads from it will return its default value.
    public mutating func clearGovernmentID() {_uniqueStorage()._governmentID = nil}

    /// Specifies the partner we are enrolling to.
    public var location: Bloombox_Partner_LocationKey {
      get {return _storage._location ?? Bloombox_Partner_LocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    /// Base64-encoded password. This is for transmission ONLY - do NOT store this value without first either encrypting
    /// it strongly, or performing a subsequent salt-and-SHA routine.
    public var password: String {
      get {return _storage._password}
      set {_uniqueStorage()._password = newValue}
    }

    /// Flag to indicate that this is a dry run, and we should not actually write the user to any external
    /// or persistence systems.
    public var dryRun: Bool {
      get {return _storage._dryRun}
      set {_uniqueStorage()._dryRun = newValue}
    }

    /// Specifies information related to a cannabis consumer's consumption preferences.
    public var consumerProfile: Bloombox_Identity_ConsumerProfile {
      get {return _storage._consumerProfile ?? Bloombox_Identity_ConsumerProfile()}
      set {_uniqueStorage()._consumerProfile = newValue}
    }
    /// Returns true if `consumerProfile` has been explicitly set.
    public var hasConsumerProfile: Bool {return _storage._consumerProfile != nil}
    /// Clears the value of `consumerProfile`. Subsequent reads from it will return its default value.
    public mutating func clearConsumerProfile() {_uniqueStorage()._consumerProfile = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Resulting ID from the new enrollment.
    public var id: String = String()

    /// Result from the operation.
    public var result: Bloombox_Services_Shop_V1_EnrollMember.Response.OneOf_Result? = nil

    /// Foreign ID, i.e. local identifier assigned to a new user.
    public var foreignID: String {
      get {
        if case .foreignID(let v)? = result {return v}
        return String()
      }
      set {result = .foreignID(newValue)}
    }

    /// Error that prevented a successful response.
    public var error: Bloombox_Services_Shop_V1_EnrollmentError {
      get {
        if case .error(let v)? = result {return v}
        return .noEnrollmentError
      }
      set {result = .error(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Result from the operation.
    public enum OneOf_Result: Equatable {
      /// Foreign ID, i.e. local identifier assigned to a new user.
      case foreignID(String)
      /// Error that prevented a successful response.
      case error(Bloombox_Services_Shop_V1_EnrollmentError)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Shop_V1_EnrollMember.Response.OneOf_Result, rhs: Bloombox_Services_Shop_V1_EnrollMember.Response.OneOf_Result) -> Bool {
        switch (lhs, rhs) {
        case (.foreignID(let l), .foreignID(let r)): return l == r
        case (.error(let l), .error(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}
  }

  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for member enrollment.
    public var request: Bloombox_Services_Shop_V1_EnrollMember.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_EnrollMember.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request for member enrollment.
    public var response: Bloombox_Services_Shop_V1_EnrollMember.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_EnrollMember.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to validate that a web user is eligible for express and delivery orders.
public struct Bloombox_Services_Shop_V1_VerifyMember {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Email address to verify, encoded in Base 64.
    public var emailAddress: String {
      get {return _storage._emailAddress}
      set {_uniqueStorage()._emailAddress = newValue}
    }

    /// Location key.
    public var location: Bloombox_Partner_LocationKey {
      get {return _storage._location ?? Bloombox_Partner_LocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Verification status - up/down.
    public var verified: Bool {
      get {return _storage._verified}
      set {_uniqueStorage()._verified = newValue}
    }

    public var result: OneOf_Result? {
      get {return _storage._result}
      set {_uniqueStorage()._result = newValue}
    }

    /// Verified customer record.
    public var customer: Opencannabis_Commerce_Customer {
      get {
        if case .customer(let v)? = _storage._result {return v}
        return Opencannabis_Commerce_Customer()
      }
      set {_uniqueStorage()._result = .customer(newValue)}
    }

    /// Error that prevented verification, if any.
    public var error: Bloombox_Services_Shop_V1_VerifyError {
      get {
        if case .error(let v)? = _storage._result {return v}
        return .notFound
      }
      set {_uniqueStorage()._result = .error(newValue)}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public enum OneOf_Result: Equatable {
      /// Verified customer record.
      case customer(Opencannabis_Commerce_Customer)
      /// Error that prevented verification, if any.
      case error(Bloombox_Services_Shop_V1_VerifyError)

    #if !swift(>=4.1)
      public static func ==(lhs: Bloombox_Services_Shop_V1_VerifyMember.Response.OneOf_Result, rhs: Bloombox_Services_Shop_V1_VerifyMember.Response.OneOf_Result) -> Bool {
        switch (lhs, rhs) {
        case (.customer(let l), .customer(let r)): return l == r
        case (.error(let l), .error(let r)): return l == r
        default: return false
        }
      }
    #endif
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for member verification.
    public var request: Bloombox_Services_Shop_V1_VerifyMember.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_VerifyMember.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response for member verification.
    public var response: Bloombox_Services_Shop_V1_VerifyMember.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_VerifyMember.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies a request and response cycle to validate a US zipcode for delivery eligibility.
public struct Bloombox_Services_Shop_V1_CheckZipcode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Zip code to check.
    public var zipcode: String {
      get {return _storage._zipcode}
      set {_uniqueStorage()._zipcode = newValue}
    }

    /// Location to check.
    public var location: Bloombox_Partner_LocationKey {
      get {return _storage._location ?? Bloombox_Partner_LocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether that zipcode is supported for delivery or not.
    public var supported: Bool = false

    /// Order minimum for delivery in this zipcode.
    public var deliveryMinimum: Float = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for zipcode eligibility verification.
    public var request: Bloombox_Services_Shop_V1_CheckZipcode.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_CheckZipcode.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response to a request for zipcode eligibility verification.
    public var response: Bloombox_Services_Shop_V1_CheckZipcode.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_CheckZipcode.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to submit an express pickup or delivery order.
public struct Bloombox_Services_Shop_V1_SubmitOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Order to submit.
    public var order: Opencannabis_Commerce_Order {
      get {return _storage._order ?? Opencannabis_Commerce_Order()}
      set {_uniqueStorage()._order = newValue}
    }
    /// Returns true if `order` has been explicitly set.
    public var hasOrder: Bool {return _storage._order != nil}
    /// Clears the value of `order`. Subsequent reads from it will return its default value.
    public mutating func clearOrder() {_uniqueStorage()._order = nil}

    /// Location to check.
    public var location: Bloombox_Partner_LocationKey {
      get {return _storage._location ?? Bloombox_Partner_LocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Error, if any.
    public var error: Bloombox_Services_Shop_V1_OrderError = .noError

    /// ID assigned to the new order, if no error occurred.
    public var orderID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for order submission.
    public var request: Bloombox_Services_Shop_V1_SubmitOrder.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_SubmitOrder.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response from order submission.
    public var response: Bloombox_Services_Shop_V1_SubmitOrder.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_SubmitOrder.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

/// Specifies an RPC operation to retrieve information about an existing express pickup or delivery order.
public struct Bloombox_Services_Shop_V1_GetOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Request {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Order ID to retrieve.
    public var orderID: String {
      get {return _storage._orderID}
      set {_uniqueStorage()._orderID = newValue}
    }

    /// Partner/location code.
    public var location: Bloombox_Partner_LocationKey {
      get {return _storage._location ?? Bloombox_Partner_LocationKey()}
      set {_uniqueStorage()._location = newValue}
    }
    /// Returns true if `location` has been explicitly set.
    public var hasLocation: Bool {return _storage._location != nil}
    /// Clears the value of `location`. Subsequent reads from it will return its default value.
    public mutating func clearLocation() {_uniqueStorage()._location = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Response {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Whether the order could be found or not.
    public var success: Bool {
      get {return _storage._success}
      set {_uniqueStorage()._success = newValue}
    }

    /// Order identified by that ID, if it could be found.
    public var order: Opencannabis_Commerce_Order {
      get {return _storage._order ?? Opencannabis_Commerce_Order()}
      set {_uniqueStorage()._order = newValue}
    }
    /// Returns true if `order` has been explicitly set.
    public var hasOrder: Bool {return _storage._order != nil}
    /// Clears the value of `order`. Subsequent reads from it will return its default value.
    public mutating func clearOrder() {_uniqueStorage()._order = nil}

    /// Error, if any.
    public var error: Bloombox_Services_Shop_V1_OrderError {
      get {return _storage._error}
      set {_uniqueStorage()._error = newValue}
    }

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct Operation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Request for order status.
    public var request: Bloombox_Services_Shop_V1_GetOrder.Request {
      get {return _storage._request ?? Bloombox_Services_Shop_V1_GetOrder.Request()}
      set {_uniqueStorage()._request = newValue}
    }
    /// Returns true if `request` has been explicitly set.
    public var hasRequest: Bool {return _storage._request != nil}
    /// Clears the value of `request`. Subsequent reads from it will return its default value.
    public mutating func clearRequest() {_uniqueStorage()._request = nil}

    /// Response describing order status.
    public var response: Bloombox_Services_Shop_V1_GetOrder.Response {
      get {return _storage._response ?? Bloombox_Services_Shop_V1_GetOrder.Response()}
      set {_uniqueStorage()._response = newValue}
    }
    /// Returns true if `response` has been explicitly set.
    public var hasResponse: Bool {return _storage._response != nil}
    /// Clears the value of `response`. Subsequent reads from it will return its default value.
    public mutating func clearResponse() {_uniqueStorage()._response = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "bloombox.services.shop.v1"

extension Bloombox_Services_Shop_V1_VerifyError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_FOUND"),
    1: .same(proto: "REC_EXPIRED"),
    2: .same(proto: "ID_EXPIRED"),
    3: .same(proto: "INVALID_PAYLOAD"),
    4: .same(proto: "NOT_ELIGIBLE"),
  ]
}

extension Bloombox_Services_Shop_V1_OrderError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ERROR"),
    1: .same(proto: "INVALID_ORDER"),
    2: .same(proto: "USER_NOT_ELIGIBLE"),
    3: .same(proto: "ZIPCODE_NOT_ELIGIBLE"),
    4: .same(proto: "ZIPCODE_NOT_ACTIVE"),
    5: .same(proto: "ZIPCODE_MINIMUM_NOT_MET"),
    6: .same(proto: "INVALID_PARTNER"),
    7: .same(proto: "INVALID_LOCATION"),
    8: .same(proto: "INVALID_CUSTOMER"),
    9: .same(proto: "MISSING_DESTINATION"),
    10: .same(proto: "SHOP_NOT_OPEN"),
    11: .same(proto: "GLOBAL_MINIMUM_NOT_MET"),
    12: .same(proto: "MEMBERSHIP_NOT_FOUND"),
    13: .same(proto: "DUPLICATE_ORDER"),
  ]
}

extension Bloombox_Services_Shop_V1_EnrollmentError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_ENROLLMENT_ERROR"),
    1: .same(proto: "INVALID_EMAIL"),
    2: .same(proto: "INVALID_NAME"),
    3: .same(proto: "INVALID_PHONE"),
    4: .same(proto: "INVALID_DATE_OF_BIRTH"),
    5: .same(proto: "INVALID_REC_ID"),
    6: .same(proto: "INVALID_REC_EXPIRATION"),
    7: .same(proto: "INVALID_REC_DOCTOR_NAME"),
    8: .same(proto: "INVALID_REC_DOCTOR_PHONE"),
    9: .same(proto: "INVALID_USDL_ID"),
    11: .same(proto: "INVALID_USDL_EXPIRATION"),
    12: .same(proto: "INVALID_USDL_JURISDICTION"),
    13: .same(proto: "ACCOUNT_CONFLICT"),
    14: .same(proto: "ACCOUNT_CONFLICT_EMAIL"),
    15: .same(proto: "ACCOUNT_CONFLICT_PHONE"),
    99: .same(proto: "INVALID_ENROLLMENT_PAYLOAD"),
  ]
}

extension Bloombox_Services_Shop_V1_ShareError: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_SHARE_ERROR"),
  ]
}

extension Bloombox_Services_Shop_V1_Ping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Ping"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_Ping, rhs: Bloombox_Services_Shop_V1_Ping) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_Ping.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_Ping.protoMessageName + ".Request"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_Ping.Request, rhs: Bloombox_Services_Shop_V1_Ping.Request) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_Ping.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_Ping.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.status)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.status != .unknown {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_Ping.Response, rhs: Bloombox_Services_Shop_V1_Ping.Response) -> Bool {
    if lhs.status != rhs.status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_Ping.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_Ping.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_Ping.Request? = nil
    var _response: Bloombox_Services_Shop_V1_Ping.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_Ping.Operation, rhs: Bloombox_Services_Shop_V1_Ping.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_ShopBranding: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopBranding"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "color_scheme"),
  ]

  fileprivate class _StorageClass {
    var _colorScheme: Opencannabis_Content_ColorScheme? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _colorScheme = source._colorScheme
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._colorScheme)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._colorScheme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_ShopBranding, rhs: Bloombox_Services_Shop_V1_ShopBranding) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._colorScheme != rhs_storage._colorScheme {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_ShopInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ShopInfo"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_ShopInfo, rhs: Bloombox_Services_Shop_V1_ShopInfo) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_ShopInfo.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_ShopInfo.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "location"),
    2: .same(proto: "partner"),
  ]

  fileprivate class _StorageClass {
    var _scope: Bloombox_Services_Shop_V1_ShopInfo.Request.OneOf_Scope?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _scope = source._scope
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Bloombox_Partner_LocationKey?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .location(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .location(v)}
        case 2:
          var v: Bloombox_Partner_PartnerKey?
          if let current = _storage._scope {
            try decoder.handleConflictingOneOf()
            if case .partner(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._scope = .partner(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._scope {
      case .location(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .partner(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_ShopInfo.Request, rhs: Bloombox_Services_Shop_V1_ShopInfo.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._scope != rhs_storage._scope {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_ShopInfo.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_ShopInfo.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "shop_status"),
    2: .same(proto: "settings"),
    3: .same(proto: "hours"),
    4: .same(proto: "contact"),
    5: .same(proto: "social"),
    6: .same(proto: "branding"),
  ]

  fileprivate class _StorageClass {
    var _shopStatus: Bloombox_Partner_Settings_ShopStatus = .open
    var _settings: Bloombox_Partner_Settings_ShopServiceSettings? = nil
    var _hours: Bloombox_Partner_Settings_ShopHoursSettings? = nil
    var _contact: Opencannabis_Contact_ContactInfo? = nil
    var _social: Opencannabis_Contact_SocialInfo? = nil
    var _branding: Bloombox_Services_Shop_V1_ShopBranding? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _shopStatus = source._shopStatus
      _settings = source._settings
      _hours = source._hours
      _contact = source._contact
      _social = source._social
      _branding = source._branding
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._shopStatus)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._settings)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._hours)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._contact)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._social)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._branding)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._shopStatus != .open {
        try visitor.visitSingularEnumField(value: _storage._shopStatus, fieldNumber: 1)
      }
      if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._hours {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._contact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._social {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._branding {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_ShopInfo.Response, rhs: Bloombox_Services_Shop_V1_ShopInfo.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._shopStatus != rhs_storage._shopStatus {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._hours != rhs_storage._hours {return false}
        if _storage._contact != rhs_storage._contact {return false}
        if _storage._social != rhs_storage._social {return false}
        if _storage._branding != rhs_storage._branding {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_ShopInfo.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_ShopInfo.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_ShopInfo.Request? = nil
    var _response: Bloombox_Services_Shop_V1_ShopInfo.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_ShopInfo.Operation, rhs: Bloombox_Services_Shop_V1_ShopInfo.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_EnrollMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnrollMember"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_EnrollMember, rhs: Bloombox_Services_Shop_V1_EnrollMember) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_EnrollMember.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_EnrollMember.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "person"),
    2: .same(proto: "source"),
    3: .same(proto: "channel"),
    4: .standard(proto: "doctor_rec"),
    5: .standard(proto: "government_id"),
    6: .same(proto: "location"),
    7: .same(proto: "password"),
    8: .standard(proto: "dry_run"),
    9: .standard(proto: "consumer_profile"),
  ]

  fileprivate class _StorageClass {
    var _person: Opencannabis_Person_Person? = nil
    var _source: Bloombox_Identity_EnrollmentSource = .unspecified
    var _channel: String = String()
    var _doctorRec: Bloombox_Identity_Ids_UserDoctorRec? = nil
    var _governmentID: Bloombox_Identity_ID? = nil
    var _location: Bloombox_Partner_LocationKey? = nil
    var _password: String = String()
    var _dryRun: Bool = false
    var _consumerProfile: Bloombox_Identity_ConsumerProfile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _person = source._person
      _source = source._source
      _channel = source._channel
      _doctorRec = source._doctorRec
      _governmentID = source._governmentID
      _location = source._location
      _password = source._password
      _dryRun = source._dryRun
      _consumerProfile = source._consumerProfile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._person)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._source)
        case 3: try decoder.decodeSingularStringField(value: &_storage._channel)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._doctorRec)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._governmentID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._location)
        case 7: try decoder.decodeSingularStringField(value: &_storage._password)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._dryRun)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._consumerProfile)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._person {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._source != .unspecified {
        try visitor.visitSingularEnumField(value: _storage._source, fieldNumber: 2)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channel, fieldNumber: 3)
      }
      if let v = _storage._doctorRec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._governmentID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._password.isEmpty {
        try visitor.visitSingularStringField(value: _storage._password, fieldNumber: 7)
      }
      if _storage._dryRun != false {
        try visitor.visitSingularBoolField(value: _storage._dryRun, fieldNumber: 8)
      }
      if let v = _storage._consumerProfile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_EnrollMember.Request, rhs: Bloombox_Services_Shop_V1_EnrollMember.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._person != rhs_storage._person {return false}
        if _storage._source != rhs_storage._source {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._doctorRec != rhs_storage._doctorRec {return false}
        if _storage._governmentID != rhs_storage._governmentID {return false}
        if _storage._location != rhs_storage._location {return false}
        if _storage._password != rhs_storage._password {return false}
        if _storage._dryRun != rhs_storage._dryRun {return false}
        if _storage._consumerProfile != rhs_storage._consumerProfile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_EnrollMember.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_EnrollMember.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "foreign_id"),
    3: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2:
        if self.result != nil {try decoder.handleConflictingOneOf()}
        var v: String?
        try decoder.decodeSingularStringField(value: &v)
        if let v = v {self.result = .foreignID(v)}
      case 3:
        if self.result != nil {try decoder.handleConflictingOneOf()}
        var v: Bloombox_Services_Shop_V1_EnrollmentError?
        try decoder.decodeSingularEnumField(value: &v)
        if let v = v {self.result = .error(v)}
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    switch self.result {
    case .foreignID(let v)?:
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    case .error(let v)?:
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_EnrollMember.Response, rhs: Bloombox_Services_Shop_V1_EnrollMember.Response) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_EnrollMember.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_EnrollMember.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_EnrollMember.Request? = nil
    var _response: Bloombox_Services_Shop_V1_EnrollMember.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_EnrollMember.Operation, rhs: Bloombox_Services_Shop_V1_EnrollMember.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_VerifyMember: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".VerifyMember"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_VerifyMember, rhs: Bloombox_Services_Shop_V1_VerifyMember) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_VerifyMember.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_VerifyMember.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "email_address"),
    2: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _emailAddress: String = String()
    var _location: Bloombox_Partner_LocationKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _emailAddress = source._emailAddress
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._emailAddress)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._emailAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._emailAddress, fieldNumber: 1)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_VerifyMember.Request, rhs: Bloombox_Services_Shop_V1_VerifyMember.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._emailAddress != rhs_storage._emailAddress {return false}
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_VerifyMember.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_VerifyMember.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "verified"),
    2: .same(proto: "customer"),
    3: .same(proto: "error"),
  ]

  fileprivate class _StorageClass {
    var _verified: Bool = false
    var _result: Bloombox_Services_Shop_V1_VerifyMember.Response.OneOf_Result?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _verified = source._verified
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._verified)
        case 2:
          var v: Opencannabis_Commerce_Customer?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .customer(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .customer(v)}
        case 3:
          if _storage._result != nil {try decoder.handleConflictingOneOf()}
          var v: Bloombox_Services_Shop_V1_VerifyError?
          try decoder.decodeSingularEnumField(value: &v)
          if let v = v {_storage._result = .error(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._verified != false {
        try visitor.visitSingularBoolField(value: _storage._verified, fieldNumber: 1)
      }
      switch _storage._result {
      case .customer(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .error(let v)?:
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_VerifyMember.Response, rhs: Bloombox_Services_Shop_V1_VerifyMember.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._verified != rhs_storage._verified {return false}
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_VerifyMember.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_VerifyMember.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_VerifyMember.Request? = nil
    var _response: Bloombox_Services_Shop_V1_VerifyMember.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_VerifyMember.Operation, rhs: Bloombox_Services_Shop_V1_VerifyMember.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_CheckZipcode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CheckZipcode"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_CheckZipcode, rhs: Bloombox_Services_Shop_V1_CheckZipcode) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_CheckZipcode.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_CheckZipcode.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zipcode"),
    2: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _zipcode: String = String()
    var _location: Bloombox_Partner_LocationKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _zipcode = source._zipcode
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._zipcode)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._zipcode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._zipcode, fieldNumber: 1)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_CheckZipcode.Request, rhs: Bloombox_Services_Shop_V1_CheckZipcode.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._zipcode != rhs_storage._zipcode {return false}
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_CheckZipcode.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_CheckZipcode.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "supported"),
    2: .standard(proto: "delivery_minimum"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBoolField(value: &self.supported)
      case 2: try decoder.decodeSingularFloatField(value: &self.deliveryMinimum)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.supported != false {
      try visitor.visitSingularBoolField(value: self.supported, fieldNumber: 1)
    }
    if self.deliveryMinimum != 0 {
      try visitor.visitSingularFloatField(value: self.deliveryMinimum, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_CheckZipcode.Response, rhs: Bloombox_Services_Shop_V1_CheckZipcode.Response) -> Bool {
    if lhs.supported != rhs.supported {return false}
    if lhs.deliveryMinimum != rhs.deliveryMinimum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_CheckZipcode.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_CheckZipcode.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_CheckZipcode.Request? = nil
    var _response: Bloombox_Services_Shop_V1_CheckZipcode.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_CheckZipcode.Operation, rhs: Bloombox_Services_Shop_V1_CheckZipcode.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_SubmitOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SubmitOrder"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_SubmitOrder, rhs: Bloombox_Services_Shop_V1_SubmitOrder) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_SubmitOrder.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_SubmitOrder.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "order"),
    2: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _order: Opencannabis_Commerce_Order? = nil
    var _location: Bloombox_Partner_LocationKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _order = source._order
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._order)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._order {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_SubmitOrder.Request, rhs: Bloombox_Services_Shop_V1_SubmitOrder.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._order != rhs_storage._order {return false}
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_SubmitOrder.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_SubmitOrder.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
    2: .standard(proto: "order_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.error)
      case 2: try decoder.decodeSingularStringField(value: &self.orderID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.error != .noError {
      try visitor.visitSingularEnumField(value: self.error, fieldNumber: 1)
    }
    if !self.orderID.isEmpty {
      try visitor.visitSingularStringField(value: self.orderID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_SubmitOrder.Response, rhs: Bloombox_Services_Shop_V1_SubmitOrder.Response) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.orderID != rhs.orderID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_SubmitOrder.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_SubmitOrder.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_SubmitOrder.Request? = nil
    var _response: Bloombox_Services_Shop_V1_SubmitOrder.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_SubmitOrder.Operation, rhs: Bloombox_Services_Shop_V1_SubmitOrder.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_GetOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetOrder"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_GetOrder, rhs: Bloombox_Services_Shop_V1_GetOrder) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_GetOrder.Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_GetOrder.protoMessageName + ".Request"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "order_id"),
    2: .same(proto: "location"),
  ]

  fileprivate class _StorageClass {
    var _orderID: String = String()
    var _location: Bloombox_Partner_LocationKey? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _orderID = source._orderID
      _location = source._location
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._orderID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._location)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._orderID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._orderID, fieldNumber: 1)
      }
      if let v = _storage._location {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_GetOrder.Request, rhs: Bloombox_Services_Shop_V1_GetOrder.Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._orderID != rhs_storage._orderID {return false}
        if _storage._location != rhs_storage._location {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_GetOrder.Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_GetOrder.protoMessageName + ".Response"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "success"),
    2: .same(proto: "order"),
    3: .same(proto: "error"),
  ]

  fileprivate class _StorageClass {
    var _success: Bool = false
    var _order: Opencannabis_Commerce_Order? = nil
    var _error: Bloombox_Services_Shop_V1_OrderError = .noError

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _success = source._success
      _order = source._order
      _error = source._error
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBoolField(value: &_storage._success)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._order)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._error)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._success != false {
        try visitor.visitSingularBoolField(value: _storage._success, fieldNumber: 1)
      }
      if let v = _storage._order {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._error != .noError {
        try visitor.visitSingularEnumField(value: _storage._error, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_GetOrder.Response, rhs: Bloombox_Services_Shop_V1_GetOrder.Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._success != rhs_storage._success {return false}
        if _storage._order != rhs_storage._order {return false}
        if _storage._error != rhs_storage._error {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Bloombox_Services_Shop_V1_GetOrder.Operation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Bloombox_Services_Shop_V1_GetOrder.protoMessageName + ".Operation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "request"),
    2: .same(proto: "response"),
  ]

  fileprivate class _StorageClass {
    var _request: Bloombox_Services_Shop_V1_GetOrder.Request? = nil
    var _response: Bloombox_Services_Shop_V1_GetOrder.Response? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _request = source._request
      _response = source._response
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._request)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._response)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._request {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._response {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Bloombox_Services_Shop_V1_GetOrder.Operation, rhs: Bloombox_Services_Shop_V1_GetOrder.Operation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._request != rhs_storage._request {return false}
        if _storage._response != rhs_storage._response {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
