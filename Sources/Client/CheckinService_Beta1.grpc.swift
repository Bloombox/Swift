//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: checkin/v1beta1/CheckinService_Beta1.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf
import OpenCannabis

public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCall: ClientCallUnary {}

fileprivate final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCallBase: ClientCallUnaryBase<Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request, Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response>, Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCall {
  override class var method: String { return "/bloombox.schema.services.checkin.v1beta1.Checkin/Ping" }
}

public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCall: ClientCallUnary {}

fileprivate final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCallBase: ClientCallUnaryBase<Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request, Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse>, Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCall {
  override class var method: String { return "/bloombox.schema.services.checkin.v1beta1.Checkin/Identification" }
}

public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCall: ClientCallUnary {}

fileprivate final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCallBase: ClientCallUnaryBase<Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request, Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse>, Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCall {
  override class var method: String { return "/bloombox.schema.services.checkin.v1beta1.Checkin/Card" }
}


/// Instantiate Bloombox_Schema_Services_Checkin_V1beta1_CheckinServiceClient, then call methods of this protocol to make API calls.
public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinService: ServiceClient {
  /// Synchronous. Unary.
  func ping(_ request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request) throws -> Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response
  /// Asynchronous. Unary.
  func ping(_ request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request, completion: @escaping (Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response?, CallResult) -> Void) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCall

  /// Synchronous. Unary.
  func identification(_ request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse
  /// Asynchronous. Unary.
  func identification(_ request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request, completion: @escaping (Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse?, CallResult) -> Void) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCall

  /// Synchronous. Unary.
  func card(_ request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse
  /// Asynchronous. Unary.
  func card(_ request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request, completion: @escaping (Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse?, CallResult) -> Void) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCall

}

public final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinServiceClient: ServiceClientBase, Bloombox_Schema_Services_Checkin_V1beta1_CheckinService {
  /// Synchronous. Unary.
  public func ping(_ request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request) throws -> Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response {
    return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func ping(_ request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request, completion: @escaping (Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response?, CallResult) -> Void) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCall {
    return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func identification(_ request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse {
    return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func identification(_ request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request, completion: @escaping (Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse?, CallResult) -> Void) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCall {
    return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func card(_ request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse {
    return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func card(_ request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request, completion: @escaping (Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse?, CallResult) -> Void) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCall {
    return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinProvider: ServiceProvider {
  func ping(request: Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request, session: Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingSession) throws -> Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response
  func identification(request: Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request, session: Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationSession) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse
  func card(request: Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request, session: Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardSession) throws -> Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse
}

extension Bloombox_Schema_Services_Checkin_V1beta1_CheckinProvider {
  public var serviceName: String { return "bloombox.schema.services.checkin.v1beta1.Checkin" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  public func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/bloombox.schema.services.checkin.v1beta1.Checkin/Ping":
      return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingSessionBase(
        handler: handler,
        providerBlock: { try self.ping(request: $0, session: $1 as! Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingSessionBase) })
          .run()
    case "/bloombox.schema.services.checkin.v1beta1.Checkin/Identification":
      return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationSessionBase(
        handler: handler,
        providerBlock: { try self.identification(request: $0, session: $1 as! Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationSessionBase) })
          .run()
    case "/bloombox.schema.services.checkin.v1beta1.Checkin/Card":
      return try Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardSessionBase(
        handler: handler,
        providerBlock: { try self.card(request: $0, session: $1 as! Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingSession: ServerSessionUnary {}

fileprivate final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingSessionBase: ServerSessionUnaryBase<Bloombox_Schema_Services_Checkin_V1beta1_Ping.Request, Bloombox_Schema_Services_Checkin_V1beta1_Ping.Response>, Bloombox_Schema_Services_Checkin_V1beta1_CheckinPingSession {}

public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationSession: ServerSessionUnary {}

fileprivate final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationSessionBase: ServerSessionUnaryBase<Bloombox_Schema_Services_Checkin_V1beta1_IDCheckin.Request, Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse>, Bloombox_Schema_Services_Checkin_V1beta1_CheckinIdentificationSession {}

public protocol Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardSession: ServerSessionUnary {}

fileprivate final class Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardSessionBase: ServerSessionUnaryBase<Bloombox_Schema_Services_Checkin_V1beta1_CardCheckin.Request, Bloombox_Schema_Services_Checkin_V1beta1_CheckinResponse>, Bloombox_Schema_Services_Checkin_V1beta1_CheckinCardSession {}

